using log4net;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.Globalization;
using System.IO;
using System.Net;
using System.Reflection;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Web;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;

namespace PowerBallAutoMartinProgram
{
    public partial class MainForm : Form
    {
        private static readonly ILog logger = LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

        public MainForm()
        {
            InitializeComponent();
        }

        LoginForm loginForm;
        private void MainForm_Load(object sender, EventArgs e)
        {
            loginForm = new LoginForm();
            loginForm.LoginEventHandler += new EventHandler(LoginSuccess);

            switch (loginForm.ShowDialog())
            {
                case DialogResult.OK:
                    loginForm.Close();
                    break;
                case DialogResult.Cancel:
                    Dispose();
                    break;
            }
            allPicksterListView.DoubleBuffered(true);
            directBetRegistListView.DoubleBuffered(true);
            normalModeMaringaleBetRegistListView.DoubleBuffered(true);
            UserBetFollowList.DoubleBuffered(true);
            EosCruiseBetListView.DoubleBuffered(true);
            MirrorBetListView.DoubleBuffered(true);
            samePersonCheckBox.Checked = UtilModel.getBoolean(UtilModel.SamePerson);
            resultMarkCheckBox.Checked = UtilModel.getBoolean(UtilModel.ResultMark);
            errorBeep.Checked = UtilModel.getBoolean(UtilModel.ErrorBeep);
            BettingFalseCheck.Checked = UtilModel.getBoolean(UtilModel.BettingFail);
            patternBetNumber.Text = UtilModel.PatternBetNumber;
            useAutoReverse.Checked = UtilModel.getBoolean(UtilModel.UseAutoReverse);
            checkOverProfit.Checked = UtilModel.getBoolean(UtilModel.UseOverProfit);
            OverProfit.Text = UtilModel.OverProfitValue;
            checkUnderProfit.Checked = UtilModel.getBoolean(UtilModel.UseUnderProfit);
            UnderProfit.Text = UtilModel.UnderProfitValue;
            telegramChatIdTextBox.Text = UtilModel.User_Telegram_Chat_Id.ToString();

            this.Text += " : " + UtilModel.UserSiteUrlAddress;
            this.Text += " : " + UtilModel.UserId;
            this.Text += " : " + UtilModel.UserProfile;
            this.Text += " : " + UtilModel._programVersion;
            this.Text += " : " + Guid.NewGuid().ToString();

            this.allBettingMoneyLabel.Visible = true;
            if (UtilModel.PBGVisible == 1)
            {
                userPickPowerBallGameUseCheck.Visible = true;
            }
            String folderPath = @"./screenshot";
            DirectoryInfo di = new DirectoryInfo(folderPath);
            if (di.Exists == false)
            {
                di.Create();
            }
            folderPath = @"./Log";
            di = new DirectoryInfo(folderPath);
            if (di.Exists == false)
            {
                di.Create();
            }

            _RemainingTimer.Interval = 1000;
            _RemainingTimer.Elapsed += new System.Timers.ElapsedEventHandler(timer_Elapsed);

            Normal_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
            Pattern_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
            Term_Bet_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
            Cruise_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
            HongKong_Cruise_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
            Decal_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
            User_Pickster_Follow_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
            EOS_Cruise_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
            Mirror_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
            OverProfit.Text = "50000000";
            int outValue = 0;
            int.TryParse(Regex.Replace(OverProfit.Text, @"\D", ""), out outValue);
            overProfit = outValue;
            UnderProfit.Text = "-1000000";
            loadPicksterNumber.Text = "10";

            hongkongCruiseBetStartBetMoneyComboBox.Text = "35";
            termBetLevel1.Text = "0";
            termBetLevel2.Text = "0";
            termBetLevel3.Text = "0";
            termBetLevel4.Text = "0";
            termBetLevel5.Text = "0";
            termBetLevel6.Text = "0";
            if (UtilModel.termSelectNumber[0].ToString() != null)
            {
                termSelectNumber1.Text = UtilModel.termSelectNumber[0].ToString();
            }
            if (UtilModel.termSelectNumber[1].ToString() != null)
            {
                termSelectNumber2.Text = UtilModel.termSelectNumber[1].ToString();
            }
            if (UtilModel.termSelectNumber[2].ToString() != null)
            {
                termSelectNumber3.Text = UtilModel.termSelectNumber[2].ToString();
            }
            if (UtilModel.termSelectNumber[3].ToString() != null)
            {
                termSelectNumber4.Text = UtilModel.termSelectNumber[3].ToString();
            }
            if (UtilModel.termSelectNumber[4].ToString() != null)
            {
                termSelectNumber5.Text = UtilModel.termSelectNumber[4].ToString();
            }
            if (UtilModel.termSelectNumber[5].ToString() != null)
            {
                termSelectNumber6.Text = UtilModel.termSelectNumber[5].ToString();
            }
            if (UtilModel.termModePick[0] != null)
            {
                termModePick1.Text = UtilModel.termModePick[0];
            }
            if (UtilModel.termModePick[1] != null)
            {
                termModePick2.Text = UtilModel.termModePick[1];
            }
            if (UtilModel.termModePick[2] != null)
            {
                termModePick3.Text = UtilModel.termModePick[2];
            }
            if (UtilModel.termModePick[3] != null)
            {
                termModePick4.Text = UtilModel.termModePick[3];
            }
            if (UtilModel.termModePick[4] != null)
            {
                termModePick5.Text = UtilModel.termModePick[4];
            }
            if (UtilModel.termModePick[5] != null)
            {
                termModePick6.Text = UtilModel.termModePick[5];
            }
            if (UtilModel.DecalMoney != null)
            {
                MiniGameDecalMoneySettingL1.Text = UtilModel.DecalMoney[0];
                MiniGameDecalMoneySettingL2.Text = UtilModel.DecalMoney[1];
                MiniGameDecalMoneySettingL3.Text = UtilModel.DecalMoney[2];
                MiniGameDecalMoneySettingL4.Text = UtilModel.DecalMoney[3];
                MiniGameDecalMoneySettingL5.Text = UtilModel.DecalMoney[4];
                MiniGameDecalMoneySettingL6.Text = UtilModel.DecalMoney[5];
                MiniGameDecalMoneySettingL7.Text = UtilModel.DecalMoney[6];
                MiniGameDecalMoneySettingL8.Text = UtilModel.DecalMoney[7];
                MiniGameDecalMoneySettingL9.Text = UtilModel.DecalMoney[8];
                MiniGameDecalMoneySettingL10.Text = UtilModel.DecalMoney[9];
                MiniGameDecalMoneySettingL11.Text = UtilModel.DecalMoney[10];
                MiniGameDecalMoneySettingL12.Text = UtilModel.DecalMoney[11];
                DecalMagnification2.Text = UtilModel.DecalMoney[12];
                DecalMagnification3.Text = UtilModel.DecalMoney[13];
                DecalMagnification4.Text = UtilModel.DecalMoney[14];
                DecalMagnification5.Text = UtilModel.DecalMoney[15];
                DecalMagnification6.Text = UtilModel.DecalMoney[16];
                DecalMagnification7.Text = UtilModel.DecalMoney[17];
                DecalMagnification8.Text = UtilModel.DecalMoney[18];
                DecalMagnification9.Text = UtilModel.DecalMoney[19];
                DecalMagnification10.Text = UtilModel.DecalMoney[20];
                DecalMagnification11.Text = UtilModel.DecalMoney[21];
                DecalMagnification12.Text = UtilModel.DecalMoney[22];
            }

            if (UtilModel.TermMoney != null)
            {
                MiniGameTermMoneySettingL1.Text = UtilModel.TermMoney[0];
                MiniGameTermMoneySettingL2.Text = UtilModel.TermMoney[1];
                MiniGameTermMoneySettingL3.Text = UtilModel.TermMoney[2];
                MiniGameTermMoneySettingL4.Text = UtilModel.TermMoney[3];
                MiniGameTermMoneySettingL5.Text = UtilModel.TermMoney[4];
                MiniGameTermMoneySettingL6.Text = UtilModel.TermMoney[5];
                MiniGameTermMoneySettingL7.Text = UtilModel.TermMoney[6];
                MiniGameTermMoneySettingL8.Text = UtilModel.TermMoney[7];
                MiniGameTermMoneySettingL9.Text = UtilModel.TermMoney[8];
                MiniGameTermMoneySettingL10.Text = UtilModel.TermMoney[9];
                MiniGameTermMoneySettingL11.Text = UtilModel.TermMoney[10];
                MiniGameTermMoneySettingL12.Text = UtilModel.TermMoney[11];
                TermMagnification2.Text = UtilModel.TermMoney[12];
                TermMagnification3.Text = UtilModel.TermMoney[13];
                TermMagnification4.Text = UtilModel.TermMoney[14];
                TermMagnification5.Text = UtilModel.TermMoney[15];
                TermMagnification6.Text = UtilModel.TermMoney[16];
                TermMagnification7.Text = UtilModel.TermMoney[17];
                TermMagnification8.Text = UtilModel.TermMoney[18];
                TermMagnification9.Text = UtilModel.TermMoney[19];
                TermMagnification10.Text = UtilModel.TermMoney[20];
                TermMagnification11.Text = UtilModel.TermMoney[21];
                TermMagnification12.Text = UtilModel.TermMoney[22];
            }
            if (UtilModel.PatternEqualSettingMoney != null)
            {
                MiniGamePatterEqualMoneyLevel1.Text = UtilModel.PatternEqualSettingMoney[0];
                MiniGamePatterEqualMoneyLevel2.Text = UtilModel.PatternEqualSettingMoney[1];
                MiniGamePatterEqualMoneyLevel3.Text = UtilModel.PatternEqualSettingMoney[2];
                MiniGamePatterEqualMoneyLevel4.Text = UtilModel.PatternEqualSettingMoney[3];
                MiniGamePatterEqualMoneyLevel5.Text = UtilModel.PatternEqualSettingMoney[4];
                MiniGamePatterEqualMoneyLevel6.Text = UtilModel.PatternEqualSettingMoney[5];
                MiniGamePatterEqualMoneyLevel7.Text = UtilModel.PatternEqualSettingMoney[6];
                MiniGamePatterEqualMoneyLevel8.Text = UtilModel.PatternEqualSettingMoney[7];
                MiniGamePatterEqualMoneyLevel9.Text = UtilModel.PatternEqualSettingMoney[8];
                MiniGamePatterEqualMoneyLevel10.Text = UtilModel.PatternEqualSettingMoney[9];
                MiniGamePatterEqualMoneyLevel11.Text = UtilModel.PatternEqualSettingMoney[10];
                MiniGamePatterEqualMoneyLevel12.Text = UtilModel.PatternEqualSettingMoney[11];
                PatternEqualMagnification2.Text = UtilModel.PatternEqualSettingMoney[12];
                PatternEqualMagnification3.Text = UtilModel.PatternEqualSettingMoney[13];
                PatternEqualMagnification4.Text = UtilModel.PatternEqualSettingMoney[14];
                PatternEqualMagnification5.Text = UtilModel.PatternEqualSettingMoney[15];
                PatternEqualMagnification6.Text = UtilModel.PatternEqualSettingMoney[16];
                PatternEqualMagnification7.Text = UtilModel.PatternEqualSettingMoney[17];
                PatternEqualMagnification8.Text = UtilModel.PatternEqualSettingMoney[18];
                PatternEqualMagnification9.Text = UtilModel.PatternEqualSettingMoney[19];
                PatternEqualMagnification10.Text = UtilModel.PatternEqualSettingMoney[20];
                PatternEqualMagnification11.Text = UtilModel.PatternEqualSettingMoney[21];
                PatternEqualMagnification12.Text = UtilModel.PatternEqualSettingMoney[22];
            }
            if (UtilModel.Cruise_Bet_Money != null)
            {
                CruiseBetMoneyLevel1.Text = UtilModel.Cruise_Bet_Money[0];
                CruiseBetMoneyLevel2.Text = UtilModel.Cruise_Bet_Money[1];
                CruiseBetMoneyLevel3.Text = UtilModel.Cruise_Bet_Money[2];
                CruiseBetMoneyLevel4.Text = UtilModel.Cruise_Bet_Money[3];
                CruiseBetMoneyLevel5.Text = UtilModel.Cruise_Bet_Money[4];
                CruiseBetMoneyLevel6.Text = UtilModel.Cruise_Bet_Money[5];
                cruiseBetMagnification2.Text = UtilModel.Cruise_Bet_Money[6];
                cruiseBetMagnification3.Text = UtilModel.Cruise_Bet_Money[7];
                cruiseBetMagnification4.Text = UtilModel.Cruise_Bet_Money[8];
                cruiseBetMagnification5.Text = UtilModel.Cruise_Bet_Money[9];
                cruiseBetMagnification6.Text = UtilModel.Cruise_Bet_Money[10];
            }
            if (UtilModel.BoxPattern != null)
            {
                textBoxPattern1.Text = UtilModel.BoxPattern[0];
                textBoxPattern2.Text = UtilModel.BoxPattern[1];
                textBoxPattern3.Text = UtilModel.BoxPattern[2];
                textBoxPattern4.Text = UtilModel.BoxPattern[3];
                textBoxPattern5.Text = UtilModel.BoxPattern[4];
                textBoxPattern6.Text = UtilModel.BoxPattern[5];
                textBoxPattern7.Text = UtilModel.BoxPattern[6];
                textBoxPattern8.Text = UtilModel.BoxPattern[7];
                textBoxPattern9.Text = UtilModel.BoxPattern[8];
                textBoxPattern10.Text = UtilModel.BoxPattern[9];
                textBoxPattern11.Text = UtilModel.BoxPattern[10];
                textBoxPattern12.Text = UtilModel.BoxPattern[11];
                textBoxPattern13.Text = UtilModel.BoxPattern[12];
                textBoxPattern14.Text = UtilModel.BoxPattern[13];
                textBoxPattern15.Text = UtilModel.BoxPattern[14];
                textBoxPattern16.Text = UtilModel.BoxPattern[15];
            }
            if (UtilModel.BoxPatternAllPick != null)
            {
                textBoxAllPick1.Text = UtilModel.BoxPatternAllPick[0];
                textBoxAllPick2.Text = UtilModel.BoxPatternAllPick[1];
                textBoxAllPick3.Text = UtilModel.BoxPatternAllPick[2];
                textBoxAllPick4.Text = UtilModel.BoxPatternAllPick[3];
                textBoxAllPick5.Text = UtilModel.BoxPatternAllPick[4];
                textBoxAllPick6.Text = UtilModel.BoxPatternAllPick[5];
                textBoxAllPick7.Text = UtilModel.BoxPatternAllPick[6];
                textBoxAllPick8.Text = UtilModel.BoxPatternAllPick[7];
                textBoxAllPick9.Text = UtilModel.BoxPatternAllPick[8];
                textBoxAllPick10.Text = UtilModel.BoxPatternAllPick[9];
                textBoxAllPick11.Text = UtilModel.BoxPatternAllPick[10];
                textBoxAllPick12.Text = UtilModel.BoxPatternAllPick[11];
                textBoxAllPick13.Text = UtilModel.BoxPatternAllPick[12];
                textBoxAllPick14.Text = UtilModel.BoxPatternAllPick[13];
                textBoxAllPick15.Text = UtilModel.BoxPatternAllPick[14];
                textBoxAllPick16.Text = UtilModel.BoxPatternAllPick[15];
            }
            Normal_Pickster_Bet_Setting_Init();
            magnificationProcessing();
            hongkongCruiseBetCalculation();
            hongkongCruiseBetInit();
            TimeSpan time = DateTime.Now.TimeOfDay;
            PowerBall_Now_TodayInning = (int)Math.Floor((time.TotalSeconds + 125) / 300) + 1;
            todayInning.Text = PowerBall_Now_TodayInning + "회";
        }
        private System.Speech.Synthesis.SpeechSynthesizer m_speechSynthesizer = new System.Speech.Synthesis.SpeechSynthesizer();
        public void AsyncTextSpeak(string text)
        {
            if (string.IsNullOrEmpty(text))
                return;

            m_speechSynthesizer.SpeakAsync(text);
        }

        readonly static int arrayNum = 500;
        readonly static int array2Num = 16;
        int decalMinimumValueInt = 3;
        // 픽스터 정보 배열
        string[,] _picksterInformation = new string[arrayNum, array2Num];

        string[,] _UserPicksterInformation = new string[50, 16];

        Boolean UserFollowModeOnOff = true;
        int TermInning { get; set; }
        double BetRemainingTime { get; set; }
        String TodayDate { get; set; }
        // 남은 시간 타이머
        System.Timers.Timer _RemainingTimer = new System.Timers.Timer();
        DateTime _startDateTime;
        int List_Pickster_Betting_Time { get; set; }
        int Term_Mode_Betting_Time { get; set; }
        int PowerBall_Cruise_Mode_Betting_Time { get; set; }
        int Decal_Mode_Betting_Time { get; set; }
        int Pattern_Equal_Mode_Betting_Time { get; set; }
        int User_Pickster_Follow_Mode_Betting_Time { get; set; }
        int Cruise_Betting_Mode_Betting_Time { get; set; }
        int HongKong_Cruise_Mode_Betting_Time { get; set; }
        int overProfit { get; set; }
        int accountNumber = 20;

        Boolean UserDirectBetComplete { get; set; }
        string UserMaximumSelectPick { get; set; }
        int UserMaximumSelectPick_BetMoney { get; set; }
        // int _r = 0;
        int Normal_Mode_Random_Nonce { get; set; }
        int Pattern_Mode_Random_Nonce { get; set; }
        int Term_Bet_Mode_Random_Nonce { get; set; }
        int Cruise_Mode_Random_Nonce { get; set; }
        int HongKong_Cruise_Mode_Random_Nonce { get; set; }
        int Decal_Mode_Random_Nonce { get; set; }
        int User_Pickster_Follow_Mode_Random_Nonce { get; set; }
        int EOS_Cruise_Mode_Random_Nonce { get; set; }
        int Mirror_Mode_Random_Nonce { get; set; }
        int Driect_Bet_Mode_Random_Nonce { get; set; }
        int PowerBall_Now_All_Inning { get; set; }
        int PowerBall_Now_TodayInning { get; set; }
        string BaccaratInning { get; set; }
        int resultAllInning { get; set; }
        String PowerBall_Result_Number { get; set; }
        String NormalBall_Result_Number { get; set; }
        string PowerBallGame_Result_PowerBall_OddEven { get; set; }
        string PowerBallGame_Result_PowerBall_UnderOver { get; set; }
        string PowerBallGame_Result_NormalBall_OddEven { get; set; }
        string PowerBallGame_Result_NormalBall_UnderOVer { get; set; }
        string firstBallLadderLeftRight { get; set; }
        string firstBallLadder34 { get; set; }
        string firstBallLadderOddEven { get; set; }
        int Normal_Pickster_Pick_PowerBall_Over_Money { get; set; } // 파워볼 오버
        int Normal_Pickster_Pick_PowerBall_Under_Money { get; set; } // 파워볼 언더
        int Normal_Pickster_Pick_PowerBall_Odd_Money { get; set; } // 파워볼 홀
        int Normal_Pickster_Pick_PowerBall_Even_Money { get; set; }// 파워볼 짝
        int nOverMoney { get; set; }
        int nUnderMoney { get; set; }
        int nOddMoney { get; set; }
        int nEvenMoney { get; set; }
        int PowerBall_All_Bet_Money { get; set; }
        int All_Win_Bet_Money { get; set; }
        Boolean GameIsStartStattus { get; set; }
        int loadPickster_min = 10001;
        int loadPickster_max = 10100;
        int startInning { get; set; }
        int picksternumber { get; set; }
        String loadPicksterType { get; set; }
        Boolean _picksterListLoad { get; set; }
        Boolean UserPicksterListLoad { get; set; }
        int allPicksterNumber { get; set; }
        int UserPicksterNumber { get; set; }
        Boolean bettingStatus { get; set; }
        Boolean UserPicksterBettingStatus { get; set; }
        Boolean DirectBetStatus { get; set; }
        Boolean Pattern_Equal_Mode_Betting_Status { get; set; }
        Boolean Cruise_Bet_Mode_Betting_Status { get; set; }

        StringBuilder oddPowerBallOddEven;
        StringBuilder evenPowerBallOddEven;

        StringBuilder oddPowerBallUnderOver;
        StringBuilder evenPowerBallUnderOver;

        StringBuilder oddNormalBallOddEven;
        StringBuilder evenNormalBallOddEven;

        StringBuilder oddNormalBallUnderOver;
        StringBuilder evenNormalBallUnderOver;
        Random selectRandom = new Random();
        string gm { get; set; }
        string DirectBetPickString { get; set; }
        int directbetMoney = 0;
        Boolean patternBetChange { get; set; }
        int CruiseBetPowerBallOddEvenSubLevel = 0;
        int CruiseBetPowerBallUnderOverSubLevel = 0;
        int CruiseBetNormalBallOddEvenSubLevel = 0;
        int CruiseBetNormalBallUnderOverSubLevel = 0;

        Boolean LoadOwnBalance = false;

        Boolean LoadDHPowerBallRoundTiming = false;
        #region beep()
        /// <summary> 
        /// 비프음을 내는 시스템 함수
        /// </summary>
        /// <param name="freq">주파수</param>
        /// <param name="dur">비프음 길이(시간, 단위 : 1000 = 1초)</param>
        [DllImport("KERNEL32.DLL")]
        extern public static void Beep(int freq, int dur);

        private void LoginSuccess(string name)
        {
            MessageBox.Show(name + "님 반갑습니다.\r\n\r\n해당 프로그램은 고객님의 배팅에 \r\n\r\n도움을 주기 위해 만들어진 프로그램입니다. \r\n\r\n해당 프로그램을 맹신하지 말아주시기 바랍니다." +
                "\r\n\r\n프로그램 만료일 : " + UtilModel._limittime,
                            name + "님 반갑습니다.",
                            MessageBoxButtons.OK,
                            MessageBoxIcon.Exclamation);
        }
        #endregion
        // 종료시 처리 자동으로 금액 저장
        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            if (e.CloseReason == CloseReason.UserClosing)
            {
                DialogResult result = MessageBox.Show("정말로 종료하시겠습니까?", "종료", MessageBoxButtons.YesNo);
                if (result == DialogResult.Yes)
                {
                    _RemainingTimer.Stop();
                    XMLModifierPropertiesSettings();
                    Environment.Exit(0);
                }
                else
                {
                    e.Cancel = true;
                }
            }
            else
            {
                e.Cancel = true;
            }
        }
        private void Normal_Pickster_Bet_Setting_Init()
        {
            int outValue;
            for (int _find = 1; _find <= accountNumber; _find++)
            {
                ComboBox _level = (Controls.Find("CBL" + _find.ToString(), true)[0] as ComboBox);
                TextBox _betMoney = (Controls.Find("txtBoxPBM" + _find.ToString(), true)[0] as TextBox);
                _level.ForeColor = Color.Black;
                _level.BackColor = Color.White;

                _level.Text = "1";
                bool _b = int.TryParse(Regex.Replace(txtBtMoneySettingL1.Text, @"\D", ""), out outValue);
                if (_b)
                {
                    _betMoney.Text = outValue.ToString();
                }
            }
        }

        private Boolean loadDHPWBRoungTiming()
        {
            try
            {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.AppendFormat("{0}:8085/auto/api/round_timing?gm=PWB&u=mybro&_=1609577308878", UtilModel.UserSiteUrlAddress);
                string returnMessage;
                var rm = UtilModel.MakeAsyncRequest(stringBuilder.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                returnMessage = rm.Result;
                logger.Info(returnMessage);

                if (returnMessage.Contains("code"))
                {
                    JObject jo = JObject.Parse(returnMessage);
                    int ret_code = int.Parse(jo.SelectToken("code").ToString());
                    if (ret_code == 1)
                    {
                        LoadDHPowerBallRoundTiming = true;
                        resultRound.Text = (PowerBall_Now_TodayInning - 1) + "회";
                        ResultInning1.Text = resultRound.Text;
                        TodayDate = jo.SelectToken("more_info").SelectToken("dateIdx").ToString();
                        PowerBall_Now_All_Inning = int.Parse(jo.SelectToken("more_info").SelectToken("roundNo").ToString());
                        round.Text = jo.SelectToken("more_info").SelectToken("roundNo").ToString();
                        var dayRoundNo = jo.SelectToken("more_info").SelectToken("dayRoundNo").ToString();
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
                return false;
            }
        }
        public class PowerballGameAjaxResult
        {
            public string state { get; set; }
            public string round { get; set; }
            public string powerballOddEven { get; set; }
            public string numberOddEven { get; set; }

            public List<powerballGameAjaxContent> content { get; set; }
        }

        public class powerballGameAjaxContent
        {
            public string trClass { get; set; }
            public string round { get; set; }
            public string todayRound { get; set; }
            public string time { get; set; }
            public string powerball { get; set; }
            public string powerballPeriod { get; set; }
            public string powerballOddEven { get; set; }
            public string powerballUnderOver { get; set; }
            public string number { get; set; }
            public string numberSum { get; set; }
            public string numberSumPeriod { get; set; }
            public string numberPeriod { get; set; }
            public string numberOddEven { get; set; }
            public string numberUnderOver { get; set; }
        }
        private Boolean PowerBallNowInningToResultInningEquals(int resultInning)
        {           
            if (PowerBall_Now_TodayInning == 1)
            {
                if (resultInning == 288)
                {
                    return true;
                }
            } else
            {
                if (resultAllInning == (PowerBall_Now_TodayInning - 1)){

                    return true;
                }
            }
            return false;
        }
        private Boolean getNtryResult()
        {
            try
            {
                PowerBall_Result_Number = null;
                NormalBall_Result_Number = null;
                PowerBallGame_Result_PowerBall_UnderOver = null;
                PowerBallGame_Result_PowerBall_OddEven = null;
                PowerBallGame_Result_NormalBall_UnderOVer = null;
                PowerBallGame_Result_NormalBall_OddEven = null;

                string returnMessage;
                var rm = UtilModel.MakeAsyncRequest("http://ntry.com/data/json/games/powerball/result.json", "application /x-www-form-urlencoded; charset=UTF-8");
                returnMessage = rm.Result;
                logger.Info(returnMessage);
                if (returnMessage.Contains("date"))
                {
                    JObject jo = JObject.Parse(returnMessage);
                    resultAllInning = int.Parse(jo.SelectToken("date_round").ToString());
                    if (PowerBallNowInningToResultInningEquals(resultAllInning))
                    {
                        resultRound.Text = resultAllInning + "회";
                        ResultInning1.Text = resultAllInning.ToString();
                        var jArray = JArray.Parse(jo.SelectToken("ball").ToString());
                        // resultPowerBallNumber1
                        int iNumber = 1;
                        foreach (var item in jArray.Children())
                        {
                            Button resultPowerBallNumber = (Controls.Find("resultPowerBallNumber" + iNumber.ToString(), true)[0] as Button);
                            resultPowerBallNumber.Text = item.Value<string>().ToString();
                            iNumber++;
                        }
                        PowerBallGame_Result_PowerBall_OddEven = jo.SelectToken("pow_ball_oe").ToString();
                        PowerBallGame_Result_PowerBall_UnderOver = jo.SelectToken("pow_ball_unover").ToString().Replace("더", "").Replace("버", "");
                        PowerBallGame_Result_NormalBall_OddEven = jo.SelectToken("def_ball_oe").ToString();
                        PowerBallGame_Result_NormalBall_UnderOVer = jo.SelectToken("def_ball_unover").ToString().Replace("더", "").Replace("버", "");

                        PowerBall_Result_Number = resultPowerBallNumber6.Text;
                        if (!PowerBallOddEvenResult1.Text.Contains(resultAllInning.ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button PowerBallOddEvenResultAfter = (Controls.Find("PowerBallOddEvenResult" + i.ToString(), true)[0] as Button);
                                Button PowerBallOddEvenResultBefore = (Controls.Find("PowerBallOddEvenResult" + (i - 1).ToString(), true)[0] as Button);
                                PowerBallOddEvenResultAfter.Text = PowerBallOddEvenResultBefore.Text;
                            }
                            PowerBallOddEvenResult1.Text = PowerBallGame_Result_PowerBall_OddEven + "\r\n" + resultAllInning;
                        }

                        if (!PowerBallUnderOverResult1.Text.Contains(resultAllInning.ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button PowerBallUnderOverResultAfter = (Controls.Find("PowerBallUnderOverResult" + i.ToString(), true)[0] as Button);
                                Button PowerBallUnderOVerResultBefore = (Controls.Find("PowerBallUnderOverResult" + (i - 1).ToString(), true)[0] as Button);
                                PowerBallUnderOverResultAfter.Text = PowerBallUnderOVerResultBefore.Text;
                            }
                            PowerBallUnderOverResult1.Text = PowerBallGame_Result_PowerBall_UnderOver + "\r\n" + resultAllInning;
                        }

                        if (!NormalBallOddEvenResult1.Text.Contains(resultAllInning.ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button NormalBallOddEvenResultAfter = (Controls.Find("NormalBallOddEvenResult" + i.ToString(), true)[0] as Button);
                                Button NormalBallOddEvenResultBefore = (Controls.Find("NormalBallOddEvenResult" + (i - 1).ToString(), true)[0] as Button);
                                NormalBallOddEvenResultAfter.Text = NormalBallOddEvenResultBefore.Text;
                            }
                            NormalBallOddEvenResult1.Text = PowerBallGame_Result_NormalBall_OddEven + "\r\n" + resultAllInning;
                        }

                        if (!NormalBallUnderOverResult1.Text.Contains(resultAllInning.ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button NormalBallUnderOverResultAfter = (Controls.Find("NormalBallUnderOverResult" + i.ToString(), true)[0] as Button);
                                Button NormalBallUnderOverResultBefore = (Controls.Find("NormalBallUnderOverResult" + (i - 1).ToString(), true)[0] as Button);
                                NormalBallUnderOverResultAfter.Text = NormalBallUnderOverResultBefore.Text;
                            }
                            NormalBallUnderOverResult1.Text = PowerBallGame_Result_NormalBall_UnderOVer + "\r\n" + resultAllInning;
                        }

                        logger.Info(resultAllInning + " / "
                                     + " / 파워볼 : " + PowerBallGame_Result_PowerBall_OddEven + " / " + PowerBallGame_Result_PowerBall_UnderOver + " / "
                                        + " 일반볼/ " + PowerBallGame_Result_NormalBall_OddEven + " / " + PowerBallGame_Result_NormalBall_UnderOVer);
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
                return false;
            }
        }

        private Boolean getAPISiteResult(string ResultUrl)
        {
            try
            {
                PowerBall_Result_Number = null;
                NormalBall_Result_Number = null;
                PowerBallGame_Result_PowerBall_UnderOver = null;
                PowerBallGame_Result_PowerBall_OddEven = null;
                PowerBallGame_Result_NormalBall_UnderOVer = null;
                PowerBallGame_Result_NormalBall_OddEven = null;

                string returnMessage;
                var rm = UtilModel.MakeAsyncRequest(ResultUrl, "application/x-www-form-urlencoded; charset=UTF-8");
                returnMessage = rm.Result;
                logger.Info(returnMessage);

                if (returnMessage.Contains("code"))
                {
                    JObject jo = JObject.Parse(returnMessage);
                    int ret_code = int.Parse(jo.SelectToken("code").ToString());
                    if (ret_code == 1)
                    {
                        resultRound.Text = (PowerBall_Now_TodayInning - 1) + "회";
                        ResultInning1.Text = resultRound.Text;
                        var jArray = JArray.Parse(jo.SelectToken("more_info").ToString());
                        // resultPowerBallNumber1
                        int iNumber = 1;
                        foreach (var item in jArray.Children())
                        {
                            Button resultPowerBallNumber = (Controls.Find("resultPowerBallNumber" + iNumber.ToString(), true)[0] as Button);
                            resultPowerBallNumber.Text = item.Value<string>().ToString();
                            iNumber++;
                        }

                       int normalNumber = int.Parse(resultPowerBallNumber1.Text) + int.Parse(resultPowerBallNumber2.Text) + int.Parse(resultPowerBallNumber3.Text) + int.Parse(resultPowerBallNumber4.Text) + int.Parse(resultPowerBallNumber5.Text);

                        PowerBall_Result_Number = resultPowerBallNumber6.Text;

                        if (int.Parse(resultPowerBallNumber6.Text) % 2 == 0)
                        {
                            PowerBallGame_Result_PowerBall_OddEven = "짝";
                        } else if (int.Parse(resultPowerBallNumber6.Text) % 2 == 1)
                        {
                            PowerBallGame_Result_PowerBall_OddEven = "홀";
                        }
                        if (int.Parse(resultPowerBallNumber6.Text) > 4)
                        {
                            PowerBallGame_Result_PowerBall_UnderOver = "오";
                        }
                        else 
                        {
                            PowerBallGame_Result_PowerBall_UnderOver = "언";
                        }
                        if (normalNumber % 2 == 0)
                        {
                            PowerBallGame_Result_NormalBall_OddEven = "짝";
                        } else if (normalNumber % 2 == 1)
                        {
                            PowerBallGame_Result_NormalBall_OddEven = "홀";
                        }
                        if (normalNumber > 72)
                        {
                            PowerBallGame_Result_NormalBall_UnderOVer = "오";
                        } else
                        {
                            PowerBallGame_Result_NormalBall_UnderOVer = "언";
                        }

                        if (!PowerBallOddEvenResult1.Text.Contains((PowerBall_Now_TodayInning - 1).ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button PowerBallOddEvenResultAfter = (Controls.Find("PowerBallOddEvenResult" + i.ToString(), true)[0] as Button);
                                Button PowerBallOddEvenResultBefore = (Controls.Find("PowerBallOddEvenResult" + (i - 1).ToString(), true)[0] as Button);
                                PowerBallOddEvenResultAfter.Text = PowerBallOddEvenResultBefore.Text;
                            }
                            PowerBallOddEvenResult1.Text = PowerBallGame_Result_PowerBall_OddEven + "\r\n" + (PowerBall_Now_TodayInning - 1);
                        }

                        if (!PowerBallUnderOverResult1.Text.Contains((PowerBall_Now_TodayInning - 1).ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button PowerBallUnderOverResultAfter = (Controls.Find("PowerBallUnderOverResult" + i.ToString(), true)[0] as Button);
                                Button PowerBallUnderOVerResultBefore = (Controls.Find("PowerBallUnderOverResult" + (i - 1).ToString(), true)[0] as Button);
                                PowerBallUnderOverResultAfter.Text = PowerBallUnderOVerResultBefore.Text;
                            }
                            PowerBallUnderOverResult1.Text = PowerBallGame_Result_PowerBall_UnderOver + "\r\n" + (PowerBall_Now_TodayInning - 1);
                        }

                        if (!NormalBallOddEvenResult1.Text.Contains((PowerBall_Now_TodayInning - 1).ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button NormalBallOddEvenResultAfter = (Controls.Find("NormalBallOddEvenResult" + i.ToString(), true)[0] as Button);
                                Button NormalBallOddEvenResultBefore = (Controls.Find("NormalBallOddEvenResult" + (i - 1).ToString(), true)[0] as Button);
                                NormalBallOddEvenResultAfter.Text = NormalBallOddEvenResultBefore.Text;
                            }
                            NormalBallOddEvenResult1.Text = PowerBallGame_Result_NormalBall_OddEven + "\r\n" + (PowerBall_Now_TodayInning - 1);
                        }

                        if (!NormalBallUnderOverResult1.Text.Contains((PowerBall_Now_TodayInning - 1).ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button NormalBallUnderOverResultAfter = (Controls.Find("NormalBallUnderOverResult" + i.ToString(), true)[0] as Button);
                                Button NormalBallUnderOverResultBefore = (Controls.Find("NormalBallUnderOverResult" + (i - 1).ToString(), true)[0] as Button);
                                NormalBallUnderOverResultAfter.Text = NormalBallUnderOverResultBefore.Text;
                            }
                            NormalBallUnderOverResult1.Text = PowerBallGame_Result_NormalBall_UnderOVer + "\r\n" + (PowerBall_Now_TodayInning - 1);
                        }

                        logger.Info((PowerBall_Now_TodayInning - 1) + " / "
                                     + " / 파워볼 : " + PowerBallGame_Result_PowerBall_OddEven + " / " + PowerBallGame_Result_PowerBall_UnderOver + " / "
                                        + " 일반볼/ " + PowerBallGame_Result_NormalBall_OddEven + " / " + PowerBallGame_Result_NormalBall_UnderOVer);
                        return true;
                    }
                    else
                    {
                        return false;
                    }                    
                }
                else
                {
                    return false;
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
                return false;
            }
        }
        private Boolean LoadUserOwnMoney(string ResultUrl)
        {
            try
            {
                string returnMessage;
                var rm = UtilModel.MakeAsyncRequest(ResultUrl, "application/x-www-form-urlencoded; charset=UTF-8");
                returnMessage = rm.Result;
                logger.Info(returnMessage);

                if (returnMessage.Contains("code"))
                {
                    JObject jo = JObject.Parse(returnMessage);
                    int ret_code = int.Parse(jo.SelectToken("code").ToString());
                    if (ret_code == 1)
                    {
                        UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("wallet").ToString());
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
                return false;
            }
        }
        private Boolean getPowerballGameResult()
        {
            try
            {
                PowerBall_Result_Number = null;
                NormalBall_Result_Number = null;
                PowerBallGame_Result_PowerBall_UnderOver = null;
                PowerBallGame_Result_PowerBall_OddEven = null;
                PowerBallGame_Result_NormalBall_UnderOVer = null;
                PowerBallGame_Result_NormalBall_OddEven = null;

                string returnMessage;
                var rm = UtilModel.MakeAsyncRequest("http://www.powerballgame.co.kr/?view=action&action=ajaxPowerballLog&actionType=refreshLog&date=2020-05-07&round=991901", "application/x-www-form-urlencoded; charset=UTF-8");
                returnMessage = rm.Result;
                PowerballGameAjaxResult gameReultJson = JsonConvert.DeserializeObject<PowerballGameAjaxResult>(rm.Result);
                List<powerballGameAjaxContent> content = gameReultJson.content;
                logger.Info(returnMessage);
                if (gameReultJson.state.Equals("success"))
                {
                    resultAllInning = int.Parse(gameReultJson.round);
                    if (resultAllInning == (PowerBall_Now_All_Inning - 1))
                    {
                        resultRound.Text = (PowerBall_Now_TodayInning - 1) + "회";
                        ResultInning1.Text = resultRound.Text;

                        foreach (var contents in content)
                        {
                            PowerBall_Result_Number = contents.powerball;
                            NormalBall_Result_Number = contents.numberSum;
                            PowerBall_Result_Number = NormalBall_Result_Number;

                            if (contents.powerballOddEven.Equals("odd"))
                            {
                                PowerBallGame_Result_PowerBall_OddEven = "홀";
                            }
                            else if (contents.powerballOddEven.Equals("even"))
                            {
                                PowerBallGame_Result_PowerBall_OddEven = "짝";
                            }
                            if (contents.powerballUnderOver.Equals("under"))
                            {
                                PowerBallGame_Result_PowerBall_UnderOver = "언";
                            }
                            else if (contents.powerballUnderOver.Equals("over"))
                            {
                                PowerBallGame_Result_PowerBall_UnderOver = "오";
                            }
                            if (contents.numberUnderOver.Equals("under"))
                            {
                                PowerBallGame_Result_NormalBall_UnderOVer = "언";
                            }
                            else if (contents.numberUnderOver.Equals("over"))
                            {
                                PowerBallGame_Result_NormalBall_UnderOVer = "오";
                            }
                            if (contents.numberOddEven.Equals("odd"))
                            {
                                PowerBallGame_Result_NormalBall_OddEven = "홀";
                            }
                            else if (contents.numberOddEven.Equals("even"))
                            {
                                PowerBallGame_Result_NormalBall_OddEven = "짝";
                            }
                        }


                        if (!PowerBallOddEvenResult1.Text.Contains((PowerBall_Now_TodayInning - 1).ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button PowerBallOddEvenResultAfter = (Controls.Find("PowerBallOddEvenResult" + i.ToString(), true)[0] as Button);
                                Button PowerBallOddEvenResultBefore = (Controls.Find("PowerBallOddEvenResult" + (i - 1).ToString(), true)[0] as Button);
                                PowerBallOddEvenResultAfter.Text = PowerBallOddEvenResultBefore.Text;
                            }
                            PowerBallOddEvenResult1.Text = PowerBallGame_Result_PowerBall_OddEven + "\r\n" + (PowerBall_Now_TodayInning - 1);
                        }

                        if (!PowerBallUnderOverResult1.Text.Contains((PowerBall_Now_TodayInning - 1).ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button PowerBallUnderOverResultAfter = (Controls.Find("PowerBallUnderOverResult" + i.ToString(), true)[0] as Button);
                                Button PowerBallUnderOVerResultBefore = (Controls.Find("PowerBallUnderOverResult" + (i - 1).ToString(), true)[0] as Button);
                                PowerBallUnderOverResultAfter.Text = PowerBallUnderOVerResultBefore.Text;
                            }
                            PowerBallUnderOverResult1.Text = PowerBallGame_Result_PowerBall_UnderOver + "\r\n" + (PowerBall_Now_TodayInning - 1);
                        }

                        if (!NormalBallOddEvenResult1.Text.Contains((PowerBall_Now_TodayInning - 1).ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button NormalBallOddEvenResultAfter = (Controls.Find("NormalBallOddEvenResult" + i.ToString(), true)[0] as Button);
                                Button NormalBallOddEvenResultBefore = (Controls.Find("NormalBallOddEvenResult" + (i - 1).ToString(), true)[0] as Button);
                                NormalBallOddEvenResultAfter.Text = NormalBallOddEvenResultBefore.Text;
                            }
                            NormalBallOddEvenResult1.Text = PowerBallGame_Result_NormalBall_OddEven + "\r\n" + (PowerBall_Now_TodayInning - 1);
                        }

                        if (!NormalBallUnderOverResult1.Text.Contains((PowerBall_Now_TodayInning - 1).ToString()))
                        {
                            for (int i = 8; i >= 2; i--)
                            {
                                Button NormalBallUnderOverResultAfter = (Controls.Find("NormalBallUnderOverResult" + i.ToString(), true)[0] as Button);
                                Button NormalBallUnderOverResultBefore = (Controls.Find("NormalBallUnderOverResult" + (i - 1).ToString(), true)[0] as Button);
                                NormalBallUnderOverResultAfter.Text = NormalBallUnderOverResultBefore.Text;
                            }
                            NormalBallUnderOverResult1.Text = PowerBallGame_Result_NormalBall_UnderOVer + "\r\n" + (PowerBall_Now_TodayInning - 1);
                        }
                        logger.Info(resultAllInning + " / "
                                     + " / 파워볼 : " + PowerBallGame_Result_PowerBall_OddEven + " / " + PowerBallGame_Result_PowerBall_UnderOver + " / "
                                        + " 일반볼/ " + PowerBallGame_Result_NormalBall_OddEven + " / " + PowerBallGame_Result_NormalBall_UnderOVer);
                        return true;
                    }
                    else
                    {
                        return false;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
                return false;
            }
        }
        private void getPowerballGameAllResult()
        {
            try
            {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.Append(UtilModel.configFileDownloadUrl + "result.php");
                stringBuilder.AppendFormat("?username={0}", UtilModel.UserId);
                stringBuilder.AppendFormat("&timetoken={0}", UtilModel._timetoken);

                string returnMessage;
                var rm = UtilModel.MakeAsyncRequest(stringBuilder.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                returnMessage = rm.Result;
                if (returnMessage.Contains("ERROR"))
                {
                    logger.Info(resultAllInning + " / 게임을 결과를 읽어오지 못하였다. ");
                } else
                {

                    JObject jo = JObject.Parse(returnMessage);
                    PowerBallOddEvenResultListView.BeginUpdate();
                    PowerBallUnderOverResultListView.BeginUpdate();
                    NormalBallOddEvenResultListView.BeginUpdate();
                    NormalBallUnderOverResultListView.BeginUpdate();

                    PowerBallOddEvenResultListView.Items.Clear();
                    PowerBallUnderOverResultListView.Items.Clear();
                    NormalBallOddEvenResultListView.Items.Clear();
                    NormalBallUnderOverResultListView.Items.Clear();

                    int PowerBall_OddEven_BreakNumber = 1;
                    int PowerBall_OddEven_PickNumber = 0;

                    string PowerBall_OddEven_OldValue = string.Empty;
                    string PowerBall_OddEven_NewValue = string.Empty;

                    ListViewItem PowerBall_OddEven_ListViewItem;

                    int PowerBall_UnderOver_BreakNumber = 1;
                    int PowerBall_UnderOver_PickNumber = 0;

                    string PowerBall_UnderOver_OldValue = string.Empty;
                    string PowerBall_UnderOver_NewValue = string.Empty;

                    ListViewItem PowerBall_UnderOver_ListViewItem;

                    int NormalBall_OddEven_BreakNumber = 1;
                    int NormalBall_OddEven_PickNumber = 0;

                    string NormalBall_OddEven_OldValue = string.Empty;
                    string NormalBall_OddEven_NewValue = string.Empty;

                    ListViewItem NormalBall_OddEven_ListViewItem;

                    int NormalBall_UnderOver_BreakNumber = 1;
                    int NormalBall_UnderOver_PickNumber = 0;

                    string NormalBall_UnderOver_OldValue = string.Empty;
                    string NormalBall_UnderOver_NewValue = string.Empty;

                    ListViewItem NormalBall_UnderOver_ListViewItem;

                    int resultAllInning = 0;

                    oddPowerBallOddEven = new StringBuilder();
                    evenPowerBallOddEven = new StringBuilder();

                    oddPowerBallUnderOver = new StringBuilder();
                    evenPowerBallUnderOver = new StringBuilder();

                    oddNormalBallOddEven = new StringBuilder();
                    evenNormalBallOddEven = new StringBuilder();

                    oddNormalBallUnderOver = new StringBuilder();
                    evenNormalBallUnderOver = new StringBuilder();

                    var a = jo.SelectToken("result");

                    foreach (var contents in a)
                    {
                        resultAllInning = int.Parse(contents.SelectToken("inning").ToString());

                        PowerBall_OddEven_NewValue = contents.SelectToken("powerball_oddeven").ToString();

                        if (resultAllInning % 2 == 1)
                        {
                            oddPowerBallOddEven.Append(PowerBall_OddEven_NewValue);
                        }
                        else if (resultAllInning % 2 == 0)
                        {
                            evenPowerBallOddEven.Append(PowerBall_OddEven_NewValue);
                        }

                        if (String.IsNullOrEmpty(PowerBall_OddEven_OldValue))
                        {
                            PowerBall_OddEven_OldValue = PowerBall_OddEven_NewValue;
                        }
                        if (PowerBall_OddEven_OldValue.Equals(PowerBall_OddEven_NewValue))
                        {
                            PowerBall_OddEven_PickNumber++;
                            continue;
                        }

                        PowerBall_OddEven_ListViewItem = new ListViewItem(PowerBall_OddEven_PickNumber.ToString());

                        for (int numberI = 1; numberI <= PowerBall_OddEven_PickNumber; numberI++)
                        {
                            if (PowerBall_OddEven_OldValue.Equals("홀"))
                            {
                                PowerBall_OddEven_ListViewItem.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0x1565C0));
                                PowerBall_OddEven_ListViewItem.SubItems.Add("홀");
                            }
                            else if (PowerBall_OddEven_OldValue.Equals("짝"))
                            {
                                PowerBall_OddEven_ListViewItem.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xC62828));
                                PowerBall_OddEven_ListViewItem.SubItems.Add("짝");
                            }
                        }
                        PowerBallOddEvenResultListView.Items.Add(PowerBall_OddEven_ListViewItem);

                        PowerBall_OddEven_OldValue = contents.SelectToken("powerball_oddeven").ToString();
                        PowerBall_OddEven_BreakNumber++;
                        PowerBall_OddEven_PickNumber = 1;
                    }
                    foreach (var contents in a)
                    {
                        resultAllInning = int.Parse(contents.SelectToken("inning").ToString());

                        PowerBall_UnderOver_NewValue = contents.SelectToken("powerball_underover").ToString();

                        if (resultAllInning % 2 == 1)
                        {
                            oddPowerBallUnderOver.Append(PowerBall_UnderOver_NewValue.Replace("버", "").Replace("더", ""));
                        }
                        else if (resultAllInning % 2 == 0)
                        {
                            evenPowerBallUnderOver.Append(PowerBall_UnderOver_NewValue.Replace("버", "").Replace("더", ""));
                        }

                        if (String.IsNullOrEmpty(PowerBall_UnderOver_OldValue))
                        {
                            PowerBall_UnderOver_OldValue = PowerBall_UnderOver_NewValue;
                        }
                        if (PowerBall_UnderOver_OldValue.Equals(PowerBall_UnderOver_NewValue))
                        {
                            PowerBall_UnderOver_PickNumber++;
                            continue;
                        }

                        PowerBall_UnderOver_ListViewItem = new ListViewItem(PowerBall_UnderOver_PickNumber.ToString());

                        for (int numberI = 1; numberI <= PowerBall_UnderOver_PickNumber; numberI++)
                        {
                            if (PowerBall_UnderOver_OldValue.Equals("언더"))
                            {
                                PowerBall_UnderOver_ListViewItem.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0x1565C0));
                                PowerBall_UnderOver_ListViewItem.SubItems.Add("언");
                            }
                            else if (PowerBall_UnderOver_OldValue.Equals("오버"))
                            {
                                PowerBall_UnderOver_ListViewItem.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xC62828));
                                PowerBall_UnderOver_ListViewItem.SubItems.Add("오");
                            }
                        }
                        PowerBallUnderOverResultListView.Items.Add(PowerBall_UnderOver_ListViewItem);

                        PowerBall_UnderOver_OldValue = contents.SelectToken("powerball_underover").ToString();
                        PowerBall_UnderOver_BreakNumber++;
                        PowerBall_UnderOver_PickNumber = 1;
                    }

                    foreach (var contents in a)
                    {
                        resultAllInning = int.Parse(contents.SelectToken("inning").ToString());

                        NormalBall_OddEven_NewValue = contents.SelectToken("normalball_oddeven").ToString();

                        if (resultAllInning % 2 == 1)
                        {
                            oddNormalBallOddEven.Append(NormalBall_OddEven_NewValue);
                        }
                        else if (resultAllInning % 2 == 0)
                        {
                            evenNormalBallOddEven.Append(NormalBall_OddEven_NewValue);
                        }

                        if (String.IsNullOrEmpty(NormalBall_OddEven_OldValue))
                        {
                            NormalBall_OddEven_OldValue = NormalBall_OddEven_NewValue;
                        }
                        if (NormalBall_OddEven_OldValue.Equals(NormalBall_OddEven_NewValue))
                        {
                            NormalBall_OddEven_PickNumber++;
                            continue;
                        }

                        NormalBall_OddEven_ListViewItem = new ListViewItem(NormalBall_OddEven_PickNumber.ToString());

                        for (int numberI = 1; numberI <= NormalBall_OddEven_PickNumber; numberI++)
                        {
                            if (NormalBall_OddEven_OldValue.Equals("홀"))
                            {
                                NormalBall_OddEven_ListViewItem.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0x1565C0));
                                NormalBall_OddEven_ListViewItem.SubItems.Add("홀");
                            }
                            else if (NormalBall_OddEven_OldValue.Equals("짝"))
                            {
                                NormalBall_OddEven_ListViewItem.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xC62828));
                                NormalBall_OddEven_ListViewItem.SubItems.Add("짝");
                            }
                        }
                        NormalBallOddEvenResultListView.Items.Add(NormalBall_OddEven_ListViewItem);

                        NormalBall_OddEven_OldValue = contents.SelectToken("normalball_oddeven").ToString();
                        NormalBall_OddEven_BreakNumber++;
                        NormalBall_OddEven_PickNumber = 1;
                    }

                    foreach (var contents in a)
                    {
                        resultAllInning = int.Parse(contents.SelectToken("inning").ToString());

                        NormalBall_UnderOver_NewValue = contents.SelectToken("normalball_underover").ToString();

                        if (resultAllInning % 2 == 1)
                        {
                            oddNormalBallUnderOver.Append(NormalBall_UnderOver_NewValue.Replace("버", "").Replace("더", ""));
                        }
                        else if (resultAllInning % 2 == 0)
                        {
                            evenNormalBallUnderOver.Append(NormalBall_UnderOver_NewValue.Replace("버", "").Replace("더", ""));
                        }

                        if (String.IsNullOrEmpty(NormalBall_UnderOver_OldValue))
                        {
                            NormalBall_UnderOver_OldValue = NormalBall_UnderOver_NewValue;
                        }
                        if (NormalBall_UnderOver_OldValue.Equals(NormalBall_UnderOver_NewValue))
                        {
                            NormalBall_UnderOver_PickNumber++;
                            continue;
                        }

                        NormalBall_UnderOver_ListViewItem = new ListViewItem(NormalBall_UnderOver_PickNumber.ToString());

                        for (int numberI = 1; numberI <= NormalBall_UnderOver_PickNumber; numberI++)
                        {
                            if (NormalBall_UnderOver_OldValue.Equals("언더"))
                            {
                                NormalBall_UnderOver_ListViewItem.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0x1565C0));
                                NormalBall_UnderOver_ListViewItem.SubItems.Add("언");
                            }
                            else if (NormalBall_UnderOver_OldValue.Equals("오버"))
                            {
                                NormalBall_UnderOver_ListViewItem.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xC62828));
                                NormalBall_UnderOver_ListViewItem.SubItems.Add("오");
                            }
                        }
                        NormalBallUnderOverResultListView.Items.Add(NormalBall_UnderOver_ListViewItem);

                        NormalBall_UnderOver_OldValue = contents.SelectToken("normalball_underover").ToString();
                        NormalBall_UnderOver_BreakNumber++;
                        NormalBall_UnderOver_PickNumber = 1;
                    }

                    PowerBallOddEvenResultListView.EndUpdate();
                    PowerBallUnderOverResultListView.EndUpdate();
                    NormalBallOddEvenResultListView.EndUpdate();
                    NormalBallUnderOverResultListView.EndUpdate();
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        void arrayListView()
        {
            try
            {
                picksternumber = 0;
                _picksterInformation = new string[arrayNum, array2Num];

                if (systemPickUseCheck.Checked)
                {
                    loadPicksterType = "로봇";
                }
                else if (userPickNtryUseCheck.Checked)
                {
                    loadPicksterType = "ntry";
                }
                else if (userPickPowerBallGameUseCheck.Checked)
                {
                    loadPicksterType = "pbg";
                }
                else if (PatternPickUse.Checked)
                {
                    loadPicksterType = "pattern1";
                }
                string page = string.Format("username={0}&password={1}&timetoken={2}&type={3}&min={4}&max={5}", UtilModel.UserId, UtilModel._password, UtilModel._timetoken, loadPicksterType, loadPickster_min, loadPickster_max);// 전송할 Parameter

                string encodeStr = "UTF-8";                                          // 인코딩 방식
                int errorcode = 0;                                                     // 에러 전달받을 값
                string returnVal = "";
                returnVal = UtilModel.GetHttpPOST(page, UtilModel.picksterlist, "POST", encodeStr, ref errorcode);
                JObject jo = JObject.Parse(returnVal);
                String pp = "P";
                String pickstername = "";
                String pbstreak = "";
                String site = "";
                String ballType = "";
                String record = "";

                var a = jo.SelectToken("result");
                foreach (var item in a)
                {
                    pbstreak = "";
                    ballType = "";
                    record = "";

                    pickstername = item.SelectToken("pickstername").ToString();

                    site = item.SelectToken("site").ToString();

                    string[] powerballPick = new string[10];
                    for (int i = 0; i < 10; i++)
                    {
                        powerballPick[i] = item.SelectToken("pb" + (i + 1)).ToString();
                    }
                    pp = item.SelectToken("pp").ToString();
                    int winstreak = 0;
                    int losestreak = 0;
                    if (site.Contains("pattern"))
                    {
                        site = "패턴";
                    }
                    else if (site.Contains("로봇"))
                    {
                        site = "체리";
                    }
                    record = item.SelectToken("win").ToString() + "승" + item.SelectToken("lose").ToString() + "패";
                    if (item.SelectToken("streak").ToString().Contains("-"))
                    {
                        losestreak = int.Parse(item.SelectToken("streak").ToString().Replace("-", ""));
                        pbstreak = losestreak + "연패";
                    }
                    else
                    {
                        winstreak = int.Parse(item.SelectToken("streak").ToString());
                        pbstreak = winstreak + "연승";
                    }

                    if (!pp.Contains("P"))
                    {
                        picksternumber++;
                    }

                    if (pp.Contains("파"))
                    {
                        ballType = "파워";
                    }
                    else if (pp.Contains("일"))
                    {
                        ballType = "일반";
                    }
                    else if (pp.Contains("사"))
                    {
                        ballType = "파사";
                    }
                    string[] row = {
                        pickstername, ballType, record, pbstreak, pp, powerballPick[0], powerballPick[1], powerballPick[2], powerballPick[3], powerballPick[4], powerballPick[5], powerballPick[6], powerballPick[7], powerballPick[8], powerballPick[9], site
                        };
                    for (int j = 0; j < row.Length; j++)
                    {
                        _picksterInformation[allPicksterNumber, j] = row[j];
                    }
                    allPicksterNumber++;
                }
            }
            catch (Exception _ex)
            {
                _picksterListLoad = false;
                txtLogAdd("픽스터 정보를 가져오는 것에 실패하였습니다. 곧 재시도 하겠습니다.", Color.Red);
                logger.Error(_ex.ToString());
            }
        }

        void updateBettingUserInformation()
        {

            for (int num = 1; num <= accountNumber; num++)
            {
                Button _pickster = (Controls.Find("BoxPickster" + num.ToString(), true)[0] as Button);
                if (String.IsNullOrEmpty(_pickster.Text))
                {
                    continue;
                }
                if (_pickster.Text.Contains("--"))
                {
                    continue;
                }
                int index = -1;

                for (int i = 0; i < _picksterInformation.GetLength(0); i++)
                {
                    if (String.IsNullOrEmpty(_picksterInformation[i, 0]))
                    {
                        break;
                    }
                    if (_picksterInformation[i, 0].Equals(_pickster.Text))
                    {
                        index = i;
                        break;
                    }
                }
                if (index < 0)
                {
                    continue;
                }
                if (!String.IsNullOrEmpty(_picksterInformation[index, 0]))
                {
                    TextBox _ballType = (Controls.Find("txtBoxBallType" + num.ToString(), true)[0] as TextBox);
                    _ballType.Text = _picksterInformation[index, 1];
                    if (_ballType.Text.Equals("파워"))
                    {
                        TextBox PR = (Controls.Find("txtBoxPR" + num.ToString(), true)[0] as TextBox);
                        TextBox PS = (Controls.Find("txtBoxPS" + num.ToString(), true)[0] as TextBox);
                        TextBox pick = (Controls.Find("BoxPick" + num.ToString(), true)[0] as TextBox);
                        String strPick = _picksterInformation[index, 4];
                        if (BetRemainingTime < 190)
                        {
                            if (strPick.Contains("P") || strPick.Contains("통과"))
                            {
                                pick.Text = "통과"; // 파볼픽
                                pick.ForeColor = Color.DarkGray;
                            }
                            else
                            {
                                if (strPick.Contains("홀"))
                                {
                                    pick.ForeColor = Color.RoyalBlue;
                                    pick.Text = "홀"; // 파볼픽
                                }
                                else if (strPick.Contains("언더"))
                                {

                                    pick.ForeColor = Color.RoyalBlue;
                                    pick.Text = "언더"; // 파볼픽
                                }
                                else if (strPick.Contains("짝"))
                                {

                                    pick.ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25))))); // 230, 74, 25
                                    pick.Text = "짝"; // 파볼픽
                                }
                                else if (strPick.Contains("오버"))
                                {
                                    pick.ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                                    pick.Text = "오버"; // 파볼픽
                                }
                            }
                        }
                        else
                        {
                            if (strPick.Contains("P") || strPick.Contains("통과"))
                            {
                                pick.Text = "◇";
                            }
                            else
                            {
                                pick.Text = "◆";
                            }
                        }

                        if (strPick.Contains("홀") || strPick.Contains("짝") || strPick.Contains("언더") || strPick.Contains("오버"))
                        {
                            PR.Text = _picksterInformation[index, 2]; // 파워볼 전적
                            PS.Text = _picksterInformation[index, 3]; // 파워볼 연승
                        }
                        else
                        {
                            PR.Text = "---";
                            PS.Text = "---"; // 파워볼 연승
                        }
                    }
                    else if (_ballType.Text.Equals("일반"))
                    {
                        TextBox PR = (Controls.Find("txtBoxPR" + num.ToString(), true)[0] as TextBox);
                        TextBox PS = (Controls.Find("txtBoxPS" + num.ToString(), true)[0] as TextBox);
                        TextBox pick = (Controls.Find("BoxPick" + num.ToString(), true)[0] as TextBox);
                        String strPick = _picksterInformation[index, 4];
                        if (BetRemainingTime < 190)
                        {
                            if (strPick.Contains("P") || strPick.Contains("통과"))
                            {
                                pick.Text = "통과"; // 파볼픽
                                pick.ForeColor = Color.DarkGray;
                            }
                            else
                            {
                                if (strPick.Contains("홀"))
                                {

                                    pick.ForeColor = Color.RoyalBlue;
                                    pick.Text = "홀"; // 파볼픽
                                }
                                else if (strPick.Contains("언더"))
                                {

                                    pick.ForeColor = Color.RoyalBlue;
                                    pick.Text = "언더"; // 파볼픽
                                }
                                else if (strPick.Contains("짝"))
                                {

                                    pick.ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                                    pick.Text = "짝"; // 파볼픽
                                }
                                else if (strPick.Contains("오버"))
                                {
                                    pick.ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                                    pick.Text = "오버"; // 파볼픽
                                }
                            }
                        }
                        else
                        {
                            if (strPick.Contains("P"))
                            {
                                pick.Text = "◇";
                            }
                            else
                            {
                                pick.Text = "◆";
                            }
                        }

                        if (strPick.Contains("홀") || strPick.Contains("짝") || strPick.Contains("언더") || strPick.Contains("오버"))
                        {
                            PR.Text = _picksterInformation[index, 2]; // 파워볼 전적
                            PS.Text = _picksterInformation[index, 3]; // 파워볼 연승
                        }
                        else
                        {
                            PR.Text = "---";
                            PS.Text = "---"; // 파워볼 연승
                        }
                    }
                    else if (_ballType.Text.Equals("파사"))
                    {
                        TextBox PR = (Controls.Find("txtBoxPR" + num.ToString(), true)[0] as TextBox);
                        TextBox PS = (Controls.Find("txtBoxPS" + num.ToString(), true)[0] as TextBox);
                        TextBox pick = (Controls.Find("BoxPick" + num.ToString(), true)[0] as TextBox);
                        String strPick = _picksterInformation[index, 4];
                        if (BetRemainingTime < 190)
                        {
                            if (strPick.Contains("P") || strPick.Contains("통과"))
                            {
                                pick.Text = "통과"; // 파볼픽
                                pick.ForeColor = Color.DarkGray;
                            }
                            else
                            {
                                if (strPick.Contains("홀") || strPick.Contains("3") || strPick.Contains("좌"))
                                {

                                    pick.ForeColor = Color.RoyalBlue;
                                    pick.Text = strPick.Replace("사", ""); // 파볼픽
                                }
                                else if (strPick.Contains("짝") || strPick.Contains("4") || strPick.Contains("우"))
                                {

                                    pick.ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                                    pick.Text = strPick.Replace("사", ""); // 파볼픽
                                }
                            }
                        }
                        else
                        {
                            if (strPick.Contains("P"))
                            {
                                pick.Text = "◇";
                            }
                            else
                            {
                                pick.Text = "◆";
                            }
                        }

                        if (strPick.Contains("홀") || strPick.Contains("짝") || strPick.Contains("3") || strPick.Contains("4") || strPick.Contains("좌") || strPick.Contains("우"))
                        {
                            PR.Text = _picksterInformation[index, 2]; // 파워볼 전적
                            PS.Text = _picksterInformation[index, 3]; // 파워볼 연승
                        }
                        else
                        {
                            PR.Text = "---";
                            PS.Text = "---"; // 파워볼 연승
                        }
                    }
                }
            }
        }
        private void pickPickster()
        {
            try
            {
                _picksterListLoad = true;
                allPicksterNumber = 0;

                arrayListView();

                if (_picksterListLoad)
                {
                    updateBettingUserInformation();

                    try
                    {
                        allPicksterListView.Items.Clear();
                        allPicksterListView.BeginUpdate();
                        for (int i = 0; i < arrayNum; i++)
                        {
                            if (_picksterInformation[i, 0] == null)
                            {
                                break;
                            }
                            ListViewItem item;
                            if (_picksterInformation[i, 0] != null)
                            {
                                item = new ListViewItem(_picksterInformation[i, 0]); // 픽스터 이름
                                item.UseItemStyleForSubItems = false;
                                String site = _picksterInformation[i, 15];
                                for (int k2 = 1; k2 <= 9; k2++)
                                {
                                    if (k2 == 1) // 파워볼 / 엔트리 여부
                                    {
                                        if (site.Contains("pbg"))
                                        {
                                            item.SubItems.Add("PBG");
                                            item.SubItems[0].BackColor = Color.LightGray;
                                            item.SubItems[1].BackColor = Color.LightGray;
                                        }
                                        else if (site.Contains("ntry"))
                                        {
                                            item.SubItems.Add("ntry");
                                        }
                                        else
                                        {
                                            item.SubItems.Add(_picksterInformation[i, 15].ToString());
                                        }
                                    }
                                    else if (k2 == 2) // 전적
                                    {
                                        if (site.Equals("패턴"))
                                        {
                                            item.SubItems.Add(_picksterInformation[i, 2]);
                                            item.SubItems[2].ForeColor = Color.Black;
                                        }
                                        else
                                        {
                                            if (_picksterInformation[i, 4].Contains("P"))
                                            {
                                                item.SubItems.Add(_picksterInformation[i, 2]);
                                                item.SubItems[2].ForeColor = Color.Gainsboro;
                                            }
                                            else
                                            {
                                                item.SubItems.Add(_picksterInformation[i, 2]);
                                                item.SubItems[2].ForeColor = Color.Black;
                                            }
                                        }
                                    }
                                    else if (k2 == 3) // 연승 표기란
                                    {
                                        if (site.Equals("패턴"))
                                        {
                                            item.SubItems.Add(_picksterInformation[i, 3]);  // 연승
                                            if (_picksterInformation[i, 3].Contains("연승"))
                                            {
                                                item.SubItems[3].ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                                            }
                                            else
                                            {
                                                item.SubItems[3].ForeColor = Color.RoyalBlue;
                                            }
                                        }
                                        else if (site.Contains("ntry"))
                                        {
                                            if (_picksterInformation[i, 4].Contains("P"))
                                            {
                                                item.SubItems.Add("0연승");
                                                item.SubItems[3].ForeColor = Color.Gainsboro;
                                            }
                                            else
                                            {
                                                item.SubItems.Add(_picksterInformation[i, 3]);  // 연승
                                            }
                                        }
                                        else
                                        {
                                            item.SubItems.Add(_picksterInformation[i, 3]);  // 연승
                                            if (_picksterInformation[i, 3].Contains("연승"))
                                            {
                                                item.SubItems[3].ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                                            }
                                            else
                                            {
                                                item.SubItems[3].ForeColor = Color.RoyalBlue;
                                            }
                                        }
                                    }
                                    else if (k2 == 4) // 픽
                                    {
                                        if (_picksterInformation[i, k2].Contains("P"))
                                        {
                                            item.SubItems.Add("통");
                                            item.SubItems[k2].ForeColor = Color.LightGray;
                                        }
                                        else
                                        {
                                            if (_picksterInformation[i, k2].Contains("파"))
                                            {
                                                String _pick = "";
                                                if (_picksterInformation[i, 4].Contains("홀"))
                                                {
                                                    _pick = "파홀";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("짝"))
                                                {
                                                    _pick = "파짝";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("오버"))
                                                {
                                                    _pick = "파오";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("언더"))
                                                {
                                                    _pick = "파언";
                                                }

                                                item.SubItems.Add(_pick);
                                                item.SubItems[k2].BackColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                                                item.SubItems[k2].ForeColor = Color.White;
                                            }
                                            else if (_picksterInformation[i, k2].Contains("일"))
                                            {
                                                String _pick = "";
                                                if (_picksterInformation[i, 4].Contains("홀"))
                                                {
                                                    _pick = "일홀";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("짝"))
                                                {
                                                    _pick = "일짝";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("오버"))
                                                {
                                                    _pick = "일오";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("언더"))
                                                {
                                                    _pick = "일언";
                                                }

                                                item.SubItems.Add(_pick);
                                                item.SubItems[k2].BackColor = Color.FromArgb(((int)(((byte)(30)))), ((int)(((byte)(136)))), ((int)(((byte)(229))))); // 30, 136, 229
                                                item.SubItems[k2].ForeColor = Color.White;
                                            }
                                            else if (_picksterInformation[i, k2].Contains("사"))
                                            {
                                                String _pick = "";
                                                if (_picksterInformation[i, 4].Contains("홀"))
                                                {
                                                    _pick = "홀";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("짝"))
                                                {
                                                    _pick = "짝";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("좌"))
                                                {
                                                    _pick = "좌";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("우"))
                                                {
                                                    _pick = "우";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("3"))
                                                {
                                                    _pick = "3";
                                                }
                                                else if (_picksterInformation[i, 4].Contains("4"))
                                                {
                                                    _pick = "4";
                                                }

                                                item.SubItems.Add(_pick);
                                                item.SubItems[k2].BackColor = Color.FromArgb(((int)(((byte)(30)))), ((int)(((byte)(136)))), ((int)(((byte)(229))))); // 30, 136, 229
                                                item.SubItems[k2].ForeColor = Color.White;
                                            }
                                        }
                                    }
                                    else if (k2 >= 5) // 당/미/패 표기
                                    {
                                        if (_picksterInformation[i, k2].Contains("O"))
                                        {
                                            if (resultMarkCheckBox.Checked)
                                            {
                                                item.SubItems.Add("당");
                                                item.SubItems[k2].ForeColor = Color.White;
                                                item.SubItems[k2].BackColor = Color.DarkRed;
                                            }
                                            else
                                            {
                                                String _a = _picksterInformation[i, k2].Replace("O", "");
                                                if (_a.Contains("파"))
                                                {
                                                    if (_a.Contains("언"))
                                                    {
                                                        _a = "언";
                                                    }
                                                    else if (_a.Contains("오"))
                                                    {
                                                        _a = "오";
                                                    }
                                                    else if (_a.Contains("홀"))
                                                    {
                                                        _a = "홀";
                                                    }
                                                    else if (_a.Contains("짝"))
                                                    {
                                                        _a = "짝";
                                                    }
                                                    item.SubItems.Add(_a);
                                                    item.SubItems[k2].ForeColor = Color.OrangeRed;
                                                }
                                                else if (_a.Contains("일"))
                                                {

                                                    if (_a.Contains("언"))
                                                    {
                                                        _a = "언";
                                                    }
                                                    else if (_a.Contains("오"))
                                                    {
                                                        _a = "오";
                                                    }
                                                    else if (_a.Contains("홀"))
                                                    {
                                                        _a = "홀";
                                                    }
                                                    else if (_a.Contains("짝"))
                                                    {
                                                        _a = "짝";
                                                    }
                                                    item.SubItems.Add(_a);
                                                    item.SubItems[k2].ForeColor = Color.MediumVioletRed;
                                                }
                                                else if (_a.Contains("사"))
                                                {

                                                    if (_a.Contains("좌"))
                                                    {
                                                        _a = "좌";
                                                    }
                                                    else if (_a.Contains("우"))
                                                    {
                                                        _a = "우";
                                                    }
                                                    else if (_a.Contains("홀"))
                                                    {
                                                        _a = "홀";
                                                    }
                                                    else if (_a.Contains("짝"))
                                                    {
                                                        _a = "짝";
                                                    }
                                                    else if (_a.Contains("3"))
                                                    {
                                                        _a = "3";
                                                    }
                                                    else if (_a.Contains("4"))
                                                    {
                                                        _a = "4";
                                                    }
                                                    item.SubItems.Add(_a);
                                                    item.SubItems[k2].ForeColor = Color.MediumVioletRed;
                                                }
                                            }
                                        }
                                        else if (_picksterInformation[i, k2].Contains("X"))
                                        {
                                            if (resultMarkCheckBox.Checked)
                                            {
                                                item.SubItems.Add("미");
                                                item.SubItems[k2].ForeColor = Color.White;
                                                item.SubItems[k2].BackColor = Color.DarkGray;
                                            }
                                            else
                                            {
                                                String _b = _picksterInformation[i, k2].Replace("X", "");
                                                if (_b.Contains("파"))
                                                {
                                                    if (_b.Contains("언"))
                                                    {
                                                        _b = "언";
                                                    }
                                                    else if (_b.Contains("오"))
                                                    {
                                                        _b = "오";
                                                    }
                                                    else if (_b.Contains("홀"))
                                                    {
                                                        _b = "홀";
                                                    }
                                                    else if (_b.Contains("짝"))
                                                    {
                                                        _b = "짝";
                                                    }
                                                    item.SubItems.Add(_b);
                                                    item.SubItems[k2].ForeColor = Color.BlueViolet;
                                                }
                                                else if (_b.Contains("일"))
                                                {

                                                    if (_b.Contains("언"))
                                                    {
                                                        _b = "언";
                                                    }
                                                    else if (_b.Contains("오"))
                                                    {
                                                        _b = "오";
                                                    }
                                                    else if (_b.Contains("홀"))
                                                    {
                                                        _b = "홀";
                                                    }
                                                    else if (_b.Contains("짝"))
                                                    {
                                                        _b = "짝";
                                                    }
                                                    item.SubItems.Add(_b);
                                                    item.SubItems[k2].ForeColor = Color.DarkBlue;
                                                }
                                                else if (_b.Contains("사"))
                                                {

                                                    if (_b.Contains("좌"))
                                                    {
                                                        _b = "좌";
                                                    }
                                                    else if (_b.Contains("우"))
                                                    {
                                                        _b = "우";
                                                    }
                                                    else if (_b.Contains("홀"))
                                                    {
                                                        _b = "홀";
                                                    }
                                                    else if (_b.Contains("짝"))
                                                    {
                                                        _b = "짝";
                                                    }
                                                    else if (_b.Contains("3"))
                                                    {
                                                        _b = "3";
                                                    }
                                                    else if (_b.Contains("4"))
                                                    {
                                                        _b = "4";
                                                    }
                                                    item.SubItems.Add(_b);
                                                    item.SubItems[k2].ForeColor = Color.DarkBlue;
                                                }
                                            }
                                        }
                                        else if (_picksterInformation[i, k2].Contains("P"))
                                        {
                                            item.SubItems.Add("통");
                                            item.SubItems[k2].ForeColor = Color.LightGray;
                                        }
                                    }
                                }
                                allPicksterListView.Items.Add(item);
                            }
                        }
                    }
                    finally
                    {
                        allPicksterListView.EndUpdate();
                    }
                }
                SetRowBackgroundColor(allPicksterListView, Color.LightGray, Color.White);
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        private void LoadUserPickster()
        {
            try
            {
                UserPicksterNumber = 0;

                arrayListUserPicksterView();

                //txtLogAdd("총 [" + allPicksterNumber + "] 명 픽스터 완료", Color.White);

                if (UserPicksterListLoad)
                {
                    if (!UserPicksterBettingClosed)
                    {
                        updateBettingUserPicksterInformation();
                    }
                    try
                    {
                        UserBetFollowList.Items.Clear();
                        UserBetFollowList.BeginUpdate();

                        for (int i = 0; i < arrayNum; i++)
                        {
                            if (_UserPicksterInformation[i, 0] == null)
                            {
                                break;
                            }
                            ListViewItem item;
                            if (_UserPicksterInformation[i, 0] != null)
                            {
                                item = new ListViewItem(_UserPicksterInformation[i, 0]); // 픽스터 이름
                                item.UseItemStyleForSubItems = false;
                                for (int k2 = 1; k2 <= 13; k2++)
                                {
                                    if (k2 == 1) // 금액
                                    {
                                        if (_UserPicksterInformation[i, 4].Contains("P"))
                                        {
                                            item.SubItems.Add("0");
                                        }
                                        else
                                        {
                                            item.SubItems.Add(UtilModel.StringFormatChanged(int.Parse(_UserPicksterInformation[i, 15].ToString())));
                                        }
                                    }
                                    else if (k2 == 2) // 전적
                                    {
                                        item.SubItems.Add(_UserPicksterInformation[i, 2]);
                                        item.SubItems[2].ForeColor = Color.Black;
                                    }
                                    else if (k2 == 3) // 연승 표기란
                                    {
                                        item.SubItems.Add(_UserPicksterInformation[i, 3]);  // 연승
                                        if (_UserPicksterInformation[i, 3].Contains("연승"))
                                        {
                                            item.SubItems[3].ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                                        }
                                        else
                                        {
                                            item.SubItems[3].ForeColor = Color.RoyalBlue;
                                        }
                                    }
                                    else if (k2 == 4) // 픽
                                    {
                                        if (_UserPicksterInformation[i, k2].Contains("P"))
                                        {
                                            item.SubItems.Add("통과");
                                            item.SubItems[k2].ForeColor = Color.LightGray;
                                        }
                                        else
                                        {
                                            if (_UserPicksterInformation[i, k2].Contains("파"))
                                            {
                                                String _pick = "";
                                                if (_UserPicksterInformation[i, 4].Contains("홀"))
                                                {
                                                    _pick = "파홀";
                                                }
                                                else if (_UserPicksterInformation[i, 4].Contains("짝"))
                                                {
                                                    _pick = "파짝";
                                                }
                                                else if (_UserPicksterInformation[i, 4].Contains("오버"))
                                                {
                                                    _pick = "파오";
                                                }
                                                else if (_UserPicksterInformation[i, 4].Contains("언더"))
                                                {
                                                    _pick = "파언";
                                                }

                                                item.SubItems.Add(_pick);
                                                item.SubItems[k2].BackColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                                                item.SubItems[k2].ForeColor = Color.White;
                                            }
                                            else if (_UserPicksterInformation[i, k2].Contains("일"))
                                            {
                                                String _pick = "";
                                                if (_UserPicksterInformation[i, 4].Contains("홀"))
                                                {
                                                    _pick = "일홀";
                                                }
                                                else if (_UserPicksterInformation[i, 4].Contains("짝"))
                                                {
                                                    _pick = "일짝";
                                                }
                                                else if (_UserPicksterInformation[i, 4].Contains("오버"))
                                                {
                                                    _pick = "일오";
                                                }
                                                else if (_UserPicksterInformation[i, 4].Contains("언더"))
                                                {
                                                    _pick = "일언";
                                                }

                                                item.SubItems.Add(_pick);
                                                item.SubItems[k2].BackColor = Color.FromArgb(((int)(((byte)(30)))), ((int)(((byte)(136)))), ((int)(((byte)(229))))); // 30, 136, 229
                                                item.SubItems[k2].ForeColor = Color.White;
                                            }
                                        }
                                    }
                                    else if (k2 >= 5) // 당/미/패 표기
                                    {
                                        if (_UserPicksterInformation[i, k2].Contains("O"))
                                        {
                                            item.SubItems.Add("당");
                                            item.SubItems[k2].ForeColor = Color.White;
                                            item.SubItems[k2].BackColor = Color.DarkRed;
                                        }
                                        else if (_UserPicksterInformation[i, k2].Contains("X"))
                                        {
                                            item.SubItems.Add("미");
                                            item.SubItems[k2].ForeColor = Color.White;
                                            item.SubItems[k2].BackColor = Color.DarkGray;
                                        }
                                        else if (_UserPicksterInformation[i, k2].Contains("P"))
                                        {
                                            item.SubItems.Add("통");
                                            item.SubItems[k2].ForeColor = Color.LightGray;
                                        }
                                    }
                                }
                                UserBetFollowList.Items.Add(item);
                            }
                        }
                    }
                    finally
                    {
                        UserBetFollowList.EndUpdate();
                    }
                    SetRowBackgroundColor(UserBetFollowList, Color.LightGray, Color.White);
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        void arrayListUserPicksterView()
        {
            try
            {
                UserPicksterListLoad = true;
                _UserPicksterInformation = new string[arrayNum, array2Num];

                string page = string.Format("username={0}&password={1}&timetoken={2}&type={3}", UtilModel.UserId, UtilModel._password, UtilModel._timetoken, "user");// 전송할 Parameter

                string encodeStr = "UTF-8";                                          // 인코딩 방식
                int errorcode = 0;                                                     // 에러 전달받을 값
                string returnVal = "";
                returnVal = UtilModel.GetHttpPOST(page, UtilModel.picksterlist, "POST", encodeStr, ref errorcode);
                JObject jo = JObject.Parse(returnVal);
                String pp = "P";
                String pickstername = "";
                String pbstreak = "";
                String ballType = "";
                String record = "";
                String betmoney = string.Empty;
                var a = jo.SelectToken("result");
                foreach (var item in a)
                {
                    pbstreak = "";
                    ballType = "";
                    record = "";

                    pickstername = item.SelectToken("pickstername").ToString();

                    string[] powerballPick = new string[30];
                    for (int i = 0; i < 10; i++)
                    {
                        powerballPick[i] = item.SelectToken("pb" + (i + 1)).ToString();
                    }
                    betmoney = item.SelectToken("betmoney").ToString();

                    pp = item.SelectToken("pp").ToString();
                    if (pp.Contains("파"))
                    {
                        ballType = "파워";
                    }
                    else if (pp.Contains("일"))
                    {
                        ballType = "일반";
                    }

                    record = item.SelectToken("win").ToString() + "승" + item.SelectToken("lose").ToString() + "패";
                    if (item.SelectToken("streak").ToString().Contains("-"))
                    {
                        pbstreak = item.SelectToken("streak").ToString().Replace("-", "") + "연패";
                    }
                    else
                    {
                        pbstreak = item.SelectToken("streak").ToString() + "연승";
                    }

                    string[] row = {
                        pickstername, ballType, record, pbstreak, pp, powerballPick[0], powerballPick[1], powerballPick[2], powerballPick[3], powerballPick[4], powerballPick[5], powerballPick[6], powerballPick[7], powerballPick[8], powerballPick[9], betmoney
                        };
                    for (int j = 0; j < row.Length; j++)
                    {
                        _UserPicksterInformation[UserPicksterNumber, j] = row[j];
                    }
                    UserPicksterNumber++;
                }
            }
            catch (Exception _ex)
            {
                UserPicksterListLoad = false;
                txtLogAdd("픽스터 정보를 가져오는 것에 실패하였습니다. 곧 재시도 하겠습니다.", Color.Red);
                logger.Error(_ex.ToString());
            }
        }

        private void updateBettingUserPicksterInformation()
        {
            Double outValue;
            for (int num = 1; num <= 4; num++)
            {
                Button _pickster = (Controls.Find("UserPickster" + num.ToString(), true)[0] as Button);
                if (String.IsNullOrEmpty(_pickster.Text))
                {
                    continue;
                }
                if (_pickster.Text.Contains("--"))
                {
                    continue;
                }
                int index = -1;

                for (int i = 0; i < _UserPicksterInformation.GetLength(0); i++)
                {
                    if (String.IsNullOrEmpty(_UserPicksterInformation[i, 0]))
                    {
                        break;
                    }
                    if (_UserPicksterInformation[i, 0].Equals(_pickster.Text))
                    {
                        index = i;
                        break;
                    }
                }
                if (index < 0)
                {
                    continue;
                }
                if (!String.IsNullOrEmpty(_UserPicksterInformation[index, 0]))
                {
                    String strPick = _UserPicksterInformation[index, 4];
                    TextBox pick = (Controls.Find("UserPicksterPick" + num.ToString(), true)[0] as TextBox);

                    TextBox textBoxBettingMoney = (Controls.Find("UserPicksterBettingMoney" + num.ToString(), true)[0] as TextBox);
                    TextBox textBoxBettingMoneyForPercent = (Controls.Find("UserPicksterBettingMoneyForPercent" + num.ToString(), true)[0] as TextBox);

                    if (strPick.Contains("P") || strPick.Contains("통과"))
                    {
                        pick.Text = "통과"; // 파볼픽
                        pick.ForeColor = Color.DarkGray;
                        textBoxBettingMoney.Text = "0";
                        textBoxBettingMoneyForPercent.Text = "0";
                        continue;
                    }

                    TextBox _ballType = (Controls.Find("UserPicksterBallType" + num.ToString(), true)[0] as TextBox);
                    _ballType.Text = _UserPicksterInformation[index, 1].ToString();
                    _ballType.ForeColor = Color.Black;

                    ComboBox comboBoxPercent = (Controls.Find("UserPicksterPercent" + num.ToString(), true)[0] as ComboBox);

                    textBoxBettingMoney.ForeColor = Color.Black;
                    textBoxBettingMoneyForPercent.ForeColor = Color.Black;
                    int betMoney = int.Parse(_UserPicksterInformation[index, 15]);
                    textBoxBettingMoney.Text = UtilModel.StringFormatChanged(betMoney);

                    bool _b = Double.TryParse(Regex.Replace(comboBoxPercent.Text, @"\D", ""), out outValue);
                    if (!_b)
                    {
                        continue;
                    }
                    int OutBetMoney = (int)(outValue * 0.01 * betMoney);

                    textBoxBettingMoneyForPercent.Text = UtilModel.StringFormatChanged(OutBetMoney);

                    if (strPick.Contains("홀"))
                    {
                        pick.ForeColor = Color.RoyalBlue;
                        pick.Text = "홀"; // 파볼픽
                    }
                    else if (strPick.Contains("언더"))
                    {
                        pick.ForeColor = Color.RoyalBlue;
                        pick.Text = "언더"; // 파볼픽
                    }
                    else if (strPick.Contains("짝"))
                    {
                        pick.ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25))))); // 230, 74, 25
                        pick.Text = "짝"; // 파볼픽
                    }
                    else if (strPick.Contains("오버"))
                    {
                        pick.ForeColor = Color.FromArgb(((int)(((byte)(230)))), ((int)(((byte)(74)))), ((int)(((byte)(25)))));
                        pick.Text = "오버"; // 파볼픽
                    }
                }
            }
        }
        #region 행 배경색 설정하기 - SetRowBackgroundColor(listView, oddRowColor, evenRowColor)



        /// <summary>

        /// 행 배경색 설정하기

        /// </summary>

        /// <param name="listView">ListView 객체</param>

        /// <param name="oddRowColor">홀수 행 색상</param>

        /// <param name="evenRowColor">짝수 행 색상</param>

        public void SetRowBackgroundColor(ListView listView, Color oddRowColor, Color evenRowColor)

        {

            foreach (ListViewItem listViewItem in listView.Items)

            {

                if ((listViewItem.Index % 2) == 0)

                {

                    listViewItem.BackColor = evenRowColor;

                }

                else

                {

                    listViewItem.BackColor = oddRowColor;

                }

            }

        }



        #endregion
        // 남은 시간 표기
        public void setTimeRemaining(double _remainTime)
        {
            TimeSpan getTimeSpan = TimeSpan.FromSeconds(_remainTime);

            remainTime.Text = string.Format("{0:00}:{1:00}", getTimeSpan.Minutes, getTimeSpan.Seconds);
        }
        void start()
        {
            try
            {
                GameIsStartStattus = true;
                _bettingClosed = false;
                txtLogAdd("자동 배팅이 시작되었습니다.", Color.White);
                _startDateTime = DateTime.Now;
                //getPowerballInformation();
                txtLogAdd("[" + PowerBall_Now_All_Inning + "]회 "
                    + "차가 진행 중입니다", Color.White);
                txtNotice.Text = "알림 : " + PowerBall_Now_All_Inning + "회 파워볼 배팅이 진행 중입니다.";

                All_Win_Bet_Money = 0;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money = 0;
                    UtilModel.UserOwnMoney = int.Parse(startVirtualMoneyTextBox.Text);
                    allBettingMoneyLabel.Text = "0";
                    lblTxtNowMoney.Text = startVirtualMoneyTextBox.Text;
                }
                else
                {
                    PowerBall_All_Bet_Money = 0;
                    allBettingMoneyLabel.Text = "0";
                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                }

                loadDHPWBRoungTiming();

                //getPowerballGameResult();
                changeColor();

                //getPowerballGameAllResult();

                overProfit = int.Parse(OverProfit.Text);
                txtLogAdd("현재 수익 설정 : " + UtilModel.StringFormatChanged(overProfit), Color.FromArgb(((int)(((byte)(100)))), ((int)(((byte)(181)))), ((int)(((byte)(246))))));

                int outValue = 0;
                for (int _find = 1; _find <= accountNumber; _find++)
                {
                    ComboBox _level = (Controls.Find("CBL" + _find.ToString(), true)[0] as ComboBox);
                    TextBox _betMoney = (Controls.Find("txtBoxPBM" + _find.ToString(), true)[0] as TextBox);
                    _level.Text = "1";
                    bool _b = int.TryParse(Regex.Replace(txtBtMoneySettingL1.Text, @"\D", ""), out outValue);
                    if (_b)
                    {
                        _betMoney.Text = outValue.ToString();
                    }
                }

                if (systemPickUseCheck.Checked || PatternPickUse.Checked)
                {
                    List_Pickster_Betting_Time = selectRandom.Next(92, 110);
                }
                else
                {
                    List_Pickster_Betting_Time = selectRandom.Next(50, 58);
                }

                Cruise_Betting_Mode_Betting_Time = selectRandom.Next(171, 180);
                Term_Mode_Betting_Time = selectRandom.Next(161, 170);
                Decal_Mode_Betting_Time = selectRandom.Next(151, 160);
                Pattern_Equal_Mode_Betting_Time = selectRandom.Next(141, 150);
                HongKong_Cruise_Mode_Betting_Time = selectRandom.Next(131, 140);
                User_Pickster_Follow_Mode_Betting_Time = selectRandom.Next(40, 45);
                int pcmbt = 0;
                int.TryParse(Regex.Replace(CruiseBetTimeSettingComboBox.Text, @"\D", ""), out pcmbt);
                PowerBall_Cruise_Mode_Betting_Time = pcmbt;
                for (int i = 8; i >= 1; i--)
                {
                    Button Result = (Controls.Find("PowerBallOddEvenResult" + i.ToString(), true)[0] as Button);
                    Result.Text = "통";
                }
                for (int i = 8; i >= 1; i--)
                {
                    Button Result = (Controls.Find("PowerBallUnderOverResult" + i.ToString(), true)[0] as Button);
                    Result.Text = "통";
                }
                for (int i = 8; i >= 1; i--)
                {
                    Button Result = (Controls.Find("NormalBallOddEvenResult" + i.ToString(), true)[0] as Button);
                    Result.Text = "통";
                }
                for (int i = 8; i >= 1; i--)
                {
                    Button Result = (Controls.Find("NormalBallUnderOverResult" + i.ToString(), true)[0] as Button);
                    Result.Text = "통";
                }

                MirrorBetPowerOddEvenPick1.Text = ":::";
                MirrorBetPowerOddEvenPick2.Text = ":::";
                MirrorBetPowerUnderOverPick1.Text = ":::";
                MirrorBetPowerUnderOverPick2.Text = ":::";
                MirrorBetNormalOddEvenPick1.Text = ":::";
                MirrorBetNormalOddEvenPick2.Text = ":::";
                MirrorBetNormalUnderOverPick1.Text = ":::";
                MirrorBetNormalUnderOverPick2.Text = ":::";

                setTimeRemaining(BetRemainingTime);

                //pickPickster();

                getPowerballGameResult();
                /*
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.AppendFormat("{0}:8085/auto/api/get_pushed_result?gm=PWB&d={1}&r={2}&k={3}", UtilModel.UserSiteUrlAddress, TodayDate, PowerBall_Now_TodayInning -1, UtilModel.Bet_Api_Key);
                getAPISiteResult(stringBuilder.ToString());
                */
                _RemainingTimer.Start();
                logger.Info("[" + PowerBall_Now_All_Inning + "] 배팅이 시작되었습니다.");
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }
        private Boolean CheckVersion()
        {
            var req = HttpWebRequest.CreateHttp(UtilModel.fileDownloadUrl + "version.txt");

            using (var res = req.GetResponse())
            {
                using (var stream = res.GetResponseStream())
                {
                    using (var reader = new StreamReader(stream))
                    {
                        int remoteVersion = int.Parse(reader.ReadLine().TrimEnd());

                        if (UtilModel._programVersion < remoteVersion)
                        {
                            //DownloadFiles();
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        /*
        private void DownloadFiles()

        {
            try
            {
                ReplaceData("PowerBallAutoMartinProgram.exe", "system.userdata");

                using (TimeoutWebClient webClient = new TimeoutWebClient())
                {
                    webClient.Encoding = Encoding.UTF8;
                    Uri updateFileURL = new Uri(UtilModel.updatefileurl);
                    webClient.DownloadFileAsync(updateFileURL, "PowerBallAutoMartinProgram.exe");
                }
                Application.DoEvents();
            }
            catch (WebException ex)
            {
                logger.Info(ex.Message);
            }
            catch (UriFormatException ex)
            {
                logger.Info(ex.Message);
            }
            catch (Exception ex)
            {
                logger.Info(ex.Message);
            }
        }
        private void ReplaceData(string setName, string changeName)
        {
            if (File.Exists(changeName))
            {
                File.Delete(changeName);
            }

            if (File.Exists(setName))
            {
                File.Move(setName, changeName);
            }
        }
        */
        // 배팅 종료 눌러서 완전 종료할 때
        private void btnBettingStop_Click(object sender, EventArgs e)
        {
            if (!GameIsStartStattus)
            {
                return;
            }

            BettingStop();
        }

        private void BettingStop()
        {
            for (int _find = 1; _find <= accountNumber; _find++)
            {
                TextBox _ballType = (Controls.Find("txtBoxBallType" + _find.ToString(), true)[0] as TextBox);
                TextBox _boxPick = (Controls.Find("BoxPick" + _find.ToString(), true)[0] as TextBox);
                _ballType.Text = "";
                _boxPick.Text = "";
                _boxPick.ForeColor = Color.Black;
            }

            btnBettingStart.Text = "배팅 시작";
            btnBettingStart.BackColor = Color.White;
            btnBettingStart.ForeColor = Color.Black;

            txtLogAdd("자동 배팅이 종료되었습니다.", Color.White);
            _RemainingTimer.Stop();
            GameIsStartStattus = false;
            logger.Info("배팅이 종료되었습니다.");
        }
        private void TypingOnlyNumber_KeyPress(object sender, KeyPressEventArgs e)
        {
            UtilModel.TypingOnlyNumber(sender, e, false, true);
        }

        // 각종 알림 사항
        public void txtLogAdd(string str, Color _color)
        {
            try
            {
                txtLog.SelectionColor = _color;
                txtLog.AppendText(UtilModel.getTime() + str + "\r\n");
                txtLog.SelectionStart = txtLog.Text.Length;
                txtLog.ScrollToCaret();
                logger.Info(str);
            }
            catch (FormatException formatexception)
            {
                Console.WriteLine(formatexception);
            }
        }

        private void listView_ItemDrag(object sender, ItemDragEventArgs e)
        {
            this.DoDragDrop(e.Item, DragDropEffects.Copy);
        }

        private void tableLayoutPanel1_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel1_DragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster1);
        }

        private void tableLayoutPanel2_DragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster2);
        }

        private void tableLayoutPanel2_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel3_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster3);
        }

        private void tableLayoutPanel3_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel4_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster4);
        }

        private void tableLayoutPanel4_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel5_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster5);
        }

        private void tableLayoutPanel5_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel6_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster6);
        }

        private void tableLayoutPanel6_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel7_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster7);
        }

        private void tableLayoutPanel7_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel8_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster8);
        }

        private void tableLayoutPanel8_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel9_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster9);
        }

        private void tableLayoutPanel9_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel10_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster10);
        }

        private void tableLayoutPanel10_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel11_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster11);
        }

        private void tableLayoutPanel11_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel12_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster12);
        }

        private void tableLayoutPanel12_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel13_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster13);
        }

        private void tableLayoutPanel13_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel14_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster14);
        }

        private void tableLayoutPanel14_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel15_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster15);
        }

        private void tableLayoutPanel15_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel16_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster16);
        }

        private void tableLayoutPanel16_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel17_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster17);
        }

        private void tableLayoutPanel17_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel18_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster18);
        }

        private void tableLayoutPanel18_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel19_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;

            _dragDrop(data, BoxPickster19);
        }

        private void tableLayoutPanel19_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void tableLayoutPanel20_dragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            _dragDrop(data, BoxPickster20);
        }

        private void tableLayoutPanel20_dragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }
        private void _dragDrop(ListViewItem _data, Button pickster)
        {
            if (_bettingClosed)
            {
                return;
            }
            if (!samePersonCheckBox.Checked)
            {
                Boolean _bool = false;
                int findNum = 0;
                for (int _find = 1; _find <= accountNumber; _find++)
                {
                    Button _pickster = (Controls.Find("BoxPickster" + _find.ToString(), true)[0] as Button);
                    if (_pickster.Text.Equals(_data.Text))
                    {
                        findNum = _find;
                        _bool = true;
                        break;
                    }
                }
                if (_bool)
                {
                    txtLogAdd("이미 존재하는 픽스터입니다. [" + findNum + "]번째 칸에 있습니다.", Color.OrangeRed);
                    return;
                }
            }

            pickster.Text = _data.Text;
            logger.Info("[" + _data.Text + " ] 를 배팅 목록에 추가");
        }
        Boolean DirectBettingProcessing { get; set; }
        Boolean UserPicksterBettingClosed { get; set; }
        Boolean UserPicksterBettingProcessing { get; set; }
        Boolean _bettingClosed { get; set; }
        Boolean BettingProcessing { get; set; }
        Boolean getPicksterAndRemainingtimeReload { get; set; }
        Boolean getPowerballinning { get; set; }
        Boolean getPowerBallResultProcessing { get; set; }
        Boolean refreshBettingInformation { get; set; }
        Boolean getPowerBallResult { get; set; }
        Boolean patternEqualModeResult { get; set; }
        Boolean Cruise_Betting_Mode_Result_Process { get; set; }
        Boolean HongKong_Cruise_Betting_Mode_Result_Process { get; set; }
        Boolean EOS_Cruise_Betting_Mode_Result_Process { get; set; }
        Boolean Mirror_Bet_Mode_Result_Process { get; set; }


        delegate void TimerEventFiredDelegate();
        void timer_Elapsed(object sender, System.Timers.ElapsedEventArgs e)
        {
            BeginInvoke(new TimerEventFiredDelegate(remainingTimer_Tick));
        }

        void init275()
        {
            try
            {
                getPowerballinning = true;
                //getPowerballInformation();
                txtLogAdd("파워볼 결과가 나왔습니다.", Color.White);
                txtNotice.Text = "알림 : 파워볼 결과가 나왔습니다.";
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }
        void All_Bet_Result_Process()
        {
            try
            {
                txtLogAdd("현재 결과 처리 중입니다.", Color.FromArgb(((int)(((byte)(100)))), ((int)(((byte)(181)))), ((int)(((byte)(246))))));
                txtNotice.Text = "알림 : 결과 처리 중입니다.";

                powerBallResultProcessing();

                allBetRegistListView_Bet_Result_Processing();

                decalBetResultProcessing();

                if (bettingTerm1 || bettingTerm2 || bettingTerm3 || bettingTerm4 || bettingTerm5 || bettingTerm6)
                {
                    termBetResultProcessing();
                }
                if (!patternEqualModeResult)
                {
                    patternEqualModeResultProcessing();
                }
                if (!Cruise_Betting_Mode_Result_Process)
                {
                    Cruise_Betting_Mode_Result_Processing();
                }
                if (!HongKong_Cruise_Betting_Mode_Result_Process)
                {
                    HongKong_Cruise_Betting_Mode_Result_Processing();
                }

                if (!EOS_Cruise_Betting_Mode_Result_Process)
                {
                    EOS_Cruise_Betting_Mode_Result_Processing();
                }

                if (!Mirror_Bet_Mode_Result_Process)
                {
                    Mirror_Bet_Mode_Result_Processing();
                }

                clearBetInfor();

                updateUserStatus();
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }
        int UserGain = 0;
        private void refreshGain()
        {
            AllBetMoney.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
            WinBetMoney.Text = UtilModel.StringFormatChanged(All_Win_Bet_Money);
            UserGain = All_Win_Bet_Money - PowerBall_All_Bet_Money;
            if (UserGain > 0)
            {
                lblTxtNowGain.ForeColor = Color.FromArgb(255, 171, 145);
                lblTxtNowGain.Text = "▲ " + UtilModel.StringFormatChanged(UserGain);
            }
            else if (UserGain < 0)
            {
                lblTxtNowGain.ForeColor = Color.FromArgb(100, 181, 246);
                lblTxtNowGain.Text = "▼ " + UtilModel.StringFormatChanged(UserGain);
            }
        }

        void updateUserStatus()
        {
            try
            {
                StringBuilder stringBuilder = new StringBuilder();
                stringBuilder.AppendFormat("update={0}", "OK");
                stringBuilder.AppendFormat("&userid={0}", UtilModel.UserId);
                stringBuilder.AppendFormat("&nickname={0}", UtilModel.UserProfile);
                stringBuilder.AppendFormat("&ownmoney={0}", UtilModel.UserOwnMoney);
                stringBuilder.AppendFormat("&allinning={0}", PowerBall_Now_All_Inning);
                stringBuilder.AppendFormat("&token={0}", UtilModel._timetoken);
                stringBuilder.AppendFormat("&startmoney={0}", UtilModel.UserOwnMoney);
                stringBuilder.AppendFormat("&starttime={0}", lblStartTime.Text);
                stringBuilder.AppendFormat("&usersite={0}", UtilModel.UserSiteUrlAddress.Replace("http://www.", "").Replace(".com", ""));
                stringBuilder.AppendFormat("&userip={0}", UtilModel._ip);
                stringBuilder.AppendFormat("&version={0}", UtilModel._programVersion);
                stringBuilder.AppendFormat("&termInning={0}", TermInning);

                string encodeStr = "UTF-8";
                int errorcode = 0;

                String returnMessage = UtilModel.GetHttpPOST(stringBuilder.ToString(), UtilModel.updateuserstatus, "POST", encodeStr, ref errorcode);
                if (returnMessage.Contains("result"))
                {
                    JObject jo = JObject.Parse(returnMessage);
                    String _result = jo.SelectToken("result").ToString();
                    String _reason = jo.SelectToken("reason").ToString();
                    logger.Info("UserStatusUpdate : " + _result + " / " + _reason + "  / 배팅 안한 이닝 : " + TermInning);
                }
                else
                {
                    logger.Info(returnMessage);
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }
        void init270()
        {
            try
            {
                _bettingClosed = false;
                UserPicksterBettingClosed = false;

                txtLogAdd("파워볼 배팅이 진행 중입니다.", Color.White);
                txtNotice.Text = "알림 : 파워볼 배팅이 진행 중입니다.";

                if (WinStop.Checked) // 당첨 정지 모드
                {
                    for (int _find = 1; _find <= accountNumber; _find++)
                    {
                        ComboBox _level = (Controls.Find("CBL" + _find.ToString(), true)[0] as ComboBox);
                        Button _pr = (Controls.Find("btnPR" + _find.ToString(), true)[0] as Button);
                        if (int.Parse(_level.Text) == 1)
                        {
                            _pr.Text = "배팅정지";
                            _pr.ForeColor = Color.White;
                            _pr.BackColor = Color.FromArgb(2, 136, 209);
                        }
                    }
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        void beepSound()
        {
            Beep(512, 300); // 도 0.3초
        }
        int noticeNum = 0;
        private void remainingTimer_Tick()
        {
            TimeSpan diff = DateTime.Now - _startDateTime;
            lblStartTime.Text = string.Format("{0:dd\\ hh\\:mm\\:ss}", diff);
            
            TimeSpan time = DateTime.Now.TimeOfDay;
            PowerBall_Now_TodayInning = (int)Math.Floor((time.TotalSeconds + 125) / 300) + 1;
            todayInning.Text = PowerBall_Now_TodayInning + "회";

            BetRemainingTime = Math.Ceiling((300000 - ((time.TotalSeconds * 1000 + 125000) % 300000)) / 1000);
            BetRemainingTime = (BetRemainingTime >= 300) ? 0 : BetRemainingTime;
            TermInning++;
            
            refreshGain();

            if (TermInning > 5000)
            {
                TermInning = 0;
                BettingStop();
                MessageBox.Show("배팅이 오랫동안 들어간 내역이 없어 프로그램을 종료합니다.", "알림", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }
            if (BaccaratStatus)
            {
                BaccaratProcessing();
            }
            if (BetRemainingTime > 2)
            {
                setTimeRemaining(BetRemainingTime--);

                if (BetRemainingTime - PowerBall_Cruise_Mode_Betting_Time > 0)
                {
                    CruiseBetRemainTime.Text = (BetRemainingTime - PowerBall_Cruise_Mode_Betting_Time) + " ";
                } else
                {
                    CruiseBetRemainTime.Text = "배팅 마감";
                }
                if ((BetRemainingTime - Decal_Mode_Betting_Time) > 0)
                {
                    DecalGroupBox.Text = "데칼모드 | 배팅까지 남은 시간 | " + (BetRemainingTime - Decal_Mode_Betting_Time);
                }
                else
                {
                    DecalGroupBox.Text = "데칼모드 | 배팅 마감";
                }
                
                if (UserFollowModeOnOff)
                {
                    if ((BetRemainingTime - User_Pickster_Follow_Mode_Betting_Time) > 0)
                    {
                        groupBoxUserPicksterFollow.Text = "사용자 따라가기 모드 | 배팅까지 남은 시간 | " + (BetRemainingTime - User_Pickster_Follow_Mode_Betting_Time);
                    }
                    else
                    {
                        groupBoxUserPicksterFollow.Text = "사용자 따라가기 모드 | 남은 시간 : 배팅 마감";
                    }
                }
                /*
                if (remainingTime % 10 == 0)
                {
                    if (UtilModel.notice.Length > 0)
                    {
                        if (UtilModel.notice.Length <= noticeNum)
                        {
                            noticeNum = 0;
                        }
                        textBoxNotice.Text = UtilModel.notice[noticeNum];
                        noticeNum++;
                    }
                }
                if (remainingTime == 295)
                {
                    try
                    {
                        godPickPowerOddEven.Text = "---";
                        godPickPowerUnderOver.Text = "---";
                        godPickNormalOddEven.Text = "---";
                        godPickNormalUnderOver.Text = "---";
                        godPickLadderLeftRight.Text = "---";
                        godPickLadder34.Text = "---";
                        godPickLadderOddEven.Text = "---";
                        UtilModel.notice = UtilModel.GetHttp(UtilModel.noticeUrl).Split(new char[] { '|' });
                    }
                    catch (Exception _ex)
                    {
                        UtilModel.notice[0] = "-------------------------------------------------------------";
                        logger.Error(_ex.ToString() + "공지사항을 읽어오는데 실패하였습니다.");
                    }
                }
                */
                if (BetRemainingTime <= 299 && BetRemainingTime >= 296)
                {
                    CheckTermBet = false;
                    CheckDecalBet = false;

                    DecalBetProcessing = false;
                    TermBetProcessing = false;

                    Check_PatternEqualMode = false;
                    Pattern_Equal_Mode_Betting_Complete = false;

                    Cruise_Betting_Mode_Betting_Complete = false;

                    HongKong_Cruise_Mode_Betting_Complete = false;

                    EOS_Cruise_Mode_Betting_Complete = false;

                    Mirror_Mode_Betting_Complete = false;

                    UserDirectBetComplete = false;
                    UserMaximumSelectPick = string.Empty;
                    UserMaximumSelectPick_BetMoney = 0;

                    patternBetChange = false;
                    _picksterInformation = new string[arrayNum, array2Num];
                    refreshBettingInformation = true;
                    getPowerballinning = false;
                    getPowerBallResultProcessing = false;
                    getPicksterAndRemainingtimeReload = false;
                    patternEqualModeResult = false;
                    Cruise_Betting_Mode_Result_Process = false;
                    HongKong_Cruise_Betting_Mode_Result_Process = false;
                    EOS_Cruise_Betting_Mode_Result_Process = false;
                    Mirror_Bet_Mode_Result_Process = false;
                    getPowerBallResult = false;
                    LoadOwnBalance = false;
                    LoadDHPowerBallRoundTiming = false;
                }
                if (BetRemainingTime <= 297 && BetRemainingTime <= 291 && !LoadDHPowerBallRoundTiming && (BetRemainingTime % 2 == 0))
                {
                    loadDHPWBRoungTiming();
                }
                if (BetRemainingTime <= 290 && BetRemainingTime > 274 && (BetRemainingTime % 3 == 0))
                {
                    //getPowerballInformation();
                    /*
                    if (BetRemainingTime == 288 || BetRemainingTime == 282)
                    {
                        powerballResult();
                    }*/
                    // 
                    if (!getPowerBallResult)
                    {
                        if (getPowerballGameResult())
                        {
                            getPowerBallResult = true;
                        }
                    }
                    if (!getPowerBallResult)
                    {
                        StringBuilder stringBuilder = new StringBuilder();
                        stringBuilder.AppendFormat("{0}:8085/auto/api/get_pushed_result?gm=PWB&d={1}&r={2}&k={3}", UtilModel.UserSiteUrlAddress, TodayDate, PowerBall_Now_TodayInning - 1, UtilModel.Bet_Api_Key);

                        if (getAPISiteResult(stringBuilder.ToString()))
                        {
                            getPowerBallResult = true;
                        }
                    }
                }


                if (BetRemainingTime <= 273 && BetRemainingTime >= 271 && !getPowerballinning)
                {
                    init275();
                }

                if (BetRemainingTime <= 270 && BetRemainingTime >= 180 && (BetRemainingTime % 5 == 0) && !getPowerBallResultProcessing)
                {
                    if (!getPowerBallResult)
                    {
                        /*
                        if (powerballResult())
                        {
                            getPowerBallResult = true;
                        }
                        */
                        if (!getPowerBallResult)
                        {
                            if (getPowerballGameResult())
                            {
                                getPowerBallResult = true;
                            }
                        }
                        if (!getPowerBallResult)
                        {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.AppendFormat("{0}:8085/auto/api/get_pushed_result?gm=PWB&d={1}&r={2}&k={3}", UtilModel.UserSiteUrlAddress, TodayDate, PowerBall_Now_TodayInning - 1, UtilModel.Bet_Api_Key);

                            if (getAPISiteResult(stringBuilder.ToString()))
                            {
                                getPowerBallResult = true;
                            }
                        }
                    }
                    if (getPowerBallResult)
                    {
                        getPowerBallResultProcessing = true;
                        All_Bet_Result_Process();

                        if (!LoadOwnBalance)
                        {
                            if (realOrVirtualMode == 0)
                            {
                                StringBuilder stringBuilder = new StringBuilder();
                                stringBuilder.AppendFormat("{0}:8085/auto/api/user_bal?u={1}&k={2}", UtilModel.UserSiteUrlAddress, UtilModel.UserId, UtilModel.Bet_Api_Key);

                                if (LoadUserOwnMoney(stringBuilder.ToString()))
                                {
                                    LoadOwnBalance = true;
                                }
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                        }
                    }
                }

                if (BetRemainingTime <= 264 && BetRemainingTime >= 263)
                {
                    init270();
                    picksterNameUnLock();
                    UserPicksterNameUnLock();

                    remainTime.ForeColor = Color.White;
                    remainTime.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 8]));
                    getPicksterAndRemainingtimeReload = false;

                    if (!LoadDHPowerBallRoundTiming)
                    {
                        loadDHPWBRoungTiming();
                    }


                    if (checkOverProfit.Checked)
                    {
                        if (UserGain > overProfit)
                        {
                            if (errorBeep.Checked)
                            {
                                beepSound();
                            }
                            txtLogAdd("축하드립니다. 수익 설정 금액을 초과하였습니다.", Color.White);
                            txtNotice.Text = "알림 : 축하드립니다. 수익 설정 금액을 초과하였습니다.";

                            BettingStop();
                        }
                    }
                    if (checkUnderProfit.Checked)
                    {
                        if (UserGain < int.Parse(UnderProfit.Text))
                        {
                            if (errorBeep.Checked)
                            {
                                beepSound();
                            }
                            txtLogAdd("손실 설정 금액을 초과하였습니다.", Color.White);
                            txtNotice.Text = "알림 : 손실 설정 금액을 초과하였습니다.";

                            for (int _find = 1; _find <= accountNumber; _find++)
                            {
                                Button _pr = (Controls.Find("btnPR" + _find.ToString(), true)[0] as Button);
                                _pr.Text = "배팅정지";
                                _pr.ForeColor = Color.White;
                                _pr.BackColor = Color.FromArgb(2, 136, 209);
                            }

                            BettingStop();
                        }
                    }
                    //getPowerballGameAllResult();
                }
                /*
                if (BetRemainingTime == 260 || BetRemainingTime == 257)
                {
                    if (UtilModel.User_Telegram_Chat_Id > 0)
                    {
                        if (bettingDecalMessageCheck.Checked)
                        {
                            if (CheckTelegramMessageNormalBallUnderOverDecal())
                            {
                                UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode("[" + PowerBall_Now_All_Inning + "] 데칼모드 일반볼 언오버 발생"));
                            }
                            if (CheckTelegramMessageNormalBallOddEvenDecal())
                            {
                                UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode("[" + PowerBall_Now_All_Inning + "] 데칼모드 일반볼 홀짝 발생"));
                            }
                            if (CheckTelegramMessagePowerBallUnderOverDecal())
                            {
                                UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode("[" + PowerBall_Now_All_Inning + "] 데칼모드 파워볼 언오버 발생"));
                            }
                            if (CheckTelegramMessagePowerBallOddEvenDecal())
                            {
                                UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode("[" + PowerBall_Now_All_Inning + "] 데칼모드 파워볼 홀짝 발생"));
                            }
                        }
                    }
                }
                if (BetRemainingTime == 255 || BetRemainingTime == 252)
                {
                    if (UtilModel.User_Telegram_Chat_Id > 0)
                    {
                        if (bettingTermMessageCheck.Checked)
                        {
                            if (CheckTelegramMessageNumberTermBet())
                            {
                                UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode("[" + PowerBall_Now_All_Inning + "] 파워볼 조건 모드 발생 | 현재 파워볼 숫자 : " + PowerBall_Result_Number));
                            }
                        }
                    }
                }
                */

                if (BetRemainingTime <= 170 && BetRemainingTime >= 169 && !getPowerBallResult)
                {
                    if (!LoadDHPowerBallRoundTiming)
                    {
                        loadDHPWBRoungTiming();
                    }

                    getPowerBallResultProcessing = false;
                    if (errorBeep.Checked)
                    {
                        beepSound();
                    }
                    for (int i = 8; i >= 1; i--)
                    {
                        Button Result = (Controls.Find("PowerBallOddEvenResult" + i.ToString(), true)[0] as Button);
                        Result.Text = "통";
                    }
                    for (int i = 8; i >= 1; i--)
                    {
                        Button Result = (Controls.Find("PowerBallUnderOverResult" + i.ToString(), true)[0] as Button);
                        Result.Text = "통";
                    }
                    for (int i = 8; i >= 1; i--)
                    {
                        Button Result = (Controls.Find("NormalBallOddEvenResult" + i.ToString(), true)[0] as Button);
                        Result.Text = "통";
                    }
                    for (int i = 8; i >= 1; i--)
                    {
                        Button Result = (Controls.Find("NormalBallUnderOverResult" + i.ToString(), true)[0] as Button);
                        Result.Text = "통";
                    }

                    TermInning = 0;
                    BettingStop();
                    MessageBox.Show("[" + DateTime.Now.ToString("HH:mm:ss") + "] 결과값을 제대로 읽어오지 못하였습니다. 확인하여 주십시요!");
                    return;
                }

                if (BetRemainingTime <= 250 && BetRemainingTime >= 180 && getPowerBallResult)
                {
                    if (MirrorBetPowerOddEvenUseCheck.Checked)
                    {
                       MirrorBetPowerBallOddEvenCheck();
                    }
                    if (MirrorBetPowerUnderOverUseCheck.Checked)
                    {
                        MirrorBetPowerBallUnderOverCheck();
                    }
                    if (MirrorBetNormalOddEvenUseCheck.Checked)
                    {
                      MirrorBetNormalBallOddEvenCheck();
                    }
                    if (MirrorBetNormalUnderOverUseCheck.Checked)
                    {
                      MirrorBetNormalBallUnderOverCheck();
                    }

                    if (checkBoxDecalPowerBallOddEven.Checked || checkBoxDecalPowerBallUnderOver.Checked || checkBoxDecalNormalBallOddEven.Checked || checkBoxDecalNormalBallUnderOver.Checked)
                    {
                        if (!CheckDecalBet)
                        {
                            CheckDecalBet = true;
                            if (DecalOrTermCheck.Checked)
                            {
                                if (bettingTerm1 || bettingTerm2 || bettingTerm3 || bettingTerm4 || bettingTerm5 || bettingTerm6)
                                {
                                    txtLogAdd("이미 조건모드 배팅이 진행되고 있어 데칼 모드는 진행하지 않습니다..", Color.White);
                                }
                                else
                                {
                                    CheckPowerBallOddEvenDecal();
                                    CheckPowerBallUnderOverDecal();
                                    CheckNormalBallOddEvenDecal();
                                    CheckNormalBallUnderOverDecal();
                                }
                            }
                            else
                            {
                                CheckPowerBallOddEvenDecal();
                                CheckPowerBallUnderOverDecal();
                                CheckNormalBallOddEvenDecal();
                                CheckNormalBallUnderOverDecal();
                            }
                        }
                    }

                    if (!CheckTermBet)
                    {
                        CheckTermBet = true;

                        if (DecalOrTermCheck.Checked)
                        {
                            if (BetPowerBallOddEvenDecal || BetPowerBallUnderOverDecal || BetNormalBallOddEvenDecal || BetNormalBallUnderOverDecal)
                            {
                                txtLogAdd("이미 데칼모드 배팅이 진행되고 있어 조건 모드는 진행하지 않습니다..", Color.White);
                            }
                            else
                            {
                                CheckNumberTermBet();
                            }
                        }
                        else
                        {
                            CheckNumberTermBet();
                        }
                    }

                    if (!Check_PatternEqualMode)
                    {
                        checking_Pattern_Equal_Mode();
                    }
                }

                if (BetRemainingTime < 260 && getPowerBallResult && !EOS_Cruise_Mode_Betting_Complete)
                {
                    checkEOSCruisePowerBallOddEvenCheck();
                    checkEOSCruisePowerBallUnderOverCheck();
                    checkEOSCruiseNormalBallOddEvenCheck();
                    checkEOSCruiseNormalBallUnderOverCheck();
                }

                /*
                if (BetRemainingTime == 260
                    || BetRemainingTime == 240
                    || BetRemainingTime == 180
                    || BetRemainingTime == 150
                    || BetRemainingTime == 120
                    || BetRemainingTime == 90
                    || BetRemainingTime >= 60 && BetRemainingTime <= 70)
                {
                    if (getPicksterAndRemainingtimeReload == false)
                    {
                        getPicksterAndRemainingtimeReload = true;
                        if (!_bettingClosed)
                        {
                            pickPickster();
                        }

                        //getPowerballInformation();
                    }
                }

                if (BetRemainingTime <= 275 && BetRemainingTime >= 40)
                {
                    if (BetRemainingTime % 10 == 2)
                    {
                        LoadUserPickster();
                    }
                }

                if (BetRemainingTime == 250)
                {
                    // 보유금액과 배팅금액을 체크하여 배팅금액이 보유금액보다 클 시에는 경고 창을 보내자;
                    int _nextLevelAllBettingMony = 0;
                    for (int _find = 1; _find <= accountNumber; _find++)
                    {
                        // btnPR1
                        Button _boxPickster = (Controls.Find("BoxPickster" + _find.ToString(), true)[0] as Button);
                        if (_boxPickster.Text.Contains("--"))
                        {
                            continue;
                        }
                        Button _pr = (Controls.Find("btnPR" + _find.ToString(), true)[0] as Button);
                        if (_pr.Text.Contains("진행"))
                        {
                            TextBox _bettingMoney = (Controls.Find("txtBoxPBM" + _find.ToString(), true)[0] as TextBox);
                            _nextLevelAllBettingMony += int.Parse(_bettingMoney.Text);
                        }
                    }
                    if (UtilModel.UserOwnMoney > 0)
                    {
                        int _gab = _nextLevelAllBettingMony - UtilModel.UserOwnMoney;
                        if (_gab > 0)
                        {
                            if (errorBeep.Checked)
                            {
                                beepSound();
                            }
                            MessageBox.Show("[" + DateTime.Now.ToString("HH:mm:ss") + "] 다음 단계의 금액이 [" + _gab + "원] 부족합니다." +
                                "\r\n\r\n충전이 필요합니다." +
                                "\r\n\r\n단 충전을 하였을 경우 다음 배팅 후" +
                                "\r\n\r\n금액이 적용되오니 신경 쓰지 말아주시기 바랍니다.");
                        }
                    }
                }
                */

                if (BetRemainingTime == 255 || BetRemainingTime == 230 || BetRemainingTime == 200 || BetRemainingTime == 170 || BetRemainingTime == 140 || BetRemainingTime == 110 || BetRemainingTime == 83 || BetRemainingTime == 68 || BetRemainingTime == 10)
                {
                    getPicksterAndRemainingtimeReload = false;
                }

                /*
                if (systemPickUseCheck.Checked || PatternPickUse.Checked)
                {
                    if (BetRemainingTime < (List_Pickster_Betting_Time + 5) && BetRemainingTime > List_Pickster_Betting_Time)
                    {
                        if (!_bettingClosed)
                        {
                            patternBet();
                        }
                    }
                }
                else
                {
                    if (BetRemainingTime < 65 && BetRemainingTime > 60)
                    {
                        if (!_bettingClosed)
                        {
                            patternBet();
                        }
                    }
                }
                if (UserFollowModeOnOff)
                {
                    if (!UserPicksterBettingClosed && BetRemainingTime <= User_Pickster_Follow_Mode_Betting_Time && BetRemainingTime >= 25)
                    {
                        UserPicksterBettingClosed = true;
                        UserPicksterBettingProcessing = true;

                        txtLogAdd(PowerBall_Now_All_Inning + "회 사용자 따라가기 배팅이 마감되었습니다.", Color.White);
                        txtNotice.Text = "알림 : 사용자 따라가기 배팅이 마감되었습니다. 등록 중입니다.";

                        UserPicksterNameLock();
                        UserPIcksterFollowBet();

                        groupBoxUserPicksterFollow.Text = "사용자 따라가기 모드 | 남은 시간 : 배팅 마감";

                        updateUserStatus();
                        UserPicksterBettingProcessing = false;
                    }
                }
                */
                if (BetRemainingTime < Term_Mode_Betting_Time && BetRemainingTime > (Term_Mode_Betting_Time - 5) && !Mirror_Mode_Betting_Complete)
                {
                    Mirror_Betting_Mode_Betting_Process();
                }

                if (BetRemainingTime < PowerBall_Cruise_Mode_Betting_Time && BetRemainingTime > (PowerBall_Cruise_Mode_Betting_Time - 5) && !EOS_Cruise_Mode_Betting_Complete)
                {
                    EOS_Cruise_Betting_Mode_Betting_Process();
                }

                if (BetRemainingTime < Term_Mode_Betting_Time && BetRemainingTime > (Term_Mode_Betting_Time - 5) && !TermBetProcessing)
                {
                    if (bettingTerm1 || bettingTerm2 || bettingTerm3 || bettingTerm4 || bettingTerm5 || bettingTerm6)
                    {
                        Term_Mode_Betting_Process();
                    }
                }
                if (BetRemainingTime < Decal_Mode_Betting_Time && BetRemainingTime > (Decal_Mode_Betting_Time - 5) && !DecalBetProcessing)
                {
                    if (BetPowerBallOddEvenDecal || BetPowerBallUnderOverDecal || BetNormalBallOddEvenDecal || BetNormalBallUnderOverDecal)
                    {
                        Decal_Mode_Betting_Process();
                    }
                }

                if (BetRemainingTime < Pattern_Equal_Mode_Betting_Time && BetRemainingTime > (Pattern_Equal_Mode_Betting_Time - 5) && !Pattern_Equal_Mode_Betting_Complete)
                {
                    Pattern_Equal_Mode_Betting_Process();
                }
                if (BetRemainingTime < Cruise_Betting_Mode_Betting_Time && BetRemainingTime > (Cruise_Betting_Mode_Betting_Time - 5) && !Cruise_Betting_Mode_Betting_Complete)
                {
                    Cruise_Betting_Mode_Betting_Process();
                }
                if (BetRemainingTime < HongKong_Cruise_Mode_Betting_Time && BetRemainingTime > (HongKong_Cruise_Mode_Betting_Time - 5) && !HongKong_Cruise_Mode_Betting_Complete)
                {
                    HongKong_Cruise_Betting_Mode_Betting_Process();
                }
                
                if (BetRemainingTime < 45)
                {
                    LoadOwnBalance = false;
                    if (!UserDirectBetComplete && UserMaximumSelectPick_BetMoney > 0)
                    {
                        UserDirectBetComplete = true;
                        registUserPickster(UserMaximumSelectPick, UserMaximumSelectPick_BetMoney);
                    }
                }

                if (!_bettingClosed && BetRemainingTime <= List_Pickster_Betting_Time && BetRemainingTime >= 25)
                {
                    if (!LoadOwnBalance)
                    {
                        if (realOrVirtualMode == 0)
                        {
                            StringBuilder stringBuilder = new StringBuilder();
                            stringBuilder.AppendFormat("{0}:8085/auto/api/user_bal?u={1}&k={2}", UtilModel.UserSiteUrlAddress, UtilModel.UserId, UtilModel.Bet_Api_Key);

                            if (LoadUserOwnMoney(stringBuilder.ToString()))
                            {
                                LoadOwnBalance = true;
                            }
                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                        }
                    }

                    BettingProcessing = true;
                    _bettingClosed = true;
                    txtLogAdd(PowerBall_Now_All_Inning + "회 배팅이 마감되었습니다.", Color.White);
                    txtNotice.Text = "알림 : 배팅이 마감되었습니다. 등록 중입니다.";

                    picksterNameLock();
                    bet();
                    remainTime.ForeColor = Color.White;
                    remainTime.BackColor = Color.FromArgb(66, 66, 66);

                    if (bettingStatus)
                    {
                        updateUserStatus();
                    }

                    ScreenCapture(this.Width, this.Height, this.Location);
                    //getPowerballInformation();

                    BettingProcessing = false;
                }
                if (BetRemainingTime == 10)
                {
                    txtLogAdd("잠시 후 파워볼 [" + PowerBall_Now_All_Inning + "]회 결과가 나올 예정입니다.", Color.White);
                    txtNotice.Text = "알림 : 잠시 후 파워볼 [" + PowerBall_Now_All_Inning + "]회 결과가 나올 예정입니다.";
                    refreshBettingInformation = false;
                }
            }
            else
            {
                BetRemainingTime = 300;
                if (!refreshBettingInformation)
                {
                    if (systemPickUseCheck.Checked || PatternPickUse.Checked)
                    {
                        List_Pickster_Betting_Time = selectRandom.Next(92, 110);
                    }
                    else
                    {
                        List_Pickster_Betting_Time = selectRandom.Next(50, 58);
                    }
                    txtLog.Clear();
                    //getPowerballInformation();
                    txtLogAdd("잠시 후 다음 회차가 진행될 예정입니다.", Color.White);
                    txtNotice.Text = "알림 : 잠시 후 다음 회차가 진행될 예정입니다.";
                    _picksterInformation = new string[arrayNum, array2Num];

                    getPowerBallResult = false;
                    refreshBettingInformation = true;
                    getPowerballinning = false;
                    getPowerBallResultProcessing = false;
                }
            }
        }

        void patternBet()
        {
            int patternbetnumber = 0;
            int streak = 0;
            bool result = int.TryParse(patternBetNumber.Text, out patternbetnumber);
            if (result && patternbetnumber > 0)
            {
                for (int _find = 1; _find <= accountNumber; _find++)
                {
                    TextBox _ps = (Controls.Find("txtBoxPS" + _find.ToString(), true)[0] as TextBox);
                    TextBox _BoxPick = (Controls.Find("BoxPick" + _find.ToString(), true)[0] as TextBox);
                    Button _pr = (Controls.Find("btnPR" + _find.ToString(), true)[0] as Button);
                    if (_pr.Text.Equals("배팅정지"))
                    {
                        _BoxPick.Text = "통과";
                        _BoxPick.ForeColor = Color.DarkGray;
                        continue;
                    }
                    if (string.IsNullOrEmpty(_ps.Text))
                    {
                        _BoxPick.Text = "통과";
                        _BoxPick.ForeColor = Color.DarkGray;
                        continue;
                    }
                    bool streakBool = int.TryParse(Regex.Replace(_ps.Text, @"\D", ""), out streak);
                    if (streakBool && streak < patternbetnumber)
                    {
                        _BoxPick.Text = "통과";
                        _BoxPick.ForeColor = Color.DarkGray;
                    }
                    else
                    {
                        Button _follow = (Controls.Find("btnFollow" + _find.ToString(), true)[0] as Button);
                        if (_ps.Text.Contains("연승"))
                        {
                            if (useAutoReverse.Checked)
                            {
                                _follow.ForeColor = Color.White;
                                _follow.BackColor = Color.Black;
                                _follow.Text = "반대로";
                            }
                            else
                            {
                                _BoxPick.Text = "통과";
                                _BoxPick.ForeColor = Color.Black;
                            }
                        }
                        else if (_ps.Text.Contains("연패"))
                        {
                            _follow.ForeColor = Color.Black;
                            _follow.BackColor = Color.White;
                            _follow.Text = "따라가기";
                        }
                    }
                }
            }
        }
        private void ScreenCapture(int intBitmapWidth, int intBitmapHeight, Point ptSource)
        {
            try
            {
                Bitmap bitmap = new Bitmap(intBitmapWidth, intBitmapHeight);
                Graphics g = Graphics.FromImage(bitmap);

                g.CopyFromScreen(ptSource, new Point(0, 0), new Size(intBitmapWidth, intBitmapHeight));
                string timestamp = DateTime.Now.ToString("HHmmss.fff", CultureInfo.InvariantCulture);

                bitmap.Save("./screenshot/" + PowerBall_Now_All_Inning + "-" + UtilModel.UserId + "-" + timestamp + ".png", ImageFormat.Png);
                logger.Info("파일로 저장 완료.");
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }
        void picksterNameLock()
        {
            for (int _find = 1; _find <= accountNumber; _find++)
            {
                Button _pickster = (Controls.Find("BoxPickster" + _find.ToString(), true)[0] as Button);
                _pickster.ForeColor = Color.White;
                _pickster.BackColor = Color.FromArgb(((int)(((byte)(66)))), ((int)(((byte)(66)))), ((int)(((byte)(66)))));
            }
        }
        void picksterNameUnLock()
        {
            for (int _find = 1; _find <= accountNumber; _find++)
            {
                Button _pickster = (Controls.Find("BoxPickster" + _find.ToString(), true)[0] as Button);
                _pickster.ForeColor = Color.Black;
                _pickster.BackColor = Color.White;
            }
        }

        void UserPicksterNameLock()
        {
            for (int _find = 1; _find <= 4; _find++)
            {
                Button UserPickster = (Controls.Find("UserPickster" + _find.ToString(), true)[0] as Button);
                UserPickster.ForeColor = Color.White;
                UserPickster.BackColor = Color.FromArgb(((int)(((byte)(66)))), ((int)(((byte)(66)))), ((int)(((byte)(66)))));
            }
        }
        void UserPicksterNameUnLock()
        {
            for (int _find = 1; _find <= 4; _find++)
            {
                Button UserPickster = (Controls.Find("UserPickster" + _find.ToString(), true)[0] as Button);
                UserPickster.ForeColor = Color.Black;
                UserPickster.BackColor = Color.White;
            }
        }
        Boolean _soundBeep = false;

        private void HongKong_Cruise_Betting_Mode_Result_Processing()
        {
            HongKong_Cruise_Betting_Mode_Result_Process = true;
            CheckBox hongKongCruiseBetUseCheckBox;
            TextBox hongKongCruiseBetPickTextBox;
            ComboBox hongKongCruiseAllRandomBetComboBox;
            for (int findControl = 1; findControl <= 10; findControl++)
            {
                hongKongCruiseBetUseCheckBox = (Controls.Find("hongKongCruiseBetUseCheckBox" + findControl.ToString(), true)[0] as CheckBox);

                if (hongKongCruiseBetUseCheckBox.Checked)
                {
                    hongKongCruiseBetPickTextBox = (Controls.Find("hongKongCruiseBetPickTextBox" + findControl.ToString(), true)[0] as TextBox);
                    hongKongCruiseAllRandomBetComboBox = (Controls.Find("hongKongCruiseAllRandomBetComboBox" + findControl.ToString(), true)[0] as ComboBox);
                    int.TryParse(hongKongCruiseAllRandomBetComboBox.Text.Split(new char[] { '|' })[0], out int outValue);
                    if (outValue > hongkongCruise_Max_Number)
                    {
                        hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                        continue;
                    }
                    string SelectPick = hongKongCruiseBetPickTextBox.Text.Trim();
                    if (SelectPick.Equals("파홀") || SelectPick.Equals("파짝"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Contains(SelectPick.Replace("파", "")))
                        {
                            if (outValue % 2 == 1)
                            {
                                hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                            }
                            else if (outValue % 2 == 0)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 1] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 1];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                        }
                        else
                        {
                            if (outValue % 2 == 1)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 1] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 1];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                            else if (outValue % 2 == 0)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 2] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 2];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                        }
                    }
                    else if (SelectPick.Equals("파언") || SelectPick.Equals("파오"))
                    {
                        if (PowerBallGame_Result_PowerBall_UnderOver.Contains(SelectPick.Replace("파", "")))
                        {
                            if (outValue % 2 == 1)
                            {
                                hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                            }
                            else if (outValue % 2 == 0)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 1] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 1];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                        }
                        else
                        {
                            if (outValue % 2 == 1)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 1] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 1];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                            else if (outValue % 2 == 0)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 2] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 2];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                        }
                    }
                    else if (SelectPick.Equals("일홀") || SelectPick.Equals("일짝"))
                    {
                        if (PowerBallGame_Result_NormalBall_OddEven.Contains(SelectPick.Replace("일", "")))
                        {
                            if (outValue % 2 == 1)
                            {
                                hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                            }
                            else if (outValue % 2 == 0)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 1] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 1];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                        }
                        else
                        {
                            if (outValue % 2 == 1)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 1] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 1];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                            else if (outValue % 2 == 0)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 2] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 2];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                        }
                    }
                    else if (SelectPick.Equals("일언") || SelectPick.Equals("일오"))
                    {
                        if (PowerBallGame_Result_NormalBall_UnderOVer.Contains(SelectPick.Replace("일", "")))
                        {
                            if (outValue % 2 == 1)
                            {
                                hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                            }
                            else if (outValue % 2 == 0)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 1] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 1];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                        }
                        else
                        {
                            if (outValue % 2 == 1)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 1] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 1];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                            else if (outValue % 2 == 0)
                            {
                                if (hongkongCruiseAllBetMoney[outValue + 2] > 0)
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[outValue + 2];
                                }
                                else
                                {
                                    hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[0];
                                }
                            }
                        }
                    }
                }
            }
        }

        private void EOS_Cruise_Betting_Mode_Result_Processing()
        {
            // All_Win_Bet_Money
            // EosCruisePowerBallOddEvenBetMoneyLevel1
            EOS_Cruise_Betting_Mode_Result_Process = true;

            if (EosPowerBallOddEvenUseCheck.Checked)
            {
                TextBox EosCruisePowerBallOddEvenBetPickLevel = Controls.Find("EosCruisePowerBallOddEvenBetPickLevel" + CruiseBetPowerBallOddEvenSubLevel.ToString(), true)[0] as TextBox;
                if (!EosCruisePowerBallOddEvenBetPickLevel.Text.Contains("통"))
                {
                    if (PowerBallGame_Result_PowerBall_OddEven.Contains(EosCruisePowerBallOddEvenBetPickLevel.Text))
                    {
                        if (CruiseBetPowerBallOddEvenSubLevel == 1)
                        {
                            CruiseBetPowerBallOddEvenSubLevel = 2;
                        }
                        else if (CruiseBetPowerBallOddEvenSubLevel == 2)
                        {
                            CruiseBetPowerBallOddEvenSubLevel = 3;
                        }
                        else if (CruiseBetPowerBallOddEvenSubLevel == 3)
                        {
                            CruiseBetPowerBallOddEvenSubLevel = 1;
                            EosCruisePowerBallOddEvenLevelChange.Text = "1";
                        }
                    }
                    else
                    {
                        CruiseBetPowerBallOddEvenSubLevel = 1;
                        EosCruisePowerBallOddEvenLevelChange.Text = (int.Parse(EosCruisePowerBallOddEvenLevelChange.Text) + 1).ToString();
                    }
                }

                for(int i = 1; i <= 3; i++)
                {
                    TextBox BetPickLevel = Controls.Find("EosCruisePowerBallOddEvenBetPickLevel" + i.ToString(), true)[0] as TextBox;
                    ComboBox BetListLevel = Controls.Find("EosCruisePowerBallOddEvenBetListLevel" + i.ToString(), true)[0] as ComboBox;

                    BetPickLevel.BackColor = Color.WhiteSmoke;
                    BetPickLevel.ForeColor = Color.Black;
                    BetPickLevel.Text = "통";

                    BetListLevel.BackColor = Color.WhiteSmoke;
                    BetListLevel.ForeColor = Color.Black;
                }
            }

            if (EosPowerBallUnderOverUseCheck.Checked)
            {
                TextBox EosCruisePowerBallUnderOverBetPickLevel = Controls.Find("EosCruisePowerBallUnderOverBetPickLevel" + CruiseBetPowerBallUnderOverSubLevel.ToString(), true)[0] as TextBox;
                if (!EosCruisePowerBallUnderOverBetPickLevel.Text.Contains("통"))
                {
                    if (PowerBallGame_Result_PowerBall_UnderOver.Contains(EosCruisePowerBallUnderOverBetPickLevel.Text))
                    {
                        if (CruiseBetPowerBallUnderOverSubLevel == 1)
                        {
                            CruiseBetPowerBallUnderOverSubLevel = 2;
                        }
                        else if (CruiseBetPowerBallUnderOverSubLevel == 2)
                        {
                            CruiseBetPowerBallUnderOverSubLevel = 3;
                        }
                        else if (CruiseBetPowerBallUnderOverSubLevel == 3)
                        {
                            CruiseBetPowerBallUnderOverSubLevel = 1;
                            EosCruisePowerBallUnderOverLevelChange.Text = "1";
                        }
                    }
                    else
                    {
                        CruiseBetPowerBallUnderOverSubLevel = 1;
                        EosCruisePowerBallUnderOverLevelChange.Text = (int.Parse(EosCruisePowerBallUnderOverLevelChange.Text) + 1).ToString();
                    }
                }

                for (int i = 1; i <= 3; i++)
                {
                    TextBox BetPickLevel = Controls.Find("EosCruisePowerBallUnderOverBetPickLevel" + i.ToString(), true)[0] as TextBox;
                    ComboBox BetListLevel = Controls.Find("EosCruisePowerBallUnderOverBetListLevel" + i.ToString(), true)[0] as ComboBox;

                    BetPickLevel.BackColor = Color.WhiteSmoke;
                    BetPickLevel.ForeColor = Color.Black;
                    BetPickLevel.Text = "통";

                    BetListLevel.BackColor = Color.WhiteSmoke;
                    BetListLevel.ForeColor = Color.Black;
                }
            }

            if (EosNormalBallOddEvenUseCheck.Checked)
            {
                TextBox EosCruiseNormalBallOddEvenBetPickLevel = Controls.Find("EosCruiseNormalBallOddEvenBetPickLevel" + CruiseBetNormalBallOddEvenSubLevel.ToString(), true)[0] as TextBox;
                if (!EosCruiseNormalBallOddEvenBetPickLevel.Text.Contains("통"))
                {
                    if (PowerBallGame_Result_NormalBall_OddEven.Contains(EosCruiseNormalBallOddEvenBetPickLevel.Text))
                    {
                        if (CruiseBetNormalBallOddEvenSubLevel == 1)
                        {
                            CruiseBetNormalBallOddEvenSubLevel = 2;
                        }
                        else if (CruiseBetNormalBallOddEvenSubLevel == 2)
                        {
                            CruiseBetNormalBallOddEvenSubLevel = 3;
                        }
                        else if (CruiseBetNormalBallOddEvenSubLevel == 3)
                        {
                            CruiseBetNormalBallOddEvenSubLevel = 1;
                            EosCruiseNormalBallOddEvenLevelChange.Text = "1";
                        }
                    }
                    else
                    {
                        CruiseBetNormalBallOddEvenSubLevel = 1;
                        EosCruiseNormalBallOddEvenLevelChange.Text = (int.Parse(EosCruiseNormalBallOddEvenLevelChange.Text) + 1).ToString();
                    }
                }
                for (int i = 1; i <= 3; i++)
                {
                    TextBox BetPickLevel = Controls.Find("EosCruiseNormalBallOddEvenBetPickLevel" + i.ToString(), true)[0] as TextBox;
                    ComboBox BetListLevel = Controls.Find("EosCruiseNormalBallOddEvenBetListLevel" + i.ToString(), true)[0] as ComboBox;

                    BetPickLevel.BackColor = Color.WhiteSmoke;
                    BetPickLevel.ForeColor = Color.Black;
                    BetPickLevel.Text = "통";

                    BetListLevel.BackColor = Color.WhiteSmoke;
                    BetListLevel.ForeColor = Color.Black;
                }
            }

            if (EossNormalBallUnderOverUseCheck.Checked)
            {
                TextBox EosCruiseNormalBallUnderOverBetPickLevel = Controls.Find("EosCruiseNormalBallUnderOverBetPickLevel" + CruiseBetNormalBallUnderOverSubLevel.ToString(), true)[0] as TextBox;
                if (!EosCruiseNormalBallUnderOverBetPickLevel.Text.Contains("통"))
                {
                    if (PowerBallGame_Result_NormalBall_UnderOVer.Contains(EosCruiseNormalBallUnderOverBetPickLevel.Text))
                    {
                        if (CruiseBetNormalBallUnderOverSubLevel == 1)
                        {
                            CruiseBetNormalBallUnderOverSubLevel = 2;
                        }
                        else if (CruiseBetNormalBallUnderOverSubLevel == 2)
                        {
                            CruiseBetNormalBallUnderOverSubLevel = 3;
                        }
                        else if (CruiseBetNormalBallUnderOverSubLevel == 3)
                        {
                            CruiseBetNormalBallUnderOverSubLevel = 1;
                            EosCruiseNormalBallUnderOverLevelChange.Text = "1";
                        }
                    }
                    else
                    {
                        CruiseBetNormalBallUnderOverSubLevel = 1;
                        EosCruiseNormalBallUnderOverLevelChange.Text = (int.Parse(EosCruiseNormalBallUnderOverLevelChange.Text) + 1).ToString();
                    }
                }
                for (int i = 1; i <= 3; i++)
                {
                    TextBox BetPickLevel = Controls.Find("EosCruiseNormalBallUnderOverBetPickLevel" + i.ToString(), true)[0] as TextBox;
                    ComboBox BetListLevel = Controls.Find("EosCruiseNormalBallUnderOverBetListLevel" + i.ToString(), true)[0] as ComboBox;

                    BetPickLevel.BackColor = Color.WhiteSmoke;
                    BetPickLevel.ForeColor = Color.Black;
                    BetPickLevel.Text = "통";

                    BetListLevel.BackColor = Color.WhiteSmoke;
                    BetListLevel.ForeColor = Color.Black;
                }
            }
        }

        private void Mirror_Bet_Mode_Result_Processing()
        {
            Mirror_Bet_Mode_Result_Process = true;
            MirrorBetPowerOddEvenPick1.Text = ":::";
            MirrorBetPowerOddEvenPick2.Text = ":::";
            MirrorBetPowerUnderOverPick1.Text = ":::";
            MirrorBetPowerUnderOverPick2.Text = ":::";
            MirrorBetNormalOddEvenPick1.Text = ":::";
            MirrorBetNormalOddEvenPick2.Text = ":::";
            MirrorBetNormalUnderOverPick1.Text = ":::";
            MirrorBetNormalUnderOverPick2.Text = ":::";
        }
        private void Cruise_Betting_Mode_Result_Processing()
        {
            Cruise_Betting_Mode_Result_Process = true;

            if (cruiseBettingPowerBallOddEvenUseCheckBox.Checked)
            {
                if (PowerBallGame_Result_PowerBall_OddEven.Contains(cruiseBettingPowerBallOddEvenSelectPick.Text))
                {
                    int BetLevel = int.Parse(cruiseBettingPowerBallOddEvenBetLevelComboBox.Text);
                    if (cruiseBettingPowerBallOddEvenFirstOrSecond == 1)
                    {
                        if (BetLevel < cruiseBettingPowerBallOddEvenSheetNumberOfFirst)
                        {
                            cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = (BetLevel + 1).ToString();
                        }
                        else
                        {
                            cruiseBettingPowerBallOddEvenFirstOrSecond = 2;

                            cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "0";
                            cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "1";
                        }
                    }
                    else if (cruiseBettingPowerBallOddEvenFirstOrSecond == 2)
                    {
                        if (BetLevel < cruiseBettingPowerBallOddEvenSheetNumberOfSecond)
                        {
                            cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = (BetLevel + 1).ToString();
                        }
                        else
                        {
                            cruiseBettingPowerBallOddEvenFirstOrSecond = 1;

                            cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "0";
                            cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "1";
                        }
                    }
                }
                else
                {
                    if (cruiseBettingPowerBallOddEvenFirstOrSecond == 1)
                    {
                        cruiseBettingPowerBallOddEvenFirstOrSecond = 2;
                    }
                    else if (cruiseBettingPowerBallOddEvenFirstOrSecond == 2)
                    {
                        cruiseBettingPowerBallOddEvenFirstOrSecond = 1;
                    }
                    cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "0";
                    cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "1";
                }
            }
            if (cruiseBettingPowerBallUnderOverUseCheckBox.Checked)
            {
                if (PowerBallGame_Result_PowerBall_UnderOver.Contains(cruiseBettingPowerBallUnderOverSelectPick.Text))
                {
                    int BetLevel = int.Parse(cruiseBettingPowerBallUnderOverBetLevelComboBox.Text);

                    if (cruiseBettingPowerBallUnderOverFirstOrSecond == 1)
                    {
                        if (BetLevel < cruiseBettingPowerBallUnderOverSheetNumberOfFirst)
                        {
                            cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = (BetLevel + 1).ToString();
                        }
                        else
                        {
                            cruiseBettingPowerBallUnderOverFirstOrSecond = 2;

                            cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "0";
                            cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "1";
                        }
                    }
                    else if (cruiseBettingPowerBallUnderOverFirstOrSecond == 2)
                    {
                        if (BetLevel < cruiseBettingPowerBallUnderOverSheetNumberOfSecond)
                        {
                            cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = (BetLevel + 1).ToString();
                        }
                        else
                        {
                            cruiseBettingPowerBallUnderOverFirstOrSecond = 1;

                            cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "0";
                            cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "1";
                        }
                    }
                }
                else
                {
                    if (cruiseBettingPowerBallUnderOverFirstOrSecond == 1)
                    {
                        cruiseBettingPowerBallUnderOverFirstOrSecond = 2;
                    }
                    else if (cruiseBettingPowerBallUnderOverFirstOrSecond == 2)
                    {
                        cruiseBettingPowerBallUnderOverFirstOrSecond = 1;
                    }
                    cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "0";
                    cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "1";
                }
            }
            if (cruiseBettingNormalBallOddEvenUseCheckBox.Checked)
            {
                if (PowerBallGame_Result_NormalBall_OddEven.Contains(cruiseBettingNormalBallOddEvenSelectPick.Text))
                {
                    int BetLevel = int.Parse(cruiseBettingNormalBallOddEvenBetLevelComboBox.Text);
                    if (cruiseBettingNormalBallOddEvenFirstOrSecond == 1)
                    {
                        if (BetLevel < cruiseBettingNormalBallOddEvenSheetNumberOfFirst)
                        {
                            cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = (BetLevel + 1).ToString();
                        }
                        else
                        {
                            cruiseBettingNormalBallOddEvenFirstOrSecond = 2;

                            cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "0";
                            cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "1";
                        }
                    }
                    else if (cruiseBettingNormalBallOddEvenFirstOrSecond == 2)
                    {
                        if (BetLevel < cruiseBettingNormalBallOddEvenSheetNumberOfSecond)
                        {
                            cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = (BetLevel + 1).ToString();
                        }
                        else
                        {
                            cruiseBettingNormalBallOddEvenFirstOrSecond = 1;

                            cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "0";
                            cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "1";
                        }
                    }
                }
                else
                {
                    if (cruiseBettingNormalBallOddEvenFirstOrSecond == 1)
                    {
                        cruiseBettingNormalBallOddEvenFirstOrSecond = 2;
                    }
                    else if (cruiseBettingNormalBallOddEvenFirstOrSecond == 2)
                    {
                        cruiseBettingNormalBallOddEvenFirstOrSecond = 1;
                    }
                    cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "0";
                    cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "1";
                }
            }
            if (cruiseBettingNormalBallUnderOverUseCheckBox.Checked)
            {
                if (PowerBallGame_Result_NormalBall_UnderOVer.Contains(cruiseBettingNormalBallUnderOverSelectPick.Text))
                {
                    int BetLevel = int.Parse(cruiseBettingNormalBallUnderOverBetLevelComboBox.Text);
                    if (cruiseBettingNormalBallUnderOverFirstOrSecond == 1)
                    {
                        if (BetLevel < cruiseBettingNormalBallUnderOverSheetNumberOfFirst)
                        {
                            cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = (BetLevel + 1).ToString();
                        }
                        else
                        {
                            cruiseBettingNormalBallUnderOverFirstOrSecond = 2;

                            cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "0";
                            cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "1";
                        }
                    }
                    else if (cruiseBettingNormalBallUnderOverFirstOrSecond == 2)
                    {
                        if (BetLevel < cruiseBettingNormalBallUnderOverSheetNumberOfSecond)
                        {
                            cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = (BetLevel + 1).ToString();
                        }
                        else
                        {
                            cruiseBettingNormalBallUnderOverFirstOrSecond = 1;

                            cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "0";
                            cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "1";
                        }
                    }
                }
                else
                {
                    if (cruiseBettingNormalBallUnderOverFirstOrSecond == 1)
                    {
                        cruiseBettingNormalBallUnderOverFirstOrSecond = 2;
                    }
                    else if (cruiseBettingNormalBallUnderOverFirstOrSecond == 2)
                    {
                        cruiseBettingNormalBallUnderOverFirstOrSecond = 1;
                    }
                    cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "0";
                    cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "1";
                }
            }
        }

        private void patternEqualModeResultProcessing()
        {
            patternEqualModeResult = true;

            CheckBox checkBoxStatus;
            TextBox textBoxPattern;
            TextBox textBoxPick;
            TextBox textBoxEqual;
            ComboBox comboBoxLevel;
            TextBox oddInningText;
            TextBox evenInningText;
            int _ComboBoxLevel = 0;
            for (int _find = 1; _find <= 16; _find++)
            {
                if (resultAllInning % 2 == 1)
                {
                    oddInningText = (Controls.Find("oddInningText" + _find.ToString(), true)[0] as TextBox);
                    oddInningText.BackColor = Color.WhiteSmoke;
                    oddInningText.ForeColor = Color.DarkGray;

                    evenInningText = (Controls.Find("evenInningText" + _find.ToString(), true)[0] as TextBox);
                    evenInningText.BackColor = Color.Black;
                    evenInningText.ForeColor = Color.White;

                    textBoxPick = (Controls.Find("oddInningPick" + _find.ToString(), true)[0] as TextBox);
                    if (textBoxPick.Text.Equals("통과"))
                    {
                        continue;
                    }

                    comboBoxLevel = (Controls.Find("oddInningBetLevel" + _find.ToString(), true)[0] as ComboBox);
                    if (string.IsNullOrEmpty(comboBoxLevel.Text))
                    {
                        comboBoxLevel.Text = "0";
                        continue;
                    }
                    _ComboBoxLevel = int.Parse(comboBoxLevel.Text);
                    if (_ComboBoxLevel == 0)
                    {
                        continue;
                    }
                }
                else
                {
                    oddInningText = (Controls.Find("oddInningText" + _find.ToString(), true)[0] as TextBox);
                    oddInningText.BackColor = Color.Black;
                    oddInningText.ForeColor = Color.White;

                    evenInningText = (Controls.Find("evenInningText" + _find.ToString(), true)[0] as TextBox);
                    evenInningText.BackColor = Color.WhiteSmoke;
                    evenInningText.ForeColor = Color.DarkGray;
                    textBoxPick = (Controls.Find("evenInningPick" + _find.ToString(), true)[0] as TextBox);
                    if (textBoxPick.Text.Equals("통과"))
                    {
                        continue;
                    }

                    comboBoxLevel = (Controls.Find("evenInningBetLevel" + _find.ToString(), true)[0] as ComboBox);
                    if (string.IsNullOrEmpty(comboBoxLevel.Text))
                    {
                        comboBoxLevel.Text = "0";
                        continue;
                    }
                    _ComboBoxLevel = int.Parse(comboBoxLevel.Text);
                    if (_ComboBoxLevel == 0)
                    {
                        continue;
                    }
                }

                checkBoxStatus = (Controls.Find("checkBoxStatus" + _find.ToString(), true)[0] as CheckBox);
                if (!checkBoxStatus.Checked)
                {
                    continue;
                }

                textBoxEqual = (Controls.Find("textBoxEqual" + _find.ToString(), true)[0] as TextBox);
                textBoxEqual.ForeColor = Color.DarkGray;

                if (textBoxEqual.Text.Contains("불"))
                {
                    continue;
                }
                textBoxEqual.Text = "불일치";

                textBoxPattern = (Controls.Find("textBoxPattern" + _find.ToString(), true)[0] as TextBox);

                if (_find > 12)
                {
                    if (PowerBallGame_Result_NormalBall_UnderOVer.Contains(textBoxPick.Text))
                    {
                        textBoxPattern.ForeColor = Color.Black;
                        textBoxPattern.BackColor = Color.White;
                        comboBoxLevel.Text = "0";
                    }
                    else
                    {
                        textBoxPattern.ForeColor = Color.White;
                        textBoxPattern.BackColor = Color.Black;
                        comboBoxLevel.Text = (_ComboBoxLevel + 1).ToString(); ;
                    }
                }
                else if (_find > 8)
                {
                    if (textBoxPick.Text.Equals(PowerBallGame_Result_NormalBall_OddEven))
                    {
                        textBoxPattern.ForeColor = Color.Black;
                        textBoxPattern.BackColor = Color.White;
                        comboBoxLevel.Text = "0";
                    }
                    else
                    {
                        textBoxPattern.ForeColor = Color.White;
                        textBoxPattern.BackColor = Color.Black;
                        comboBoxLevel.Text = (_ComboBoxLevel + 1).ToString(); ;
                    }
                }
                else if (_find > 4)
                {
                    if (PowerBallGame_Result_PowerBall_UnderOver.Contains(textBoxPick.Text))
                    {
                        textBoxPattern.ForeColor = Color.Black;
                        textBoxPattern.BackColor = Color.White;
                        comboBoxLevel.Text = "0";
                    }
                    else
                    {
                        textBoxPattern.ForeColor = Color.White;
                        textBoxPattern.BackColor = Color.Black;
                        comboBoxLevel.Text = (_ComboBoxLevel + 1).ToString(); ;
                    }
                }
                else
                {
                    if (PowerBallGame_Result_PowerBall_OddEven.Contains(textBoxPick.Text))
                    {
                        textBoxPattern.ForeColor = Color.Black;
                        textBoxPattern.BackColor = Color.White;
                        comboBoxLevel.Text = "0";
                    }
                    else
                    {
                        textBoxPattern.ForeColor = Color.White;
                        textBoxPattern.BackColor = Color.Black;
                        comboBoxLevel.Text = (_ComboBoxLevel + 1).ToString(); ;
                    }
                }
            }
        }

        private void termBetResultProcessing()
        {
            if (bettingTerm1)
            {
                if (!termBetLevel1.Text.Equals("0"))
                {
                    if (termBetPick1.Text.Equals("홀") || termBetPick1.Text.Equals("짝"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Contains(termBetPick1.Text))
                        {
                            termBetPick1.Text = "통과";
                            termBetLevel1.Text = "0";
                            bettingTerm1 = false;
                        }
                        else
                        {
                            termBetLevel1.Text = (int.Parse(termBetLevel1.Text) + 1).ToString();
                        }
                    }
                    else if (termBetPick1.Text.Equals("언") || termBetPick1.Text.Equals("오"))
                    {
                        if (PowerBallGame_Result_PowerBall_UnderOver.Contains(termBetPick1.Text))
                        {
                            termBetPick1.Text = "통과";
                            termBetLevel1.Text = "0";
                            bettingTerm1 = false;
                        }
                        else
                        {
                            termBetLevel1.Text = (int.Parse(termBetLevel1.Text) + 1).ToString();
                        }
                    }
                }
            }

            if (bettingTerm2)
            {
                if (!termBetLevel2.Text.Equals("0"))
                {
                    if (termBetPick2.Text.Equals("홀") || termBetPick2.Text.Equals("짝"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Contains(termBetPick2.Text))
                        {
                            termBetPick2.Text = "통과";
                            termBetLevel2.Text = "0";
                            bettingTerm2 = false;
                        }
                        else
                        {
                            termBetLevel2.Text = (int.Parse(termBetLevel2.Text) + 1).ToString();
                        }
                    }
                    else if (termBetPick2.Text.Equals("언") || termBetPick2.Text.Equals("오"))
                    {
                        if (PowerBallGame_Result_PowerBall_UnderOver.Contains(termBetPick2.Text))
                        {
                            termBetPick2.Text = "통과";
                            termBetLevel2.Text = "0";
                            bettingTerm2 = false;
                        }
                        else
                        {
                            termBetLevel2.Text = (int.Parse(termBetLevel2.Text) + 1).ToString();
                        }
                    }
                }
            }

            if (bettingTerm3)
            {
                if (!termBetLevel3.Text.Equals("0"))
                {
                    if (termBetPick3.Text.Equals("홀") || termBetPick3.Text.Equals("짝"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Contains(termBetPick3.Text))
                        {
                            termBetPick3.Text = "통과";
                            termBetLevel3.Text = "0";
                            bettingTerm3 = false;
                        }
                        else
                        {
                            termBetLevel3.Text = (int.Parse(termBetLevel3.Text) + 1).ToString();
                        }
                    }
                    else if (termBetPick3.Text.Equals("언") || termBetPick3.Text.Equals("오"))
                    {
                        if (PowerBallGame_Result_PowerBall_UnderOver.Contains(termBetPick3.Text))
                        {
                            termBetPick3.Text = "통과";
                            termBetLevel3.Text = "0";
                            bettingTerm3 = false;
                        }
                        else
                        {
                            termBetLevel3.Text = (int.Parse(termBetLevel3.Text) + 1).ToString();
                        }
                    }
                }
            }
            if (bettingTerm4)
            {
                if (!termBetLevel4.Text.Equals("0"))
                {
                    if (termBetPick4.Text.Equals("홀") || termBetPick4.Text.Equals("짝"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Contains(termBetPick4.Text))
                        {
                            termBetPick4.Text = "통과";
                            termBetLevel4.Text = "0";
                            bettingTerm4 = false;
                        }
                        else
                        {
                            termBetLevel4.Text = (int.Parse(termBetLevel4.Text) + 1).ToString();
                        }
                    }
                    else if (termBetPick4.Text.Equals("언") || termBetPick4.Text.Equals("오"))
                    {
                        if (PowerBallGame_Result_PowerBall_UnderOver.Contains(termBetPick4.Text))
                        {
                            termBetPick4.Text = "통과";
                            termBetLevel4.Text = "0";
                            bettingTerm4 = false;
                        }
                        else
                        {
                            termBetLevel4.Text = (int.Parse(termBetLevel4.Text) + 1).ToString();
                        }
                    }
                }
            }
            if (bettingTerm5)
            {
                if (!termBetLevel5.Text.Equals("0"))
                {
                    if (termBetPick5.Text.Equals("홀") || termBetPick5.Text.Equals("짝"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Contains(termBetPick5.Text))
                        {
                            termBetPick5.Text = "통과";
                            termBetLevel5.Text = "0";
                            bettingTerm5 = false;
                        }
                        else
                        {
                            termBetLevel5.Text = (int.Parse(termBetLevel5.Text) + 1).ToString();
                        }
                    }
                    else if (termBetPick5.Text.Equals("언") || termBetPick5.Text.Equals("오"))
                    {
                        if (PowerBallGame_Result_PowerBall_UnderOver.Contains(termBetPick5.Text))
                        {
                            termBetPick5.Text = "통과";
                            termBetLevel5.Text = "0";
                            bettingTerm5 = false;
                        }
                        else
                        {
                            termBetLevel5.Text = (int.Parse(termBetLevel5.Text) + 1).ToString();
                        }
                    }
                }
            }
            if (bettingTerm6)
            {
                if (!termBetLevel6.Text.Equals("0"))
                {
                    if (termBetPick6.Text.Equals("홀") || termBetPick6.Text.Equals("짝"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Contains(termBetPick6.Text))
                        {
                            termBetPick6.Text = "통과";
                            termBetLevel6.Text = "0";
                            bettingTerm6 = false;
                        }
                        else
                        {
                            termBetLevel6.Text = (int.Parse(termBetLevel6.Text) + 1).ToString();
                        }
                    }
                    else if (termBetPick6.Text.Equals("언") || termBetPick6.Text.Equals("오"))
                    {
                        if (PowerBallGame_Result_PowerBall_UnderOver.Contains(termBetPick6.Text))
                        {
                            termBetPick6.Text = "통과";
                            termBetLevel6.Text = "0";
                            bettingTerm6 = false;
                        }
                        else
                        {
                            termBetLevel6.Text = (int.Parse(termBetLevel6.Text) + 1).ToString();
                        }
                    }
                }
            }
        }

        private void decalBetResultProcessing()
        {
            if (BetPowerBallOddEvenDecal && checkBoxDecalPowerBallOddEven.Checked)
            {
                if (PowerBallGame_Result_PowerBall_OddEven.Contains(textBoxDecalPowerBallOddEvenPick.Text))
                {
                    textBoxDecalPowerBallOddEvenPick.Text = "통과";
                    comboBoxDecalPowerBallOddEvenBetLevel.Text = "0";
                    BetPowerBallOddEvenDecal = false;
                }
                else
                {
                    comboBoxDecalPowerBallOddEvenBetLevel.Text = (int.Parse(comboBoxDecalPowerBallOddEvenBetLevel.Text) + 1).ToString();
                }
            }
            if (BetPowerBallUnderOverDecal && checkBoxDecalPowerBallUnderOver.Checked)
            {
                if (PowerBallGame_Result_PowerBall_UnderOver.Contains(textBoxDecalPowerBallUnderOverPick.Text))
                {
                    textBoxDecalPowerBallUnderOverPick.Text = "통과";
                    comboBoxDecalPowerBallUnderOverBetLevel.Text = "0";
                    BetPowerBallUnderOverDecal = false;
                }
                else
                {
                    comboBoxDecalPowerBallUnderOverBetLevel.Text = (int.Parse(comboBoxDecalPowerBallUnderOverBetLevel.Text) + 1).ToString();
                }
            }
            if (BetNormalBallOddEvenDecal && checkBoxDecalNormalBallOddEven.Checked)
            {
                if (PowerBallGame_Result_NormalBall_OddEven.Contains(textBoxDecalNormalBallOddEvenPick.Text))
                {
                    textBoxDecalNormalBallOddEvenPick.Text = "통과";
                    comboBoxDecalNormalBallOddEvenBetLevel.Text = "0";
                    BetNormalBallOddEvenDecal = false;
                }
                else
                {
                    comboBoxDecalNormalBallOddEvenBetLevel.Text = (int.Parse(comboBoxDecalNormalBallOddEvenBetLevel.Text) + 1).ToString();
                }
            }
            if (BetNormalBallUnderOverDecal && checkBoxDecalNormalBallUnderOver.Checked)
            {
                if (PowerBallGame_Result_NormalBall_UnderOVer.Contains(textBoxDecalNormalBallUnderOverPick.Text))
                {
                    textBoxDecalNormalBallUnderOverPick.Text = "통과";
                    comboBoxDecalNormalBallUnderOverBetLevel.Text = "0";
                    BetNormalBallUnderOverDecal = false;
                }
                else
                {
                    comboBoxDecalNormalBallUnderOverBetLevel.Text = (int.Parse(comboBoxDecalNormalBallUnderOverBetLevel.Text) + 1).ToString();
                }
            }
        }

        private void allBetRegistListView_Bet_Result_Processing()
        {
            for (int i = 0; i < directBetRegistListView.Items.Count; i++)
            {
                ListViewItem item = directBetRegistListView.Items[i];

                bool isContains = item.SubItems[0].Text.Equals((PowerBall_Now_TodayInning - 1).ToString());

                if (isContains)
                {
                    string pick = item.SubItems[2].Text;
                    string betMoney = item.SubItems[3].Text;
                    double outMoney = 0;
                    bool _bool = double.TryParse(Regex.Replace(betMoney, @"\D", ""), out outMoney);
                    if (item.SubItems[1].Text.Equals("일반"))
                    {
                        if (PowerBallGame_Result_NormalBall_OddEven.Equals(pick))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_NormalBall_UnderOVer.Equals(pick.Replace("더", "").Replace("버", "")))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                UtilModel.UserOwnMoney += winMoney;
                                All_Win_Bet_Money += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[5].Text = "미당첨";
                            item.SubItems[4].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                    else if (item.SubItems[1].Text.Equals("파워"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Equals(pick))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_PowerBall_UnderOver.Equals(pick.Replace("더", "").Replace("버", "")))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[5].Text = "미당첨";
                            item.SubItems[4].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                    else if (item.SubItems[1].Text.Equals("파조합"))
                    {
                        if (pick.Equals("홀언더"))
                        {
                            if (PowerBallGame_Result_PowerBall_OddEven.Equals("홀") && PowerBallGame_Result_PowerBall_UnderOver.Equals("언더"))
                            {
                                item.SubItems[5].Text = "당첨";
                                if (_bool)
                                {
                                    int winMoney = (int)(outMoney * 4.12);
                                    All_Win_Bet_Money += winMoney;
                                    UtilModel.UserOwnMoney += winMoney;
                                    item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                                }
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                            else
                            {
                                item.SubItems[5].Text = "미당첨";
                                item.SubItems[4].Text = "0";
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            }
                        }
                        else if (pick.Equals("홀오버"))
                        {
                            if (PowerBallGame_Result_PowerBall_OddEven.Equals("홀") && PowerBallGame_Result_PowerBall_UnderOver.Equals("오버"))
                            {
                                item.SubItems[5].Text = "당첨";
                                if (_bool)
                                {
                                    int winMoney = (int)(outMoney * 3.02);
                                    All_Win_Bet_Money += winMoney;
                                    UtilModel.UserOwnMoney += winMoney;
                                    item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                                }
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                            else
                            {
                                item.SubItems[5].Text = "미당첨";
                                item.SubItems[4].Text = "0";
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            }
                        }
                        else if (pick.Equals("짝언더"))
                        {
                            if (PowerBallGame_Result_PowerBall_OddEven.Equals("짝") && PowerBallGame_Result_PowerBall_UnderOver.Equals("언더"))
                            {
                                item.SubItems[5].Text = "당첨";
                                if (_bool)
                                {
                                    int winMoney = (int)(outMoney * 3.02);
                                    All_Win_Bet_Money += winMoney;
                                    UtilModel.UserOwnMoney += winMoney;
                                    item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                                }
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                            else
                            {
                                item.SubItems[5].Text = "미당첨";
                                item.SubItems[4].Text = "0";
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            }
                        }
                        else if (pick.Equals("짝오버"))
                        {
                            if (PowerBallGame_Result_PowerBall_OddEven.Equals("짝") && PowerBallGame_Result_PowerBall_UnderOver.Equals("오버"))
                            {
                                item.SubItems[5].Text = "당첨";
                                if (_bool)
                                {
                                    int winMoney = (int)(outMoney * 4.12);
                                    All_Win_Bet_Money += winMoney;
                                    UtilModel.UserOwnMoney += winMoney;
                                    item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                                }
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                            else
                            {
                                item.SubItems[5].Text = "미당첨";
                                item.SubItems[4].Text = "0";
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            }
                        }
                    }
                    else if (item.SubItems[1].Text.Equals("일조합"))
                    {
                        if (pick.Equals("홀언더"))
                        {
                            if (PowerBallGame_Result_NormalBall_OddEven.Equals("홀") && PowerBallGame_Result_NormalBall_UnderOVer.Equals("언더"))
                            {
                                item.SubItems[5].Text = "당첨";
                                if (_bool)
                                {
                                    int winMoney = (int)(outMoney * 3.7);
                                    All_Win_Bet_Money += winMoney;
                                    UtilModel.UserOwnMoney += winMoney;
                                    item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                                }
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                            else
                            {
                                item.SubItems[5].Text = "미당첨";
                                item.SubItems[4].Text = "0";
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            }
                        }
                        else if (pick.Equals("홀오버"))
                        {
                            if (PowerBallGame_Result_NormalBall_OddEven.Equals("홀") && PowerBallGame_Result_NormalBall_UnderOVer.Equals("오버"))
                            {
                                item.SubItems[5].Text = "당첨";
                                if (_bool)
                                {
                                    int winMoney = (int)(outMoney * 3.7);
                                    All_Win_Bet_Money += winMoney;
                                    UtilModel.UserOwnMoney += winMoney;
                                    item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                                }
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                            else
                            {
                                item.SubItems[5].Text = "미당첨";
                                item.SubItems[4].Text = "0";
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            }
                        }
                        else if (pick.Equals("짝언더"))
                        {
                            if (PowerBallGame_Result_NormalBall_OddEven.Equals("짝") && PowerBallGame_Result_NormalBall_UnderOVer.Equals("언더"))
                            {
                                item.SubItems[5].Text = "당첨";
                                if (_bool)
                                {
                                    int winMoney = (int)(outMoney * 3.7);
                                    All_Win_Bet_Money += winMoney;
                                    UtilModel.UserOwnMoney += winMoney;
                                    item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                                }
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                            else
                            {
                                item.SubItems[5].Text = "미당첨";
                                item.SubItems[4].Text = "0";
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            }
                        }
                        else if (pick.Equals("짝오버"))
                        {
                            if (PowerBallGame_Result_NormalBall_OddEven.Equals("짝") && PowerBallGame_Result_NormalBall_UnderOVer.Equals("오버"))
                            {
                                item.SubItems[5].Text = "당첨";
                                if (_bool)
                                {
                                    int winMoney = (int)(outMoney * 3.7);
                                    All_Win_Bet_Money += winMoney;
                                    UtilModel.UserOwnMoney += winMoney;
                                    item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                                }
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                            else
                            {
                                item.SubItems[5].Text = "미당첨";
                                item.SubItems[4].Text = "0";
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            }
                        }
                    }
                    else if (item.SubItems[1].Text.Equals("파사"))
                    {
                        if (firstBallLadderLeftRight.Equals(pick))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (firstBallLadder34.Equals(pick))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (firstBallLadderOddEven.Equals(pick))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[5].Text = "미당첨";
                            item.SubItems[4].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                }
                else
                {
                    break;
                }
            }
            for (int i = 0; i < cruiseBetRegistListView.Items.Count; i++)
            {
                ListViewItem item = cruiseBetRegistListView.Items[i];

                bool isContains = item.SubItems[0].Text.Equals((PowerBall_Now_All_Inning - 1).ToString());

                if (isContains)
                {
                    string pick = item.SubItems[2].Text;
                    string betMoney = item.SubItems[3].Text;
                    bool _bool = double.TryParse(Regex.Replace(betMoney, @"\D", ""), out double outMoney);
                    if (item.SubItems[1].Text.Equals("일반"))
                    {
                        if (PowerBallGame_Result_NormalBall_OddEven.Equals(pick))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_NormalBall_UnderOVer.Equals(pick.Replace("더", "").Replace("버", "")))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[5].Text = "미당첨";
                            item.SubItems[4].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                    else if (item.SubItems[1].Text.Equals("파워"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Equals(pick))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_PowerBall_UnderOver.Equals(pick.Replace("더", "").Replace("버", "")))
                        {
                            item.SubItems[5].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[5].Text = "미당첨";
                            item.SubItems[4].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                }
                else
                {
                    break;
                }
            }
            for (int i = 0; i < normalModeMaringaleBetRegistListView.Items.Count; i++)
            {
                ListViewItem item = normalModeMaringaleBetRegistListView.Items[i];

                bool isContains = item.SubItems[0].Text.Equals((PowerBall_Now_All_Inning - 1).ToString());

                if (isContains)
                {
                    string pick = item.SubItems[2].Text;
                    string betMoney = item.SubItems[3].Text;
                    bool _bool = double.TryParse(Regex.Replace(betMoney, @"\D", ""), out double outMoney);
                    if (item.SubItems[1].Text.Equals("일반"))
                    {
                        if (PowerBallGame_Result_NormalBall_OddEven.Equals(pick))
                        {
                            item.SubItems[5].Text = "당";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_NormalBall_UnderOVer.Equals(pick.Replace("더", "").Replace("버", "")))
                        {
                            item.SubItems[5].Text = "당";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[5].Text = "미";
                            item.SubItems[4].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                    else if (item.SubItems[1].Text.Equals("파워"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Equals(pick))
                        {
                            item.SubItems[5].Text = "당";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_PowerBall_UnderOver.Equals(pick.Replace("더", "").Replace("버", "")))
                        {
                            item.SubItems[5].Text = "당";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[4].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[5].Text = "미";
                            item.SubItems[4].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                }
                else
                {
                    break;
                }
            }

            for (int i = 0; i < EosCruiseBetRegistListView.Items.Count; i++)
            {
                ListViewItem item = EosCruiseBetRegistListView.Items[i];

                bool isContains = item.SubItems[2].Text.Equals((PowerBall_Now_TodayInning - 1).ToString());

                if (isContains)
                {
                    string pick = item.SubItems[4].Text;
                    string betMoney = item.SubItems[5].Text;
                    bool _bool = double.TryParse(Regex.Replace(betMoney, @"\D", ""), out double outMoney);
                    if (item.SubItems[3].Text.Equals("일반"))
                    {
                        if (PowerBallGame_Result_NormalBall_OddEven.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }

                            if (item.SubItems[1].Text.Contains("-3"))
                            {
                                item.SubItems[0].ForeColor = Color.White;
                                item.SubItems[1].ForeColor = Color.White;
                                item.SubItems[2].ForeColor = Color.White;
                                item.SubItems[3].ForeColor = Color.White;
                                item.SubItems[4].ForeColor = Color.White;
                                item.SubItems[5].ForeColor = Color.White;
                                item.SubItems[6].ForeColor = Color.White;
                                item.SubItems[7].ForeColor = Color.White;

                                item.SubItems[0].BackColor = Color.Black;
                                item.SubItems[1].BackColor = Color.Black;
                                item.SubItems[2].BackColor = Color.Black;
                                item.SubItems[3].BackColor = Color.Black;
                                item.SubItems[4].BackColor = Color.Black;
                                item.SubItems[5].BackColor = Color.Black;
                                item.SubItems[6].BackColor = Color.Black;
                                item.SubItems[7].BackColor = Color.Black;

                            } else
                            {
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                        }
                        else if (PowerBallGame_Result_NormalBall_UnderOVer.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }

                            if (item.SubItems[1].Text.Contains("-3"))
                            {
                                item.SubItems[0].ForeColor = Color.White;
                                item.SubItems[1].ForeColor = Color.White;
                                item.SubItems[2].ForeColor = Color.White;
                                item.SubItems[3].ForeColor = Color.White;
                                item.SubItems[4].ForeColor = Color.White;
                                item.SubItems[5].ForeColor = Color.White;
                                item.SubItems[6].ForeColor = Color.White;
                                item.SubItems[7].ForeColor = Color.White;

                                item.SubItems[0].BackColor = Color.Black;
                                item.SubItems[1].BackColor = Color.Black;
                                item.SubItems[2].BackColor = Color.Black;
                                item.SubItems[3].BackColor = Color.Black;
                                item.SubItems[4].BackColor = Color.Black;
                                item.SubItems[5].BackColor = Color.Black;
                                item.SubItems[6].BackColor = Color.Black;
                                item.SubItems[7].BackColor = Color.Black;

                            }
                            else
                            {
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                        }
                        else
                        {
                            item.SubItems[7].Text = "미당첨";
                            item.SubItems[6].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                    else if (item.SubItems[3].Text.Equals("파워"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }

                            if (item.SubItems[1].Text.Contains("-3"))
                            {
                                item.SubItems[0].ForeColor = Color.White;
                                item.SubItems[1].ForeColor = Color.White;
                                item.SubItems[2].ForeColor = Color.White;
                                item.SubItems[3].ForeColor = Color.White;
                                item.SubItems[4].ForeColor = Color.White;
                                item.SubItems[5].ForeColor = Color.White;
                                item.SubItems[6].ForeColor = Color.White;
                                item.SubItems[7].ForeColor = Color.White;

                                item.SubItems[0].BackColor = Color.Black;
                                item.SubItems[1].BackColor = Color.Black;
                                item.SubItems[2].BackColor = Color.Black;
                                item.SubItems[3].BackColor = Color.Black;
                                item.SubItems[4].BackColor = Color.Black;
                                item.SubItems[5].BackColor = Color.Black;
                                item.SubItems[6].BackColor = Color.Black;
                                item.SubItems[7].BackColor = Color.Black;

                            }
                            else
                            {
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                        }
                        else if (PowerBallGame_Result_PowerBall_UnderOver.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }

                            if (item.SubItems[1].Text.Contains("-3"))
                            {
                                item.SubItems[0].ForeColor = Color.White;
                                item.SubItems[1].ForeColor = Color.White;
                                item.SubItems[2].ForeColor = Color.White;
                                item.SubItems[3].ForeColor = Color.White;
                                item.SubItems[4].ForeColor = Color.White;
                                item.SubItems[5].ForeColor = Color.White;
                                item.SubItems[6].ForeColor = Color.White;
                                item.SubItems[7].ForeColor = Color.White;

                                item.SubItems[0].BackColor = Color.Black;
                                item.SubItems[1].BackColor = Color.Black;
                                item.SubItems[2].BackColor = Color.Black;
                                item.SubItems[3].BackColor = Color.Black;
                                item.SubItems[4].BackColor = Color.Black;
                                item.SubItems[5].BackColor = Color.Black;
                                item.SubItems[6].BackColor = Color.Black;
                                item.SubItems[7].BackColor = Color.Black;

                            }
                            else
                            {
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                        }
                        else
                        {
                            item.SubItems[7].Text = "미당첨";
                            item.SubItems[6].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                }
                else
                {
                    break;
                }
            }
            for (int i = 0; i < MirrorBetListView.Items.Count; i++)
            {
                ListViewItem item = MirrorBetListView.Items[i];

                bool isContains = item.SubItems[2].Text.Equals((PowerBall_Now_TodayInning - 1).ToString());

                if (isContains)
                {
                    string pick = item.SubItems[4].Text;
                    string betMoney = item.SubItems[5].Text;
                    bool _bool = double.TryParse(Regex.Replace(betMoney, @"\D", ""), out double outMoney);
                    if (item.SubItems[3].Text.Equals("일반"))
                    {
                        if (PowerBallGame_Result_NormalBall_OddEven.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_NormalBall_UnderOVer.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[7].Text = "미당첨";
                            item.SubItems[6].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                    else if (item.SubItems[3].Text.Equals("파워"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_PowerBall_UnderOver.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[7].Text = "미당첨";
                            item.SubItems[6].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                }
                else
                {
                    break;
                }
            }
            for (int i = 0; i < termBetRegistListView.Items.Count; i++)
            {
                ListViewItem item = termBetRegistListView.Items[i];

                bool isContains = item.SubItems[2].Text.Equals((PowerBall_Now_TodayInning - 1).ToString());

                if (isContains)
                {
                    string pick = item.SubItems[4].Text;
                    string betMoney = item.SubItems[5].Text;
                    bool _bool = double.TryParse(Regex.Replace(betMoney, @"\D", ""), out double outMoney);
                    if (item.SubItems[3].Text.Equals("일반"))
                    {
                        if (PowerBallGame_Result_NormalBall_OddEven.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_NormalBall_UnderOVer.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[7].Text = "미당첨";
                            item.SubItems[6].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                    else if (item.SubItems[3].Text.Equals("파워"))
                    {
                        if (PowerBallGame_Result_PowerBall_OddEven.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else if (PowerBallGame_Result_PowerBall_UnderOver.Equals(pick))
                        {
                            item.SubItems[7].Text = "당첨";
                            if (_bool)
                            {
                                int winMoney = (int)(outMoney * 1.95);
                                All_Win_Bet_Money += winMoney;
                                UtilModel.UserOwnMoney += winMoney;
                                item.SubItems[6].Text = UtilModel.StringFormatChanged(winMoney);
                                lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);
                            }
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                        }
                        else
                        {
                            item.SubItems[7].Text = "미당첨";
                            item.SubItems[6].Text = "0";
                            item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[5].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[6].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            item.SubItems[7].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                        }
                    }
                }
                else
                {
                    break;
                }
            }
        }
        // 결과를 참고하여 단계 및 배팅금 조정, 색깔 조정
        private void powerBallResultProcessing()
        {
            Button _pickster;
            TextBox _betMoney;
            TextBox _ballType;
            ComboBox _level;
            Button _follow;

            for (int _find = 1; _find <= accountNumber; _find++)
            {
                Button _btnPR = (Controls.Find("btnPR" + _find.ToString(), true)[0] as Button);
                //btnPR02
                if (_btnPR.Text.Equals("배팅진행"))
                {
                    TextBox _pick = (Controls.Find("BoxPick" + _find.ToString(), true)[0] as TextBox);
                    if (!_pick.Text.Contains("통"))
                    {
                        _pickster = (Controls.Find("BoxPickster" + _find.ToString(), true)[0] as Button);
                        _betMoney = (Controls.Find("txtBoxPBM" + _find.ToString(), true)[0] as TextBox);
                        _ballType = (Controls.Find("txtboxBallType" + _find.ToString(), true)[0] as TextBox);
                        _level = (Controls.Find("CBL" + _find.ToString(), true)[0] as ComboBox);
                        _follow = (Controls.Find("btnFollow" + _find.ToString(), true)[0] as Button);
                        _powerBallResultProcessing(_pickster, _ballType, _pick, _level, _betMoney, _follow);
                    }
                }
            }

            if (_soundBeep)
            {
                if (errorBeep.Checked)
                {
                    AsyncTextSpeak("띵 띵 띵 띵 띵 띵");
                }
            }
            _soundBeep = false;
        }

        int randomColor = 0;
        int[,] arrayColor = new int[,] {
            { 0xFFEBEE, 0xFFCDD2, 0xEF9A9A, 0xE57373, 0xEF5350, 0xF44336, 0xE53935, 0xD32F2F, 0xC62828, 0xB71C1C },
        { 0xFCE4EC, 0xF8BBD0, 0xF48FB1, 0xF06292, 0xEC407A, 0xE91E63, 0xD81B60, 0xC2185B, 0xAD1457, 0x880E4F },
        { 0xF3E5F5, 0xE1BEE7, 0xCE93D8, 0xBA68C8, 0xAB47BC, 0x9C27B0, 0x8E24AA, 0x7B1FA2, 0x6A1B9A, 0x4A148C },
        { 0xEDE7F6, 0xD1C4E9, 0xB39DDB, 0x9575CD, 0x7E57C2, 0x673AB7, 0x5E35B1, 0x512DA8, 0x4527A0, 0x311B92 },
        { 0xE8EAF6, 0xC5CAE9, 0x9FA8DA, 0x7986CB, 0x5C6BC0, 0x3F51B5, 0x3949AB, 0x303F9F, 0x283593, 0x1A237E },
        { 0xE3F2FD, 0xBBDEFB, 0x90CAF9, 0x64B5F6, 0x42A5F5, 0x2196F3, 0x1E88E5, 0x1976D2, 0x1565C0, 0x0D47A1 },
        { 0xE1F5FE, 0xB3E5FC, 0x81D4FA, 0x4FC3F7, 0x29B6F6, 0x03A9F4, 0x039BE5, 0x0288D1, 0x0277BD, 0x01579B },
        { 0xE0F7FA, 0xB2EBF2, 0x80DEEA, 0x4DD0E1, 0x26C6DA, 0x00BCD4, 0x00ACC1, 0x0097A7, 0x00838F, 0x006064 },
        { 0xE0F2F1, 0xB2DFDB, 0x80CBC4, 0x4DB6AC, 0x26A69A, 0x009688, 0x00897B, 0x00796B, 0x00695C, 0x004D40 },
        { 0xE8F5E9, 0xC8E6C9, 0xA5D6A7, 0x81C784, 0x66BB6A, 0x4CAF50, 0x43A047, 0x388E3C, 0x2E7D32, 0x1B5E20 },
        { 0xF1F8E9, 0xDCEDC8, 0xC5E1A5, 0xAED581, 0x9CCC65, 0x8BC34A, 0x7CB342, 0x689F38, 0x558B2F, 0x33691E },
        { 0xF9FBE7, 0xF0F4C3, 0xE6EE9C, 0xDCE775, 0xD4E157, 0xCDDC39, 0xC0CA33, 0xAFB42B, 0x9E9D24, 0x827717 },
         { 0xFFFDE7, 0xFFF9C4, 0xFFF59D, 0xFFF176, 0xFFEE58, 0xFFEB3B, 0xFDD835, 0xFBC02D, 0xF9A825, 0xF57F17 },
          { 0xFFF8E1, 0xFFECB3, 0xFFE082, 0xFFD54F, 0xFFCA28, 0xFFC107, 0xFFB300, 0xFFA000, 0xFF8F00, 0xFF6F00 },
           { 0xFFF3E0, 0xFFE0B2, 0xFFCC80, 0xFFB74D, 0xFFA726, 0xFF9800, 0xFB8C00, 0xF57C00, 0xEF6C00, 0xE65100 },
            { 0xFBE9E7, 0xFFCCBC, 0xFFAB91, 0xFF8A65, 0xFF7043, 0xFF5722, 0xF4511E, 0xE64A19, 0xD84315, 0xBF360C },
             { 0xEFEBE9, 0xD7CCC8, 0xBCAAA4, 0xA1887F, 0x8D6E63, 0x795548, 0x6D4C41, 0x5D4037, 0x4E342E, 0x3E2723 },
              { 0xFAFAFA, 0xF5F5F5, 0xEEEEEE, 0xE0E0E0, 0xBDBDBD, 0x9E9E9E, 0x757575, 0x616161, 0x424242, 0x212121 },
     { 0xECEFF1, 0xCFD8DC, 0xB0BEC5, 0x90A4AE, 0x78909C, 0x607D8B, 0x546E7A, 0x455A64, 0x37474F, 0x263238 },
        };
        // 레벨별 글자색과 배경색 설정
        private void _levelColorSetting(ComboBox _level, TextBox _betMoney)
        {
            int level = 1;
            int outLevel = 0;
            Boolean _boolean = int.TryParse(_level.Text, out outLevel);
            if (_boolean)
            {
                level = outLevel + 1;
            }
            else
            {
                level = 1;
            }

            colorChanged(_level, _betMoney);

            CheckBox AlarmCheckBox = (Controls.Find("alarmCheckBox" + level, true)[0] as CheckBox);
            if (AlarmCheckBox.Checked)
            {
                _soundBeep = true;
            }

            TextBox _MoneySettingLevel = (Controls.Find("txtBtMoneySettingL" + level.ToString(), true)[0] as TextBox);
            if (_MoneySettingLevel.Text.Equals("-1") || _MoneySettingLevel.Text.Equals("0"))
            {
                _level.Text = "1";
                _level.ForeColor = Color.Black;
                _level.BackColor = Color.White;
            }
            else
            {
                int outValue = 0;
                bool _b = int.TryParse(Regex.Replace(_MoneySettingLevel.Text, @"\D", ""), out outValue);
                if (_b)
                {
                    _level.Text = level.ToString();
                    _betMoney.Text = outValue.ToString();
                }
            }
        }

        // 결과값이 나왔을 경우 처리하는 부분.
        private void _powerBallResultProcessing(Button _pickster, TextBox _ballType, TextBox _pick, ComboBox _level, TextBox _betMoney, Button _follow)
        {

            if (_ballType.Text.Equals("파워"))
            {
                // 따라가기 배팅시 처리
                if (_follow.Text.Equals("따라가기"))
                {
                    if (_pick.Text.Equals("홀") || _pick.Text.Equals("짝"))
                    {
                        if (_pick.Text.Equals(PowerBallGame_Result_PowerBall_OddEven)) // 파워볼 홀짝
                        {
                            _level.BackColor = Color.White;
                            _level.ForeColor = Color.Black;
                            _level.Text = "1";
                            logger.Info("파워볼 따라가기 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 당첨 : " + PowerBallGame_Result_PowerBall_OddEven);
                        }
                        else
                        {
                            _levelColorSetting(_level, _betMoney);
                            logger.Info("파워볼 따라가기 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 미당첨 : " + PowerBallGame_Result_PowerBall_OddEven);
                        }
                    }
                    else if (_pick.Text.Equals("언더") || _pick.Text.Equals("오버"))
                    {
                        if (_pick.Text.Equals(PowerBallGame_Result_PowerBall_UnderOver)) // 파워볼 홀짝
                        {
                            _level.BackColor = Color.White;
                            _level.ForeColor = Color.Black;
                            _level.Text = "1";
                            logger.Info("파워볼 따라가기 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 당첨 : " + PowerBallGame_Result_PowerBall_UnderOver);
                        }
                        else
                        {
                            _levelColorSetting(_level, _betMoney);
                            logger.Info("파워볼 따라가기 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 미당첨 : " + PowerBallGame_Result_PowerBall_UnderOver);
                        }
                    }
                    // 반대로 배팅시 처리
                }
                else if (_follow.Text.Equals("반대로"))
                {
                    if (_pick.Text.Equals("홀") || _pick.Text.Equals("짝"))
                    {
                        if (!_pick.Text.Equals(PowerBallGame_Result_PowerBall_OddEven)) // 파워볼 홀짝
                        {
                            _level.BackColor = Color.White;
                            _level.ForeColor = Color.Black;
                            _level.Text = "1";
                            logger.Info("파워볼 반대로 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 당첨 : " + PowerBallGame_Result_PowerBall_OddEven);
                        }
                        else
                        {
                            _levelColorSetting(_level, _betMoney);
                            logger.Info("파워볼 반대로 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 미당첨 : " + PowerBallGame_Result_PowerBall_OddEven);
                        }
                    }
                    else if (_pick.Text.Equals("언더") || _pick.Text.Equals("오버"))
                    {
                        if (!_pick.Text.Equals(PowerBallGame_Result_PowerBall_UnderOver)) // 파워볼 홀짝
                        {
                            _level.BackColor = Color.White;
                            _level.ForeColor = Color.Black;
                            _level.Text = "1";
                            logger.Info("파워볼 반대로 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 당첨 : " + PowerBallGame_Result_PowerBall_UnderOver);
                        }
                        else
                        {
                            _levelColorSetting(_level, _betMoney);
                            logger.Info("파워볼 반대로 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 미당첨 : " + PowerBallGame_Result_PowerBall_UnderOver);
                        }
                    }
                }
            }
            else if (_ballType.Text.Equals("일반"))
            {
                // 따라가기 배팅시 처리
                if (_follow.Text.Equals("따라가기"))
                {
                    if (_pick.Text.Equals("홀") || _pick.Text.Equals("짝"))
                    {
                        if (_pick.Text.Equals(PowerBallGame_Result_NormalBall_OddEven)) // 파워볼 홀짝
                        {
                            _level.BackColor = Color.White;
                            _level.ForeColor = Color.Black;
                            _level.Text = "1";
                            logger.Info("일반 따라가기 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 당첨 : " + PowerBallGame_Result_NormalBall_OddEven);
                        }
                        else
                        {
                            _levelColorSetting(_level, _betMoney);
                            logger.Info("일반 따라가기 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 미당첨 : " + PowerBallGame_Result_NormalBall_OddEven);
                        }
                    }
                    else if (_pick.Text.Equals("언더") || _pick.Text.Equals("오버"))
                    {
                        if (_pick.Text.Equals(PowerBallGame_Result_NormalBall_UnderOVer)) // 파워볼 홀짝
                        {
                            _level.BackColor = Color.White;
                            _level.ForeColor = Color.Black;
                            _level.Text = "1";
                            logger.Info("일반 따라가기 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 당첨 : " + PowerBallGame_Result_NormalBall_UnderOVer);
                        }
                        else
                        {
                            _levelColorSetting(_level, _betMoney);
                            logger.Info("일반 따라가기 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 미당첨 : " + PowerBallGame_Result_NormalBall_UnderOVer);
                        }
                    }
                    // 반대로 배팅시 처리
                }
                else if (_follow.Text.Equals("반대로"))
                {
                    if (_pick.Text.Equals("홀") || _pick.Text.Equals("짝"))
                    {
                        if (!_pick.Text.Equals(PowerBallGame_Result_NormalBall_OddEven)) // 파워볼 홀짝
                        {
                            _level.BackColor = Color.White;
                            _level.ForeColor = Color.Black;
                            _level.Text = "1";
                            logger.Info("일반 반대로 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 당첨 : " + PowerBallGame_Result_NormalBall_OddEven);
                        }
                        else
                        {
                            _levelColorSetting(_level, _betMoney);
                            logger.Info("일반 반대로 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 미당첨 : " + PowerBallGame_Result_NormalBall_OddEven);
                        }
                    }
                    else if (_pick.Text.Equals("언더") || _pick.Text.Equals("오버"))
                    {
                        if (!_pick.Text.Equals(PowerBallGame_Result_NormalBall_UnderOVer)) // 일반볼 언더오버
                        {
                            _level.BackColor = Color.White;
                            _level.ForeColor = Color.Black;
                            _level.Text = "1";
                            logger.Info("일반 반대로 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 당첨 : " + PowerBallGame_Result_NormalBall_UnderOVer);
                        }
                        else
                        {
                            _levelColorSetting(_level, _betMoney);
                            logger.Info("일반 반대로 : [" + PowerBall_Now_All_Inning + "회 " + _pickster.Text + " / 픽스터의 선택 : " + _pick.Text + " / 해당차 미당첨 : " + PowerBallGame_Result_NormalBall_UnderOVer);
                        }
                    }
                }
            }
        }

        // 픽 삭제
        private void clearBetInfor()
        {
            Normal_Pickster_Pick_PowerBall_Over_Money = 0;
            Normal_Pickster_Pick_PowerBall_Under_Money = 0;
            Normal_Pickster_Pick_PowerBall_Odd_Money = 0;
            Normal_Pickster_Pick_PowerBall_Even_Money = 0;
            nOverMoney = 0;
            nUnderMoney = 0;
            nOddMoney = 0;
            nEvenMoney = 0;

            TextBox BoxPick;
            TextBox txtBoxBallType;
            TextBox txtBoxPS;
            for (int _find = 1; _find <= accountNumber; _find++)
            {
                BoxPick = (Controls.Find("BoxPick" + _find.ToString(), true)[0] as TextBox);
                BoxPick.Text = "통과";
                BoxPick.ForeColor = Color.DarkGray;

                txtBoxBallType = (Controls.Find("txtBoxBallType" + _find.ToString(), true)[0] as TextBox);
                txtBoxBallType.Text = "";

                txtBoxPS = (Controls.Find("txtBoxPS" + _find.ToString(), true)[0] as TextBox);
                txtBoxPS.Text = "----";
                txtBoxPS.ForeColor = Color.DarkGray;
            }

            TextBox UserPicksterPick;
            TextBox UserPicksterBallType;
            TextBox UserPicksterBettingMoney;
            TextBox UserPicksterBettingMoneyForPercent;
            for (int _find = 1; _find <= 4; _find++)
            {
                UserPicksterPick = (Controls.Find("UserPicksterPick" + _find.ToString(), true)[0] as TextBox);
                UserPicksterPick.Text = "통과";
                UserPicksterPick.ForeColor = Color.DarkGray;

                UserPicksterBallType = (Controls.Find("UserPicksterBallType" + _find.ToString(), true)[0] as TextBox);
                UserPicksterBallType.Text = "";
                UserPicksterBallType.ForeColor = Color.DarkGray;

                UserPicksterBettingMoney = (Controls.Find("UserPicksterBettingMoney" + _find.ToString(), true)[0] as TextBox);
                UserPicksterBettingMoney.Text = "0";
                UserPicksterBettingMoney.ForeColor = Color.DarkGray;

                UserPicksterBettingMoneyForPercent = (Controls.Find("UserPicksterBettingMoneyForPercent" + _find.ToString(), true)[0] as TextBox);
                UserPicksterBettingMoneyForPercent.Text = "0";
                UserPicksterBettingMoneyForPercent.ForeColor = Color.DarkGray;
            }
        }

        // 배팅 진행. 각각의 배팅금액을 더한다.
        private void runToBet(String _follow, String type, String pick, int money)
        {
            if (type.Contains("파워"))
            {
                if (pick.Contains("홀"))
                {
                    if (_follow.Equals("따라가기"))
                    {
                        Normal_Pickster_Pick_PowerBall_Odd_Money += money;
                    }
                    else
                    {
                        Normal_Pickster_Pick_PowerBall_Even_Money += money;
                    }

                }
                else if (pick.Contains("짝"))
                {
                    if (_follow.Equals("따라가기"))
                    {
                        Normal_Pickster_Pick_PowerBall_Even_Money += money;
                    }
                    else
                    {
                        Normal_Pickster_Pick_PowerBall_Odd_Money += money;
                    }

                }
                else if (pick.Contains("언더"))
                {
                    if (_follow.Equals("따라가기"))
                    {
                        Normal_Pickster_Pick_PowerBall_Under_Money += money;
                    }
                    else
                    {
                        Normal_Pickster_Pick_PowerBall_Over_Money += money;
                    }

                }
                else if (pick.Contains("오버"))
                {
                    if (_follow.Equals("따라가기"))
                    {
                        Normal_Pickster_Pick_PowerBall_Over_Money += money;
                    }
                    else
                    {
                        Normal_Pickster_Pick_PowerBall_Under_Money += money;
                    }

                }
            }
            else if (type.Contains("일반"))
            {
                if (pick.Contains("홀"))
                {
                    if (_follow.Equals("따라가기"))
                    {
                        nOddMoney += money;
                    }
                    else
                    {
                        nEvenMoney += money;
                    }

                }
                else if (pick.Contains("짝"))
                {
                    if (_follow.Equals("따라가기"))
                    {
                        nEvenMoney += money;
                    }
                    else
                    {
                        nOddMoney += money;
                    }

                }
                else if (pick.Contains("언더"))
                {
                    if (_follow.Equals("따라가기"))
                    {
                        nUnderMoney += money;
                    }
                    else
                    {
                        nOverMoney += money;
                    }
                }
                else if (pick.Contains("오버"))
                {
                    if (_follow.Equals("따라가기"))
                    {
                        nOverMoney += money;
                    }
                    else
                    {
                        nUnderMoney += money;
                    }
                }
            }
        }
        void bettingLevel1()
        {
            Button btnPR;
            TextBox BoxPick;
            Button btnFollow;
            TextBox txtBoxBallType;
            TextBox txtBoxPBM;
            for (int _find = 1; _find <= accountNumber; _find++)
            {
                btnPR = (Controls.Find("btnPR" + _find.ToString(), true)[0] as Button);
                BoxPick = (Controls.Find("BoxPick" + _find.ToString(), true)[0] as TextBox);
                if (btnPR.Text.Equals("배팅진행"))
                {
                    btnFollow = (Controls.Find("btnFollow" + _find.ToString(), true)[0] as Button);
                    txtBoxBallType = (Controls.Find("txtBoxBallType" + _find.ToString(), true)[0] as TextBox);
                    txtBoxPBM = (Controls.Find("txtBoxPBM" + _find.ToString(), true)[0] as TextBox);
                    runToBet(btnFollow.Text, txtBoxBallType.Text, BoxPick.Text, int.Parse(txtBoxPBM.Text));
                }
                else
                {
                    BoxPick.Text = "통과";
                    BoxPick.ForeColor = Color.Black;
                }
            }
            bettingStatus = false;
        }

        public void bettingLevel2(String stringBuilder)
        {
            try
            {
                bettingStatus = false;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += Normal_Pickster_Pick_PowerBall_Odd_Money + Normal_Pickster_Pick_PowerBall_Even_Money + Normal_Pickster_Pick_PowerBall_Under_Money + Normal_Pickster_Pick_PowerBall_Over_Money + nOddMoney + nEvenMoney + nUnderMoney + nOverMoney;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                    UtilModel.UserOwnMoney = UtilModel.UserOwnMoney - (Normal_Pickster_Pick_PowerBall_Odd_Money + Normal_Pickster_Pick_PowerBall_Even_Money + Normal_Pickster_Pick_PowerBall_Under_Money + Normal_Pickster_Pick_PowerBall_Over_Money + nOddMoney + nEvenMoney + nUnderMoney + nOverMoney);
                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                    logger.Info("[파홀 : " + Normal_Pickster_Pick_PowerBall_Odd_Money + "][파짝 : " + Normal_Pickster_Pick_PowerBall_Even_Money + "][파언 : " + Normal_Pickster_Pick_PowerBall_Under_Money + "][파오 : " + Normal_Pickster_Pick_PowerBall_Over_Money + "][일홀 : " + nOddMoney + "][일짝 : " + nEvenMoney + "][일언 : " + nUnderMoney + "][일오 : " + nOverMoney + "]");
                    bettingStatus = true;

                }
                else if (realOrVirtualMode == 0)
                {
                    String Message = null;
                    Boolean _BoolResult = false;

                    int CountResult = 0;
                    while (!_BoolResult)
                    {
                        try
                        {
                            var returnMessage = UtilModel.MakeAsyncRequest(stringBuilder, "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                _BoolResult = true;
                                continue;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + stringBuilder);
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    _BoolResult = true;
                                }
                                if (BetRemainingTime < 25)
                                {
                                    _BoolResult = true;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + stringBuilder);
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                _BoolResult = true;
                            }
                            if (BetRemainingTime < 25)
                            {
                                _BoolResult = true;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    bettingStatus = false;
                    if (!Message.Contains("ret_code"))
                    {
                        Normal_Pickster_Pick_PowerBall_Odd_Money = 0;
                        Normal_Pickster_Pick_PowerBall_Even_Money = 0;
                        Normal_Pickster_Pick_PowerBall_Under_Money = 0;
                        Normal_Pickster_Pick_PowerBall_Over_Money = 0;
                        nOddMoney = 0;
                        nEvenMoney = 0;
                        nUnderMoney = 0;
                        nOverMoney = 0;
                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                        if (BettingFalseCheck.Checked)
                        {
                            for (int _find = 1; _find <= accountNumber; _find++)
                            {
                                Button _pr = (Controls.Find("btnPR" + _find.ToString(), true)[0] as Button);
                                _pr.Text = "배팅정지";
                                _pr.ForeColor = Color.White;
                                _pr.BackColor = Color.FromArgb(2, 136, 209);
                            }
                            MessageBox.Show("[" + DateTime.Now.ToString("hh:MM:ss") + "] 배팅 실패로 인해 배팅 전체 정지를 시켜놨습니다. 재설정하십시요!");
                        }
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += Normal_Pickster_Pick_PowerBall_Odd_Money + Normal_Pickster_Pick_PowerBall_Even_Money + Normal_Pickster_Pick_PowerBall_Under_Money + Normal_Pickster_Pick_PowerBall_Over_Money + nOddMoney + nEvenMoney + nUnderMoney + nOverMoney;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                            txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                            String bettingMoneyString = "[배팅완료][" + PowerBall_Now_All_Inning + " 회][파홀:" + Normal_Pickster_Pick_PowerBall_Odd_Money + "][파짝:" + Normal_Pickster_Pick_PowerBall_Even_Money + "][파언더:" + Normal_Pickster_Pick_PowerBall_Under_Money + "][파오버:" + Normal_Pickster_Pick_PowerBall_Over_Money + "][일홀:" + nOddMoney + "][일짝:" + nEvenMoney + "][일언더:" + nUnderMoney + "][일오버:" + nOverMoney + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            bettingStatus = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        int UserPickster_PowerBallOddMoney = 0;
        int UserPickster_PowerBallEvenMoney = 0;
        int UserPickster_PowerBallUnderMoney = 0;
        int UserPickster_PowerBallOverMoney = 0;
        int UserPickster_NormalBallOddMoney = 0;
        int UserPickster_NormalBallEvenMoney = 0;
        int UserPickster_NormalBallUnderMoney = 0;
        int UserPickster_NormalBallOverMoney = 0;

        private void UserPIcksterFollowBet()
        {
            UserPickster_PowerBallOddMoney = 0;
            UserPickster_PowerBallEvenMoney = 0;
            UserPickster_PowerBallUnderMoney = 0;
            UserPickster_PowerBallOverMoney = 0;
            UserPickster_NormalBallOddMoney = 0;
            UserPickster_NormalBallEvenMoney = 0;
            UserPickster_NormalBallUnderMoney = 0;
            UserPickster_NormalBallOverMoney = 0;

            UserPicksterFollowBettingLevel1();

            if (UserPickster_PowerBallOddMoney < 100 && UserPickster_PowerBallOddMoney > 0)
            {
                UserPickster_PowerBallOddMoney = 100;
            }
            if (UserPickster_PowerBallEvenMoney < 100 && UserPickster_PowerBallEvenMoney > 0)
            {
                UserPickster_PowerBallEvenMoney = 100;
            }
            if (UserPickster_NormalBallOddMoney < 100 && UserPickster_NormalBallOddMoney > 0)
            {
                UserPickster_NormalBallOddMoney = 100;
            }
            if (UserPickster_NormalBallEvenMoney < 100 && UserPickster_NormalBallEvenMoney > 0)
            {
                UserPickster_NormalBallEvenMoney = 100;
            }
            if (UserPickster_PowerBallUnderMoney < 100 && UserPickster_PowerBallUnderMoney > 0)
            {
                UserPickster_PowerBallUnderMoney = 100;
            }
            if (UserPickster_PowerBallOverMoney < 100 && UserPickster_PowerBallOverMoney > 0)
            {
                UserPickster_PowerBallOverMoney = 100;
            }
            if (UserPickster_NormalBallUnderMoney < 100 && UserPickster_NormalBallUnderMoney > 0)
            {
                UserPickster_NormalBallUnderMoney = 100;
            }
            if (UserPickster_NormalBallOverMoney < 100 && UserPickster_NormalBallOverMoney > 0)
            {
                UserPickster_NormalBallOverMoney = 100;
            }

            int powerballMoney = UserPickster_PowerBallOddMoney + UserPickster_PowerBallEvenMoney + UserPickster_PowerBallUnderMoney + UserPickster_PowerBallOverMoney + UserPickster_NormalBallOddMoney + UserPickster_NormalBallEvenMoney + UserPickster_NormalBallUnderMoney + UserPickster_NormalBallOverMoney;

            if (powerballMoney > 0)
            {
                UserPicksterPowerballBetting();
                startInning = 0;
                TermInning = 0;
            }
            TermInning = TermInning - startInning;
        }

        private void UserPicksterFollowBettingLevel1()
        {
            for (int _find = 1; _find <= 4; _find++)
            {
                Button UserPicksterReady = (Controls.Find("UserPicksterReady" + _find.ToString(), true)[0] as Button);
                TextBox UserPicksterPick = (Controls.Find("UserPicksterPick" + _find.ToString(), true)[0] as TextBox);
                if (UserPicksterReady.Text.Equals("배팅진행"))
                {
                    TextBox UserPicksterBallType = (Controls.Find("UserPicksterBallType" + _find.ToString(), true)[0] as TextBox);
                    TextBox UserPicksterBettingMoneyForPercent = (Controls.Find("UserPicksterBettingMoneyForPercent" + _find.ToString(), true)[0] as TextBox);

                    bool _b = int.TryParse(Regex.Replace(UserPicksterBettingMoneyForPercent.Text, @"\D", ""), out int outValue);
                    if (_b)
                    {
                        UserPicksterBetProcessing(UserPicksterBallType.Text, UserPicksterPick.Text, outValue);
                    }
                }
                else
                {
                    UserPicksterPick.Text = "통과";
                    UserPicksterPick.ForeColor = Color.DarkGray;
                }
            }
            UserPicksterBettingStatus = false;
        }


        public void UserPicksterFollowBettingLevel2(String sb)
        {
            try
            {
                UserPicksterBettingStatus = false;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += UserPickster_PowerBallOddMoney + UserPickster_PowerBallEvenMoney + UserPickster_PowerBallUnderMoney + UserPickster_PowerBallOverMoney
                        + UserPickster_NormalBallOddMoney + UserPickster_NormalBallEvenMoney + UserPickster_NormalBallUnderMoney + UserPickster_NormalBallOverMoney;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                    UtilModel.UserOwnMoney = UtilModel.UserOwnMoney - (UserPickster_PowerBallOddMoney + UserPickster_PowerBallEvenMoney + UserPickster_PowerBallUnderMoney + UserPickster_PowerBallOverMoney
                        + UserPickster_NormalBallOddMoney + UserPickster_NormalBallEvenMoney + UserPickster_NormalBallUnderMoney + UserPickster_NormalBallOverMoney);

                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                    logger.Info("[파홀 : " + UserPickster_PowerBallOddMoney + "][파짝 : " + UserPickster_PowerBallEvenMoney + "][파언 : " + UserPickster_PowerBallUnderMoney + "][파오 : " + UserPickster_PowerBallOverMoney + "][일홀 : " + UserPickster_NormalBallOddMoney + "][일짝 : " + UserPickster_NormalBallEvenMoney + "][일언 : " + UserPickster_NormalBallUnderMoney + "][일오 : " + UserPickster_NormalBallOverMoney + "]");
                    UserPicksterBettingStatus = true;

                }
                else if (realOrVirtualMode == 0)
                {
                    String Message = null;
                    Boolean _BoolResult = false;

                    int CountResult = 0;

                    //logger.Info(sb);
                    while (!_BoolResult)
                    {
                        try
                        {
                            //Uri myUri = new Uri(sb);
                            var returnMessage = UtilModel.MakeAsyncRequest(sb, "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            //returnMessage = UtilModel.GetHttp(myUri, "GET", null);
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                _BoolResult = true;
                                continue;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + sb);
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    _BoolResult = true;
                                }
                                if (BetRemainingTime < 30)
                                {
                                    _BoolResult = true;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + sb);
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                _BoolResult = true;
                            }
                            if (BetRemainingTime < 30)
                            {
                                _BoolResult = true;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    UserPicksterBettingStatus = false;
                    if (!Message.Contains("ret_code"))
                    {
                        UserPickster_PowerBallOddMoney = 0;
                        UserPickster_PowerBallEvenMoney = 0;
                        UserPickster_PowerBallUnderMoney = 0;
                        UserPickster_PowerBallOverMoney = 0;
                        UserPickster_NormalBallOddMoney = 0;
                        UserPickster_NormalBallEvenMoney = 0;
                        UserPickster_NormalBallUnderMoney = 0;
                        UserPickster_NormalBallOverMoney = 0;

                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += UserPickster_PowerBallOddMoney + UserPickster_PowerBallEvenMoney + UserPickster_PowerBallUnderMoney + UserPickster_PowerBallOverMoney + UserPickster_NormalBallOddMoney + UserPickster_NormalBallEvenMoney + UserPickster_NormalBallUnderMoney + UserPickster_NormalBallOverMoney;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                            txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                            String bettingMoneyString = "[배팅완료][" + PowerBall_Now_All_Inning + " 회][파홀:" + UserPickster_PowerBallOddMoney + "][파짝:" + UserPickster_PowerBallEvenMoney + "][파언더:" + UserPickster_PowerBallUnderMoney + "][파오버:" + UserPickster_PowerBallOverMoney + "][일홀:" + UserPickster_NormalBallOddMoney + "][일짝:" + UserPickster_NormalBallEvenMoney + "][일언더:" + UserPickster_NormalBallUnderMoney + "][일오버:" + UserPickster_NormalBallOverMoney + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            UserPicksterBettingStatus = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        private void UserPicksterPowerballBetting()
        {
            int a = UserPickster_PowerBallOddMoney + UserPickster_PowerBallEvenMoney + UserPickster_PowerBallUnderMoney + UserPickster_PowerBallOverMoney + UserPickster_NormalBallOddMoney + UserPickster_NormalBallEvenMoney + UserPickster_NormalBallUnderMoney + UserPickster_NormalBallOverMoney;

            if (a <= 0)
            {
                return;
            }

            //String _date = DateTime.Now.ToString("yyyy-MM-dd").Replace("-", "");

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(UtilModel.UserSiteUrlAddress);
            stringBuilder.Append(":8082/api/bet");
            stringBuilder.AppendFormat("?userid={0}", UtilModel.UserId);
            stringBuilder.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);
            stringBuilder.AppendFormat("&gm={0}", "PWB");
            stringBuilder.AppendFormat("&tdate={0}", TodayDate);
            stringBuilder.AppendFormat("&rno={0}", PowerBall_Now_All_Inning.ToString());
            if (UserPickster_PowerBallOddMoney > 0)
            {
                stringBuilder.AppendFormat("&pp1={0}", UserPickster_PowerBallOddMoney);
            }
            if (UserPickster_PowerBallEvenMoney > 0)
            {
                stringBuilder.AppendFormat("&pp2={0}", UserPickster_PowerBallEvenMoney);
            }
            if (UserPickster_PowerBallUnderMoney > 0)
            {
                stringBuilder.AppendFormat("&pp3={0}", UserPickster_PowerBallUnderMoney);
            }
            if (UserPickster_PowerBallOverMoney > 0)
            {
                stringBuilder.AppendFormat("&pp4={0}", UserPickster_PowerBallOverMoney);
            }
            if (UserPickster_NormalBallOddMoney > 0)
            {
                stringBuilder.AppendFormat("&pp5={0}", UserPickster_NormalBallOddMoney);
            }
            if (UserPickster_NormalBallEvenMoney > 0)
            {
                stringBuilder.AppendFormat("&pp6={0}", UserPickster_NormalBallEvenMoney);
            }
            if (UserPickster_NormalBallUnderMoney > 0)
            {
                stringBuilder.AppendFormat("&pp7={0}", UserPickster_NormalBallUnderMoney);
            }
            if (UserPickster_NormalBallOverMoney > 0)
            {
                stringBuilder.AppendFormat("&pp8={0}", UserPickster_NormalBallOverMoney);
            }
            stringBuilder.AppendFormat("&nonce={0}", User_Pickster_Follow_Mode_Random_Nonce);

            UserPicksterFollowBettingLevel2(stringBuilder.ToString());

            if (UserPicksterBettingStatus)
            {
                String str = "";
                String str2 = "";
                ListViewItem item;
                if (UserPickster_PowerBallOddMoney > 0)
                {
                    str += "[파홀 : " + UtilModel.StringFormatChanged(UserPickster_PowerBallOddMoney) + "원]";

                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("파워");
                    item.SubItems.Add("홀");
                    item.SubItems.Add(UtilModel.StringFormatChanged(UserPickster_PowerBallOddMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add("따라가기");
                    directBetRegistListView.Items.Add(item);
                }
                if (UserPickster_PowerBallEvenMoney > 0)
                {
                    str += "[파짝 : " + UtilModel.StringFormatChanged(UserPickster_PowerBallEvenMoney) + "원]";

                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("파워");
                    item.SubItems.Add("짝");
                    item.SubItems.Add(UtilModel.StringFormatChanged(UserPickster_PowerBallEvenMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add("따라가기");
                    directBetRegistListView.Items.Add(item);
                }
                if (UserPickster_PowerBallUnderMoney > 0)
                {
                    str += "[파언 : " + UtilModel.StringFormatChanged(UserPickster_PowerBallUnderMoney) + "원]";

                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("파워");
                    item.SubItems.Add("언");
                    item.SubItems.Add(UtilModel.StringFormatChanged(UserPickster_PowerBallUnderMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add("따라가기");
                    directBetRegistListView.Items.Add(item);
                }
                if (UserPickster_PowerBallOverMoney > 0)
                {
                    str += "[파오 : " + UtilModel.StringFormatChanged(UserPickster_PowerBallOverMoney) + "원]";

                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("파워");
                    item.SubItems.Add("오");
                    item.SubItems.Add(UtilModel.StringFormatChanged(UserPickster_PowerBallOverMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add("따라가기");
                    directBetRegistListView.Items.Add(item);
                }
                if (UserPickster_NormalBallOddMoney > 0)
                {
                    str2 += "[일홀 : " + UtilModel.StringFormatChanged(UserPickster_NormalBallOddMoney) + "원]";

                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("홀");
                    item.SubItems.Add(UtilModel.StringFormatChanged(UserPickster_NormalBallOddMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add("따라가기");
                    directBetRegistListView.Items.Add(item);
                }
                if (UserPickster_NormalBallEvenMoney > 0)
                {
                    str2 += "[일짝 : " + UtilModel.StringFormatChanged(UserPickster_NormalBallEvenMoney) + "원]";

                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("짝");
                    item.SubItems.Add(UtilModel.StringFormatChanged(UserPickster_NormalBallEvenMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add("따라가기");
                    directBetRegistListView.Items.Add(item);
                }
                if (UserPickster_NormalBallUnderMoney > 0)
                {
                    str2 += "[일언 : " + UtilModel.StringFormatChanged(UserPickster_NormalBallUnderMoney) + "원]";

                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("언");
                    item.SubItems.Add(UtilModel.StringFormatChanged(UserPickster_NormalBallUnderMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add("따라가기");
                    directBetRegistListView.Items.Add(item);
                }
                if (UserPickster_NormalBallOverMoney > 0)
                {
                    str2 += "[일오 : " + UtilModel.StringFormatChanged(UserPickster_NormalBallOverMoney) + "원]";

                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("오");
                    item.SubItems.Add(UtilModel.StringFormatChanged(UserPickster_NormalBallOverMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add("따라가기");
                    directBetRegistListView.Items.Add(item);
                }
                if (str.Length > 1)
                {
                    txtLogAdd(str, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                }
                if (str2.Length > 1)
                {
                    txtLogAdd(str2, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                }
            }
        }

        private void UserPicksterBetProcessing(String type, String pick, int money)
        {
            if (type.Contains("파워"))
            {
                if (pick.Contains("홀"))
                {
                    if (money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = money;
                        UserMaximumSelectPick = "파홀";
                    }
                    UserPickster_PowerBallOddMoney += money;
                }
                else if (pick.Contains("짝"))
                {
                    if (money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = money;
                        UserMaximumSelectPick = "파짝";
                    }
                    UserPickster_PowerBallEvenMoney += money;
                }
                else if (pick.Contains("언더"))
                {
                    if (money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = money;
                        UserMaximumSelectPick = "파언더";
                    }
                    UserPickster_PowerBallUnderMoney += money;
                }
                else if (pick.Contains("오버"))
                {
                    if (money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = money;
                        UserMaximumSelectPick = "파오버";
                    }
                    UserPickster_PowerBallOverMoney += money;
                }
            }
            else if (type.Contains("일반"))
            {
                if (pick.Contains("홀"))
                {
                    if (money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = money;
                        UserMaximumSelectPick = "일홀";
                    }
                    UserPickster_NormalBallOddMoney += money;
                }
                else if (pick.Contains("짝"))
                {
                    if (money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = money;
                        UserMaximumSelectPick = "일짝";
                    }
                    UserPickster_NormalBallEvenMoney += money;
                }
                else if (pick.Contains("언더"))
                {
                    if (money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = money;
                        UserMaximumSelectPick = "일언더";
                    }
                    UserPickster_NormalBallUnderMoney += money;
                }
                else if (pick.Contains("오버"))
                {
                    if (money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = money;
                        UserMaximumSelectPick = "일오버";
                    }
                    UserPickster_NormalBallOverMoney += money;
                }
            }
        }

        private void bet()
        {
            Normal_Pickster_Pick_PowerBall_Odd_Money = 0;
            Normal_Pickster_Pick_PowerBall_Even_Money = 0;
            Normal_Pickster_Pick_PowerBall_Under_Money = 0;
            Normal_Pickster_Pick_PowerBall_Over_Money = 0;
            nOddMoney = 0;
            nEvenMoney = 0;
            nUnderMoney = 0;
            nOverMoney = 0;

            bettingLevel1();
            if (Normal_Pickster_Pick_PowerBall_Odd_Money < 100 && Normal_Pickster_Pick_PowerBall_Odd_Money > 0)
            {
                Normal_Pickster_Pick_PowerBall_Odd_Money = 100;
            }
            if (Normal_Pickster_Pick_PowerBall_Even_Money < 100 && Normal_Pickster_Pick_PowerBall_Even_Money > 0)
            {
                Normal_Pickster_Pick_PowerBall_Even_Money = 100;
            }
            if (nOddMoney < 100 && nOddMoney > 0)
            {
                nOddMoney = 100;
            }
            if (nEvenMoney < 100 && nEvenMoney > 0)
            {
                nEvenMoney = 100;
            }
            if (Normal_Pickster_Pick_PowerBall_Under_Money < 100 && Normal_Pickster_Pick_PowerBall_Under_Money > 0)
            {
                Normal_Pickster_Pick_PowerBall_Under_Money = 100;
            }
            if (Normal_Pickster_Pick_PowerBall_Over_Money < 100 && Normal_Pickster_Pick_PowerBall_Over_Money > 0)
            {
                Normal_Pickster_Pick_PowerBall_Over_Money = 100;
            }
            if (nUnderMoney < 100 && nUnderMoney > 0)
            {
                nUnderMoney = 100;
            }
            if (nOverMoney < 100 && nOverMoney > 0)
            {
                nOverMoney = 100;
            }

            int powerballMoney = Normal_Pickster_Pick_PowerBall_Odd_Money + Normal_Pickster_Pick_PowerBall_Even_Money + nOddMoney + nEvenMoney + Normal_Pickster_Pick_PowerBall_Under_Money + Normal_Pickster_Pick_PowerBall_Over_Money + nUnderMoney + nOverMoney;

            if (powerballMoney > 0)
            {
                powerballBetting("PWB");
                startInning = 0;
                TermInning = 0;
            }
            TermInning = TermInning - startInning;
        }

        private void powerballBetting(string gm)
        {
            int a = Normal_Pickster_Pick_PowerBall_Odd_Money + Normal_Pickster_Pick_PowerBall_Even_Money + Normal_Pickster_Pick_PowerBall_Under_Money + Normal_Pickster_Pick_PowerBall_Over_Money + nOddMoney + nEvenMoney + nUnderMoney + nOverMoney;

            if (a <= 0)
            {
                return;
            }

            //String _date = DateTime.Now.ToString("yyyy-MM-dd").Replace("-", "");

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(UtilModel.UserSiteUrlAddress);
            stringBuilder.Append(":8082/api/bet");
            stringBuilder.AppendFormat("?userid={0}", UtilModel.UserId);
            stringBuilder.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);
            stringBuilder.AppendFormat("&gm={0}", gm);
            stringBuilder.AppendFormat("&tdate={0}", TodayDate);
            stringBuilder.AppendFormat("&rno={0}", PowerBall_Now_All_Inning);
            if (Normal_Pickster_Pick_PowerBall_Odd_Money > 0)
            {
                if (Normal_Pickster_Pick_PowerBall_Odd_Money > UserMaximumSelectPick_BetMoney)
                {
                    UserMaximumSelectPick_BetMoney = Normal_Pickster_Pick_PowerBall_Odd_Money;
                    UserMaximumSelectPick = "파홀";
                }
                stringBuilder.AppendFormat("&pp1={0}", Normal_Pickster_Pick_PowerBall_Odd_Money);
            }
            if (Normal_Pickster_Pick_PowerBall_Even_Money > 0)
            {
                if (Normal_Pickster_Pick_PowerBall_Even_Money > UserMaximumSelectPick_BetMoney)
                {
                    UserMaximumSelectPick_BetMoney = Normal_Pickster_Pick_PowerBall_Even_Money;
                    UserMaximumSelectPick = "파짝";
                }
                stringBuilder.AppendFormat("&pp2={0}", Normal_Pickster_Pick_PowerBall_Even_Money);
            }
            if (Normal_Pickster_Pick_PowerBall_Under_Money > 0)
            {
                if (Normal_Pickster_Pick_PowerBall_Under_Money > UserMaximumSelectPick_BetMoney)
                {
                    UserMaximumSelectPick_BetMoney = Normal_Pickster_Pick_PowerBall_Under_Money;
                    UserMaximumSelectPick = "파언더";
                }
                stringBuilder.AppendFormat("&pp3={0}", Normal_Pickster_Pick_PowerBall_Under_Money);
            }
            if (Normal_Pickster_Pick_PowerBall_Over_Money > 0)
            {
                if (Normal_Pickster_Pick_PowerBall_Over_Money > UserMaximumSelectPick_BetMoney)
                {
                    UserMaximumSelectPick_BetMoney = Normal_Pickster_Pick_PowerBall_Over_Money;
                    UserMaximumSelectPick = "파오버";
                }
                stringBuilder.AppendFormat("&pp4={0}", Normal_Pickster_Pick_PowerBall_Over_Money);
            }
            if (nOddMoney > 0)
            {
                if (nOddMoney > UserMaximumSelectPick_BetMoney)
                {
                    UserMaximumSelectPick_BetMoney = nOddMoney;
                    UserMaximumSelectPick = "일홀";
                }
                stringBuilder.AppendFormat("&pp5={0}", nOddMoney);
            }
            if (nEvenMoney > 0)
            {
                if (nEvenMoney > UserMaximumSelectPick_BetMoney)
                {
                    UserMaximumSelectPick_BetMoney = nEvenMoney;
                    UserMaximumSelectPick = "일짝";
                }
                stringBuilder.AppendFormat("&pp6={0}", nEvenMoney);
            }
            if (nUnderMoney > 0)
            {
                if (nUnderMoney > UserMaximumSelectPick_BetMoney)
                {
                    UserMaximumSelectPick_BetMoney = nUnderMoney;
                    UserMaximumSelectPick = "일언더";
                }
                stringBuilder.AppendFormat("&pp7={0}", nUnderMoney);
            }
            if (nOverMoney > 0)
            {
                if (nOverMoney > UserMaximumSelectPick_BetMoney)
                {
                    UserMaximumSelectPick_BetMoney = nOverMoney;
                    UserMaximumSelectPick = "일오버";
                }
                stringBuilder.AppendFormat("&pp8={0}", nOverMoney);
            }
            stringBuilder.AppendFormat("&nonce={0}", Normal_Mode_Random_Nonce);


            bettingLevel2(stringBuilder.ToString());

            if (bettingStatus)
            {
                if (Normal_Pickster_Pick_PowerBall_Odd_Money > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("파워");
                    item.SubItems.Add("홀");
                    item.SubItems.Add(UtilModel.StringFormatChanged(Normal_Pickster_Pick_PowerBall_Odd_Money));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    normalModeMaringaleBetRegistListView.Items.Add(item);
                }
                if (Normal_Pickster_Pick_PowerBall_Even_Money > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("파워");
                    item.SubItems.Add("짝");
                    item.SubItems.Add(UtilModel.StringFormatChanged(Normal_Pickster_Pick_PowerBall_Even_Money));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    normalModeMaringaleBetRegistListView.Items.Add(item);
                }
                if (Normal_Pickster_Pick_PowerBall_Under_Money > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("파워");
                    item.SubItems.Add("언");
                    item.SubItems.Add(UtilModel.StringFormatChanged(Normal_Pickster_Pick_PowerBall_Under_Money));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    normalModeMaringaleBetRegistListView.Items.Add(item);
                }
                if (Normal_Pickster_Pick_PowerBall_Over_Money > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("파워");
                    item.SubItems.Add("오");
                    item.SubItems.Add(UtilModel.StringFormatChanged(Normal_Pickster_Pick_PowerBall_Over_Money));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    normalModeMaringaleBetRegistListView.Items.Add(item);
                }
                if (nOddMoney > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("홀");
                    item.SubItems.Add(UtilModel.StringFormatChanged(nOddMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    normalModeMaringaleBetRegistListView.Items.Add(item);
                }
                if (nEvenMoney > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("짝");
                    item.SubItems.Add(UtilModel.StringFormatChanged(nEvenMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    normalModeMaringaleBetRegistListView.Items.Add(item);
                }
                if (nUnderMoney > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("언");
                    item.SubItems.Add(UtilModel.StringFormatChanged(nUnderMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    normalModeMaringaleBetRegistListView.Items.Add(item);
                }
                if (nOverMoney > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("오");
                    item.SubItems.Add(UtilModel.StringFormatChanged(nOverMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    normalModeMaringaleBetRegistListView.Items.Add(item);
                }
            }
        }
        // listview 정렬
        private void allPicksterListView_columnClick(object sender, ColumnClickEventArgs e)
        {
            columnsorter.currentColumn = e.Column;

            if (columnsorter.currentColumn > 4)
            {
                return;
            }
            // 전에 선택했던 컬럼과 다르면 오름 차순 정렬
            if (columnsorter.previousColumn != columnsorter.currentColumn)
            {
                columnsorter.sort = Sorting.Ascending;
            }
            else    // 전에 선택했던 컬럼과 같을때
            {
                switch (columnsorter.sort)
                {
                    case Sorting.Ascending:// 오름차순이였다면 내림 차순으로 바꾼다.
                        columnsorter.sort = Sorting.Descending;
                        break;
                    case Sorting.Descending:
                        columnsorter.sort = Sorting.Ascending;
                        break;
                }
            }

            if (flag == 0)
            {
                allPicksterListView.ListViewItemSorter = columnsorter; // 자동으로 listvHeader.Sort()함수가 수행된다.
                flag = 1;
            }
            else
            {
                allPicksterListView.Sort();
            }

            // 현재 선택했던 컬럼을 기억해 둔다.
            columnsorter.previousColumn = columnsorter.currentColumn;
            return;
        }
        ColumnSorter columnsorter = new ColumnSorter();

        private int flag = 0;

        public enum Sorting { Ascending, Descending };

        //ListView에서 컬럼을 누르면 정렬이 되게 하기 위해...
        public class ColumnSorter : IComparer
        {
            public int currentColumn = -1;  // 현재 선택한 컬럼
            public int previousColumn = -1;  // 전에 선책한 컬럼     
            public Sorting sort = Sorting.Ascending;

            public int Compare(object x, object y)
            {
                int result = 0;
                ListViewItem rowA = (ListViewItem)x;
                ListViewItem rowB = (ListViewItem)y;

                if (rowA.ListView.Columns[currentColumn].Tag == null) // 리스트뷰 Tag 속성이 Null 이면 기본적으로 Text 정렬을 사용하겠다는 의미
                {
                    rowA.ListView.Columns[currentColumn].Tag = "Text";
                }

                if (rowA.ListView.Columns[currentColumn].Tag.ToString() == "Numeric") // 0승 연패
                {
                    string str1 = rowA.SubItems[currentColumn].Text;
                    string str2 = rowB.SubItems[currentColumn].Text;
                    float fl1;
                    float fl2;

                    if (str1.IndexOf("승") < 1)
                    {
                        str1 = "99승";
                    }
                    if (str2.IndexOf("승") < 1)
                    {
                        str2 = "99승";
                    }

                    fl1 = float.Parse(str1.Substring(0, str1.IndexOf("승")));
                    fl2 = float.Parse(str2.Substring(0, str2.IndexOf("승")));

                    switch (sort)
                    {
                        case Sorting.Ascending:    // 오름차 정렬을 원할때
                            result = fl1.CompareTo(fl2);
                            break;
                        case Sorting.Descending:    // 내림차순 정렬을 원할때
                            result = fl2.CompareTo(fl1);
                            break;
                    }
                }
                else if (rowA.ListView.Columns[currentColumn].Tag.ToString() == "Numeric2")
                {
                    string str1 = rowA.SubItems[currentColumn].Text;
                    string str2 = rowB.SubItems[currentColumn].Text;
                    float fl1 = 0;
                    float fl2 = 0;

                    if (str1.IndexOf("연") < 1)
                    {
                        fl1 = -9999;
                    }
                    else
                    {
                        if (str1.Contains("연승"))
                        {
                            fl1 = float.Parse(str1.Substring(0, str1.IndexOf("연")));
                        }
                        else
                        {
                            fl1 = float.Parse(str1.Substring(0, str1.IndexOf("연"))) * -1;
                        }
                    }
                    if (str2.IndexOf("연") < 1)
                    {
                        fl2 = -9999;
                    }
                    else
                    {
                        if (str2.Contains("연승"))
                        {
                            fl2 = float.Parse(str2.Substring(0, str2.IndexOf("연")));
                        }
                        else
                        {
                            fl2 = float.Parse(str2.Substring(0, str2.IndexOf("연"))) * -1;
                        }
                    }

                    switch (sort)
                    {
                        case Sorting.Ascending:    // 오름차 정렬을 원할때
                            result = fl1.CompareTo(fl2);
                            break;
                        case Sorting.Descending:    // 내림차순 정렬을 원할때
                            result = fl2.CompareTo(fl1);
                            break;
                    }
                }
                else
                {
                    switch (sort)
                    {
                        case Sorting.Ascending:    // 오름차 정렬을 원할때
                            result = String.Compare(rowA.SubItems[currentColumn].Text, rowB.SubItems[currentColumn].Text);
                            break;
                        case Sorting.Descending:    // 내림차순 정렬을 원할때
                            result = String.Compare(rowB.SubItems[currentColumn].Text, rowA.SubItems[currentColumn].Text);
                            break;
                    }
                }
                return result;
            }

            public ColumnSorter() { }
        }
        // 왼쪽 1~20번 초기화
        private void left_init_Click(object sender, EventArgs e)
        {
            for (int _find = 1; _find <= 20; _find++)
            {
                ComboBox _targetTextBox1 = (Controls.Find("CBL" + _find.ToString(), true)[0] as ComboBox);
                TextBox _targetTextBox2 = (Controls.Find("txtBoxPBM" + _find.ToString(), true)[0] as TextBox);
                all_Initialization(_targetTextBox1, _targetTextBox2);
            }
        }
        private void all_Initialization(ComboBox L, TextBox PBM)
        {
            L.ForeColor = Color.Black;
            L.BackColor = Color.White;
            L.Text = "1";
            int outValue = 0;
            bool _b = int.TryParse(Regex.Replace(txtBtMoneySettingL1.Text, @"\D", ""), out outValue);
            if (_b)
            {
                PBM.Text = outValue.ToString();
            }
        }

        private void left_follow_Click(object sender, EventArgs e)
        {
            if (_bettingClosed)
            {
                return;
            }
            for (int _find = 1; _find <= 20; _find++)
            {
                Button _targetButton = (Controls.Find("btnFollow" + _find.ToString(), true)[0] as Button);
                _allFollow(_targetButton);
            }
        }
        private void left_unfollow_Click(object sender, EventArgs e)
        {
            if (_bettingClosed)
            {
                return;
            }
            for (int _find = 1; _find <= 20; _find++)
            {
                Button _targetButton = (Controls.Find("btnFollow" + _find.ToString(), true)[0] as Button);
                _allUnFollow(_targetButton);
            }
        }

        private void _allUnFollow(Button _follow)
        {
            if (_bettingClosed)
            {
                return;
            }
            _follow.ForeColor = Color.White;
            _follow.BackColor = Color.Black;
            _follow.Text = "반대로";

        }

        private void _allFollow(Button _unFollow)
        {
            if (_bettingClosed)
            {
                return;
            }
            _unFollow.ForeColor = Color.Black;
            _unFollow.BackColor = Color.White;
            _unFollow.Text = "따라가기";

        }
        private void left_betStop_Click(object sender, EventArgs e)
        {
            if (_bettingClosed)
            {
                return;
            }
            for (int _find = 1; _find <= 20; _find++)
            {

                Button _target = (Controls.Find("btnPR" + _find.ToString(), true)[0] as Button);
                _allBettingStop(_target);
            }
        }
        private void left_betStart_Click(object sender, EventArgs e)
        {
            if (_bettingClosed)
            {
                return;
            }
            for (int _find = 1; _find <= 20; _find++)
            {
                Button _target = (Controls.Find("btnPR" + _find.ToString(), true)[0] as Button);
                _allBettingStart(_target);
            }
        }

        private void _allBettingStop(Button PR)
        {
            PR.Text = "배팅정지";
            PR.ForeColor = Color.White;
            PR.BackColor = Color.FromArgb(2, 136, 209);
        }

        private void _allBettingStart(Button PR)
        {
            PR.ForeColor = Color.Black;
            PR.BackColor = Color.White;
            PR.Text = "배팅진행";
        }

        private void followUnfollowClick(Button _btn)
        {
            if (_bettingClosed)
            {
                return;
            }
            if (_btn.Text.Equals("따라가기"))
            {
                _btn.ForeColor = Color.White;
                _btn.BackColor = Color.Black;
                _btn.Text = "반대로";
            }
            else
            {
                _btn.ForeColor = Color.Black;
                _btn.BackColor = Color.White;
                _btn.Text = "따라가기";
            }
        }

        #region btnFollow
        private void btnFollow_Click(object sender, EventArgs e)
        {
            Button _button = sender as Button;
            followUnfollowClick(_button);
        }

        #endregion btnFollow
        private void powerBallReady(Button _btn)
        {
            if (_bettingClosed)
            {
                MessageBox.Show("지금은 배팅이 종료되어 바꿀 수 없습니다. 진행 중에 변경 부탁드립니다.");
                return;
            }
            if (_btn.Text.Equals("배팅진행"))
            {
                _btn.ForeColor = Color.White;
                _btn.BackColor = Color.FromArgb(2, 136, 209);
                _btn.Text = "배팅정지";
            }
            else
            {
                _btn.ForeColor = Color.Black;
                _btn.BackColor = Color.White;
                _btn.Text = "배팅진행";
            }
        }

        #region btnPR
        private void btnPR_Click(object sender, EventArgs e)
        {
            Button _button = sender as Button;
            powerBallReady(_button);
        }
        #endregion btnPR
        private void powerballFormat(Button _btn, ComboBox _L, TextBox _Pbm)
        {
            if (_bettingClosed)
            {
                MessageBox.Show("지금은 배팅이 종료되어 바꿀 수 없습니다. 진행 중에 변경 부탁드립니다.");
                return;
            }
            _L.ForeColor = Color.Black;
            _L.BackColor = Color.White;
            _L.Text = "1";
            int outValue = 0;
            bool _b = int.TryParse(Regex.Replace(txtBtMoneySettingL1.Text, @"\D", ""), out outValue);
            if (_b)
            {
                _Pbm.Text = outValue.ToString();
            }
        }
        #region btnPF
        private void btnPF01_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF1, CBL1, txtBoxPBM1);
        }

        private void btnPF02_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF2, CBL2, txtBoxPBM2);
        }

        private void btnPF03_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF3, CBL3, txtBoxPBM3);
        }

        private void btnPF04_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF4, CBL4, txtBoxPBM4);
        }
        private void btnPF05_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF5, CBL5, txtBoxPBM5);
        }


        private void btnPF06_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF6, CBL6, txtBoxPBM6);
        }

        private void btnPF07_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF7, CBL7, txtBoxPBM7);
        }


        private void btnPF08_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF8, CBL8, txtBoxPBM8);
        }

        private void btnPF09_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF9, CBL9, txtBoxPBM9);
        }


        private void btnPF10_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF10, CBL10, txtBoxPBM10);
        }

        private void btnPF11_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF11, CBL11, txtBoxPBM11);
        }



        private void btnPF12_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF12, CBL12, txtBoxPBM12);
        }



        private void btnPF13_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF13, CBL13, txtBoxPBM13);
        }


        private void btnPF14_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF14, CBL14, txtBoxPBM14);
        }
        private void btnPF15_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF15, CBL15, txtBoxPBM15);
        }


        private void btnPF16_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF16, CBL16, txtBoxPBM16);
        }



        private void btnPF17_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF17, CBL17, txtBoxPBM17);
        }


        private void btnPF18_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF18, CBL18, txtBoxPBM18);
        }

        private void btnPF19_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF19, CBL19, txtBoxPBM19);
        }



        private void btnPF20_Click(object sender, EventArgs e)
        {
            powerballFormat(btnPF20, CBL20, txtBoxPBM20);
        }

        #endregion btnPF
        private void manualModeRadioButton_CheckedChanged(object sender, EventArgs e)
        {
            txtLogAdd("수동 모드로 선택되었습니다. 해당 모드는 사용자가 모든 픽스터를 선택하는 모드입니다.", Color.White);
            logger.Info("수동 모드를 선택하였습니다.");
        }
        private static int CurrentIndex
        {
            get;
            set;
        }
        private ListViewItem FindItem(string keyword, int startIndex)
        {
            for (int i = startIndex; i < allPicksterListView.Items.Count; i++)
            {
                ListViewItem item = allPicksterListView.Items[i];
                bool isContains = item.SubItems[0].Text.Equals(keyword);
                if (isContains)
                {
                    allPicksterListView.EnsureVisible(allPicksterListView.Items.Count - (allPicksterListView.Items.Count - i));
                    return item;
                }
            }
            return null;
        }

        private void SelectItem(ListViewItem item)
        {
            CurrentIndex = item.Index;

            allPicksterListView.MultiSelect = false;
            item.Selected = true;
            allPicksterListView.Select();
            allPicksterListView.MultiSelect = true;
        }
        private void btnFindPickster_Click(object sender, EventArgs e)
        {
            ListViewItem item = FindItem(textBoxFindPickster.Text, 0);
            //textBoxFindPickster
            if (item == null)
                MessageBox.Show("일치하는 데이터가 없습니다.");
            else
                SelectItem(item);
        }

        private void textBoxFindPickster_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                ListViewItem item = FindItem(textBoxFindPickster.Text, 0);
                //textBoxFindPickster
                if (item == null)
                    MessageBox.Show("일치하는 데이터가 없습니다.");
                else
                    SelectItem(item);
            }
            else
            {
                return;
            }
        }

        private void magnificationProcessing()
        {
            int outSum = 0;
            bool _sum = int.TryParse((Controls.Find("txtBtMoneySettingL1", true)[0] as TextBox).Text, out outSum);
            if (_sum)
            {
                for (int i = 1; i <= 14; i++)
                {
                    TextBox txtBtMoneySetting = (Controls.Find("txtBtMoneySettingL" + i.ToString(), true)[0] as TextBox);
                    if (i > 1)
                    {
                        textChangeMoneySetting(txtBtMoneySetting);
                    }
                    TextBox txtBtMoneySettingUp = (Controls.Find("txtBtMoneySettingL" + (i + 1).ToString(), true)[0] as TextBox);
                    TextBox GetWinMoney = (Controls.Find("GetWinMoney" + (i).ToString(), true)[0] as TextBox);
                    TextBox GetWinProFit = (Controls.Find("GetWinProFit" + (i).ToString(), true)[0] as TextBox);
                    ComboBox magnification = (Controls.Find("magnification" + (i + 1).ToString(), true)[0] as ComboBox);
                    TextBox txtBoxSum = (Controls.Find("txtBoxSum" + (i + 1).ToString(), true)[0] as TextBox);

                    int outValue = 0;
                    bool _b = int.TryParse(Regex.Replace(txtBtMoneySetting.Text, @"\D", ""), out outValue);
                    if (_b)
                    {
                        Double _magnification = Double.Parse(magnification.Text);
                        if (_magnification == 0)
                        {
                            txtBtMoneySettingUp.Text = "-1";
                        }
                        else
                        {
                            if (outValue > 30000000)
                            {
                                txtBtMoneySettingUp.Text = "0";
                            }
                            else
                            {

                                txtBtMoneySettingUp.Text = ((int)(outValue * _magnification)).ToString();
                            }
                        }
                        int getwinmoney = (int)(outValue * 1.95);
                        GetWinMoney.Text = UtilModel.StringFormatChanged(getwinmoney);
                        int winProfit = getwinmoney - outSum;
                        if (winProfit < 0)
                        {
                            winProfit = 0;
                        }
                        GetWinProFit.Text = UtilModel.StringFormatChanged(winProfit);

                        _b = int.TryParse(Regex.Replace(txtBtMoneySettingUp.Text, @"\D", ""), out outValue);
                        if (_b)
                        {
                            outSum += outValue;
                            txtBoxSum.Text = UtilModel.StringFormatChanged(outSum);
                        }
                        else
                        {
                            txtBoxSum.Text = "100";
                        }
                    }
                }
            }
        }
        private void btnMagnificationProcessing_Click(object sender, EventArgs e)
        {
            magnificationProcessing();
        }
        private void DecalModeCalculation_Click(object sender, EventArgs e)
        {
            DecalModeCalculationProcessing();
        }
        private void DecalModeCalculationProcessing()
        {
            int outValueMagnification = 0;
            TextBox MiniGameDecalMoneySettingL;
            Double DoubleMagnification;
            ComboBox magnification;
            TextBox NextMiniGameDecalMoneySettingL;
            for (int i = 1; i <= 11; i++)
            {
                MiniGameDecalMoneySettingL = (Controls.Find("MiniGameDecalMoneySettingL" + i.ToString(), true)[0] as TextBox);
                int.TryParse(Regex.Replace(MiniGameDecalMoneySettingL.Text, @"\D", ""), out int outValue);

                if (outValue >= 100)
                {
                    magnification = (Controls.Find("DecalMagnification" + (i + 1).ToString(), true)[0] as ComboBox);
                    DoubleMagnification = Double.Parse(magnification.Text);
                    NextMiniGameDecalMoneySettingL = (Controls.Find("MiniGameDecalMoneySettingL" + (i + 1).ToString(), true)[0] as TextBox);
                    outValueMagnification = (int)(outValue * DoubleMagnification);
                    NextMiniGameDecalMoneySettingL.Text = UtilModel.StringFormatChanged(outValueMagnification);
                }
            }
        }
        private void TermModeCalculation_Click(object sender, EventArgs e)
        {
            TermModeCalculationProcessing();
        }

        private void TermModeCalculationProcessing()
        {
            int outValueMagnification = 0;
            TextBox MiniGameDecalMoneySettingL;
            Double DoubleMagnification;
            ComboBox magnification;
            TextBox NextMiniGameDecalMoneySettingL;
            for (int i = 1; i <= 11; i++)
            {
                MiniGameDecalMoneySettingL = (Controls.Find("MiniGameTermMoneySettingL" + i.ToString(), true)[0] as TextBox);
                int.TryParse(Regex.Replace(MiniGameDecalMoneySettingL.Text, @"\D", ""), out int outValue);

                if (outValue >= 100)
                {
                    magnification = (Controls.Find("TermMagnification" + (i + 1).ToString(), true)[0] as ComboBox);
                    DoubleMagnification = Double.Parse(magnification.Text);
                    NextMiniGameDecalMoneySettingL = (Controls.Find("MiniGameTermMoneySettingL" + (i + 1).ToString(), true)[0] as TextBox);
                    outValueMagnification = (int)(outValue * DoubleMagnification);
                    NextMiniGameDecalMoneySettingL.Text = UtilModel.StringFormatChanged(outValueMagnification);
                }
            }
        }
        private void PatternEqualModeCalculation_Click(object sender, EventArgs e)
        {
            PatternEqualModeCalculationProcessing();
        }

        private void PatternEqualModeCalculationProcessing()
        {
            int outValueMagnification = 0;
            TextBox MiniGameDecalMoneySettingL;
            Double DoubleMagnification;
            ComboBox magnification;
            TextBox NextMiniGameDecalMoneySettingL;
            for (int i = 1; i <= 11; i++)
            {
                MiniGameDecalMoneySettingL = (Controls.Find("MiniGamePatterEqualMoneyLevel" + i.ToString(), true)[0] as TextBox);
                int.TryParse(Regex.Replace(MiniGameDecalMoneySettingL.Text, @"\D", ""), out int outValue);

                if (outValue >= 100)
                {
                    magnification = (Controls.Find("PatternEqualMagnification" + (i + 1).ToString(), true)[0] as ComboBox);
                    DoubleMagnification = Double.Parse(magnification.Text);
                    NextMiniGameDecalMoneySettingL = (Controls.Find("MiniGamePatterEqualMoneyLevel" + (i + 1).ToString(), true)[0] as TextBox);
                    outValueMagnification = (int)(outValue * DoubleMagnification);
                    NextMiniGameDecalMoneySettingL.Text = UtilModel.StringFormatChanged(outValueMagnification);
                }
            }
        }
        private void cruiseBetMoeyCalcProcess_Click(object sender, EventArgs e)
        {
            Cruise_Bet_lMode_Calculation_Processing();
        }
        private void Cruise_Bet_lMode_Calculation_Processing()
        {
            int outValueMagnification = 0;
            TextBox CruiseBetMoneyLevel;
            Double DoubleMagnification;
            ComboBox magnification;
            TextBox NextMiniGameDecalMoneySettingL;
            for (int i = 1; i <= 5; i++)
            {
                CruiseBetMoneyLevel = (Controls.Find("CruiseBetMoneyLevel" + i.ToString(), true)[0] as TextBox);
                int.TryParse(Regex.Replace(CruiseBetMoneyLevel.Text, @"\D", ""), out int outValue);

                if (outValue >= 100)
                {
                    magnification = (Controls.Find("cruiseBetMagnification" + (i + 1).ToString(), true)[0] as ComboBox);
                    DoubleMagnification = Double.Parse(magnification.Text);
                    NextMiniGameDecalMoneySettingL = (Controls.Find("CruiseBetMoneyLevel" + (i + 1).ToString(), true)[0] as TextBox);
                    outValueMagnification = (int)(outValue * DoubleMagnification);
                    NextMiniGameDecalMoneySettingL.Text = UtilModel.StringFormatChanged(outValueMagnification);
                }
            }
        }
        private void textChangeMoneySetting(TextBox txtBox)
        {
            try
            {
                int outValue = 0;
                bool _b = int.TryParse(Regex.Replace(txtBox.Text, @"\D", ""), out outValue);
                if (_b)
                {
                    txtBox.Text = UtilModel.StringFormatChanged(outValue);
                }
            }
            catch (FormatException a)
            {
                Console.WriteLine(a.Message);
            }
            catch (OverflowException o)
            {
                Console.WriteLine(o.Message);
            }
        }
        private void btn1ConfigLoad_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("1번 설정을 불러오시겠습니까?", "설정 불러오기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLLoad("setting1");
            }
        }
        private void btn2ConfigLoad_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("2번 설정을 불러오시겠습니까?", "설정 불러오기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLLoad("setting2");
            }
        }
        private void btn3ConfigLoad_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("3번 설정을 불러오시겠습니까?", "설정 불러오기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLLoad("setting3");
            }
        }
        private void btn4ConfigLoad_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("4번 설정을 불러오시겠습니까?", "설정 불러오기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLLoad("setting4");
            }
        }
        private void btn5ConfigLoad_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("5번 설정을 불러오시겠습니까?", "설정 불러오기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLLoad("setting5");
            }
        }
        private void btn1ConfigSave_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("1번 설정을 저장하시겠습니까?", "설정 저장하기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLModifier("setting1");
                MessageBox.Show("1번 설정을 저장 완료하였습니다");
            }
        }
        private void btn2ConfigSave_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("2번 설정을 저장하시겠습니까?", "설정 저장하기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLModifier("setting2");
                MessageBox.Show("2번 설정을 저장 완료하였습니다");
            }
        }
        private void btn3ConfigSave_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("3번 설정을 저장하시겠습니까?", "설정 저장하기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLModifier("setting3");
                MessageBox.Show("3번 설정을 저장 완료하였습니다");
            }
        }
        private void btn4ConfigSave_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("4번 설정을 저장하시겠습니까?", "설정 저장하기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLModifier("setting4");
                MessageBox.Show("4번 설정을 저장 완료하였습니다");
            }
        }
        private void btn5ConfigSave_Click(object sender, EventArgs e)
        {
            DialogResult result = MessageBox.Show("5번 설정을 저장하시겠습니까?", "설정 저장하기", MessageBoxButtons.YesNo);
            if (result == DialogResult.Yes)
            {
                XMLModifier("setting5");
                MessageBox.Show("5번 설정을 저장 완료하였습니다");
            }
        }

        // <summary>
        // 자식노드 생성하고 값넣기
        // </summary>
        // <param name="xmlDoc">
        // <param name="name">
        // <param name="innerXml">
        // <return></returns>

        protected XmlNode CreateNode(XmlDocument xmlDoc, string name, string innerXml)
        {
            XmlNode node = xmlDoc.CreateElement(string.Empty, name, string.Empty);
            node.InnerXml = innerXml;

            return node;
        }

        // <summary>
        // 수정 삭제하기
        // </summary>
        private void XMLModifier(String settingNum)
        {
            try
            {
                // xml 문서를 불러온다.
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load("settings.xml");

                // 첫노드를 잡아주고 하위 노드를 서냍ㄱ한다.
                XmlNode Firstnode = XmlDoc.DocumentElement;
                XmlElement SubNode = (XmlElement)Firstnode.SelectSingleNode(settingNum);

                // 하위 노드 특성에 날짜를 입력하기를 원할때 (추가를 원할때)
                //SubNode.SetAttribute("DATA", DateTime.Today.ToString());

                // 하위 노드를 추가, 삭제, 수정하고 싶을때 (Book(보다 하위)
                // 아래 두줄은 삭제할때나 수정할때 사용하면 된다.
                XmlNode DeleteNode;

                for (int i = 1; i <= 15; i++)
                {
                    DeleteNode = SubNode.SelectSingleNode("levelmoney" + i);
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);

                        TextBox _msl = (Controls.Find("txtBtMoneySettingL" + i.ToString(), true)[0] as TextBox);
                        int outValue = 0;
                        bool _b = int.TryParse(Regex.Replace(_msl.Text, @"\D", ""), out outValue);
                        if (_b)
                        {
                            SubNode.AppendChild(CreateNode(XmlDoc, "levelmoney" + i, _msl.Text));
                        }
                    }
                }

                for (int i = 2; i <= 15; i++)
                {
                    DeleteNode = SubNode.SelectSingleNode("magnification" + i);
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);

                        ComboBox _mag = (Controls.Find("magnification" + i.ToString(), true)[0] as ComboBox);
                        SubNode.AppendChild(CreateNode(XmlDoc, "magnification" + i, _mag.Text));
                    }
                }
                //magnification2
                // 아래 한 줄은 추가, 수정할때 사용한다.


                // 위에 했던 행위들을 바꿔준다.
                // ReplaceChild(SubNode, SubNode); 에서 ()안에 앞에 노드는 변경할 노드 뒤에 노드는 변경당할 노드를 적어준다.
                //Firstnode.ReplaceChild(SubNode, SubNode);

                XmlDoc.Save("settings.xml");
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        private void XMLLoad(String settingNum)
        {
            try
            {
                // xml 문서를 불러온다.
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load("settings.xml");

                // 첫노드를 잡아주고 하위 노드를 선택한다.
                XmlNode Firstnode = XmlDoc.DocumentElement;
                XmlElement SubNode = (XmlElement)Firstnode.SelectSingleNode(settingNum);

                XmlNode selectNode;

                for (int i = 1; i <= 15; i++)
                {
                    selectNode = SubNode.SelectSingleNode("levelmoney" + i);
                    if (selectNode != null)
                    {
                        TextBox _msl = (Controls.Find("txtBtMoneySettingL" + i.ToString(), true)[0] as TextBox);
                        _msl.Text = selectNode.InnerText;
                    }
                }

                for (int i = 2; i <= 15; i++)
                {
                    selectNode = SubNode.SelectSingleNode("magnification" + i);
                    if (selectNode != null)
                    {
                        ComboBox _mag = (Controls.Find("magnification" + i.ToString(), true)[0] as ComboBox);
                        _mag.Text = selectNode.InnerText;
                    }
                }

            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        private void LevelChangeSelectedindexChange(ComboBox _level, int num)
        {
            var _msl = (Controls.Find("txtBtMoneySettingL" + _level.Text, true)[0] as TextBox);
            var _betMoney = (Controls.Find("txtBoxPBM" + num, true)[0] as TextBox);

            _level.ForeColor = Color.Black;
            _level.BackColor = Color.White;

            int colorNum = int.Parse(_level.Text) - 2;
            if (colorNum < 0)
            {
                colorNum = 0;
            }
            if (colorNum > 9)
            {
                colorNum = 9;
            }
            if (_betMoney != null)
            {
                int outValue = 0;
                bool _b = int.TryParse(Regex.Replace(_msl.Text, @"\D", ""), out outValue);
                if (_b)
                {
                    _betMoney.Text = outValue.ToString();
                    if (colorNum < 2)
                    {
                        _betMoney.ForeColor = Color.Black;
                    }
                    else
                    {
                        _betMoney.ForeColor = Color.White;
                    }
                    _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, colorNum]));

                }
            }

            logger.Info("사용자가 " + num + "번째 픽스터의 레벨을 " + _level.Text + " 레벨로 변경하였습니다");
        }

        private void CBL1_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL1, 1);
        }

        private void CBL2_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL2, 2);
        }

        private void CBL3_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL3, 3);
        }

        private void CBL4_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL4, 4);
        }

        private void CBL5_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL5, 5);
        }

        private void CBL6_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL6, 6);
        }

        private void CBL7_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL7, 7);
        }

        private void CBL8_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL8, 8);
        }

        private void CBL9_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL9, 9);
        }

        private void CBL10_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL10, 10);
        }

        private void CBL11_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL11, 11);
        }

        private void CBL12_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL12, 12);
        }

        private void CBL13_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL13, 13);
        }

        private void CBL14_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL14, 14);
        }

        private void CBL15_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL15, 15);
        }

        private void CBL16_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL16, 16);
        }

        private void CBL17_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL17, 17);
        }

        private void CBL18_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL18, 18);
        }

        private void CBL19_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL19, 19);
        }

        private void CBL20_SelectedIndexChanged(object sender, EventArgs e)
        {
            LevelChangeSelectedindexChange(CBL20, 20);
        }

        void findUser(Button _pickster)
        {
            ListViewItem item = FindItem(_pickster.Text, 0);
            if (item == null)
                txtLogAdd("일치하는 데이터가 없습니다.", Color.White);
            else
                SelectItem(item);
        }

        private void autoRefillButton_Click(object sender, EventArgs e)
        {
            if (!_bettingClosed)
            {
                systemPicksterAutoRefill();
            }
        }

        private Boolean systemPicksterAutoRefill()
        {
            String pP = "";

            int n = 1;
            for (int i = 0; i < arrayNum; i++)
            {
                if (_picksterInformation[i, 0] == null)
                {
                    break;
                }

                if (_picksterInformation[i, 0].Contains("*"))
                {
                    // 파워픽 4, 일반픽 17
                    pP = _picksterInformation[i, 4];
                    if (!pP.Contains("P"))
                    {
                        n++;
                    }
                }
            }

            String[] arrayPickster = new String[n];
            int num = 0;
            for (int i = 0; i < arrayNum; i++)
            {
                if (_picksterInformation[i, 0] == null)
                {
                    break;
                }
                if (_picksterInformation[i, 0].Contains("*"))
                {
                    // 파워픽 4, 일반픽 17
                    pP = _picksterInformation[i, 4];
                    if (!pP.Contains("P"))
                    {
                        arrayPickster[num++] = _picksterInformation[i, 0];
                    }
                }
            }
            var rng = new Random();
            rng.Shuffle(arrayPickster);
            Random rand = new Random(); //랜덤선언 _picksterInformation[k, 0]
            int r = 0;

            for (int _find = 1; _find <= accountNumber; _find++)
            {
                String strpickster = arrayPickster[_find];
                if (strpickster != null)
                {
                    for (int _find2 = 1; _find2 <= accountNumber; _find2++)
                    {
                        Button _pickster = (Controls.Find("BoxPickster" + _find2.ToString(), true)[0] as Button);
                        if (_pickster.Text.Equals(strpickster))
                        {
                            r = rand.Next(0, (arrayPickster.Length - 1));
                            strpickster = arrayPickster[r];
                            break;
                        }
                    }

                    int index = Array.IndexOf(_picksterInformation, strpickster);
                    if (!String.IsNullOrEmpty(_picksterInformation[index, 0]))
                    {
                        Button _pickster = (Controls.Find("BoxPickster" + _find.ToString(), true)[0] as Button);
                        TextBox _ballType = (Controls.Find("txtBoxBallType" + _find.ToString(), true)[0] as TextBox);
                        TextBox _boxPr = (Controls.Find("txtBoxPR" + _find.ToString(), true)[0] as TextBox);
                        TextBox _boxPs = (Controls.Find("txtBoxPS" + _find.ToString(), true)[0] as TextBox);
                        _pickster.Text = _picksterInformation[index, 0].ToString(); // 픽스터 이름
                        _ballType.Text = _picksterInformation[index, 1].ToString(); // 픽스터 이름
                        _boxPr.Text = _picksterInformation[index, 2].ToString(); // 픽스터 이름
                        _boxPs.Text = _picksterInformation[index, 3].ToString(); // 픽스터 이름
                    }
                }
            }
            return true;
        }

        private void PatternPickUse_CheckedChanged(object sender, EventArgs e)
        {
            if (PatternPickUse.Checked)
            {
                resultMarkCheckBox.Checked = false;
                samePersonCheckBox.Checked = false;
            }
        }

        private void LoadPicksterNumber()
        {
            int _r = 0;
            if (systemPickUseCheck.Checked)
            {
                int loadNum = int.Parse(loadPicksterNumber.Text);
                if (loadNum == 10)
                {
                    _r = selectRandom.Next(10001, 10491);

                    loadPickster_min = _r;
                    loadPickster_max = _r + 9;
                }
                else if (loadNum == 100)
                {
                    _r = selectRandom.Next(10001, 10401);

                    loadPickster_min = _r;
                    loadPickster_max = _r + 99;
                }
                else if (loadNum == 50)
                {
                    _r = selectRandom.Next(10001, 10451);

                    loadPickster_min = _r;
                    loadPickster_max = _r + 49;
                }
                else if (loadNum == 150)
                {
                    _r = selectRandom.Next(10001, 10351);

                    loadPickster_min = _r;
                    loadPickster_max = _r + 149;
                }
                else if (loadNum == 200)
                {
                    _r = selectRandom.Next(10001, 10301);

                    loadPickster_min = _r;
                    loadPickster_max = _r + 199;
                }
                else if (loadNum == 250)
                {
                    _r = selectRandom.Next(10001, 10251);

                    loadPickster_min = _r;
                    loadPickster_max = _r + 249;
                }
                else if (loadNum == 300)
                {
                    _r = selectRandom.Next(10001, 10201);

                    loadPickster_min = _r;
                    loadPickster_max = _r + 299;
                }
                else
                {
                    _r = selectRandom.Next(10001, 10401);

                    loadPickster_min = _r;
                    loadPickster_max = _r + 99;
                }

                txtLogAdd("[" + loadPickster_min + "] ~ [" + loadPickster_max + "] 의 픽스터를 불러옵니다..", Color.White);
            }
            else
            {
                loadPickster_min = 0;
                loadPickster_max = 0;
            }
        }
        private void systemPickUseCheck_CheckedChanged(object sender, EventArgs e)
        {
            LoadPicksterNumber();
        }

        private void loadPicksterNumber_SelectedIndexChanged(object sender, EventArgs e)
        {
            LoadPicksterNumber();
        }
        private void listView1_MouseDoubleClick(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left)
            {
                if (allPicksterListView.SelectedItems.Count == 1)
                {
                    ListView.SelectedListViewItemCollection items = allPicksterListView.SelectedItems;
                    ListViewItem lvItem = items[0];
                    string picksterName = lvItem.SubItems[0].Text;

                    if (!samePersonCheckBox.Checked)
                    {
                        Boolean _bool = false;
                        int findNum = 0;
                        for (int _find = 1; _find <= accountNumber; _find++)
                        {
                            Button _pickster = (Controls.Find("BoxPickster" + _find.ToString(), true)[0] as Button);
                            if (_pickster.Text.Equals(picksterName))
                            {
                                findNum = _find;
                                _bool = true;
                                break;
                            }
                        }
                        if (_bool)
                        {
                            txtLogAdd("이미 존재하는 픽스터입니다. [" + findNum + "]번째 칸에 있습니다.", Color.FromArgb(230, 38, 38));
                            return;
                        }
                    }
                    for (int _find = 1; _find <= accountNumber; _find++)
                    {
                        Button _pickster = (Controls.Find("BoxPickster" + _find.ToString(), true)[0] as Button);
                        if (_pickster.Text.Contains("--"))
                        {
                            _pickster.Text = picksterName; // 픽스터 이름
                            TextBox _ballType = (Controls.Find("txtBoxBallType" + _find.ToString(), true)[0] as TextBox);
                            TextBox _boxPr = (Controls.Find("txtBoxPR" + _find.ToString(), true)[0] as TextBox);
                            TextBox _boxPs = (Controls.Find("txtBoxPS" + _find.ToString(), true)[0] as TextBox);
                            _ballType.Text = "--"; // 픽스터 이름
                            _boxPr.Text = "--"; // 픽스터 이름
                            _boxPs.Text = "--"; // 픽스터 이름
                            break;
                        }
                    }
                }
            }
        }

        private void moneyUp_TextChanged(object sender, EventArgs e)
        {
            TextBox moneyUpText = sender as TextBox;
            string lgsText;

            lgsText = Regex.Replace(moneyUpText.Text, @"\D", "");

            if (!string.IsNullOrEmpty(lgsText))
            {
                Double money = Convert.ToDouble(lgsText);

                if (realOrVirtualMode == 1)
                {
                    if (money > 1000000)
                    {
                        money = 1000000;
                        txtLogAdd("가상 모드에서는 100만원 이상 배팅할 수 없습니다.", Color.FromArgb(230, 38, 38));
                    }
                }
                if (money >= 10000000)
                {
                    moneyUp.ForeColor = Color.FromArgb(255, Color.FromArgb(0xFFFFFF));
                    moneyUp.BackColor = Color.FromArgb(255, Color.FromArgb(0x000000));
                }
                else if (money >= 5000000)
                {
                    moneyUp.ForeColor = Color.FromArgb(255, Color.FromArgb(0xFFFFFF));
                    moneyUp.BackColor = Color.FromArgb(255, Color.FromArgb(0x212121));
                }
                else if (money >= 3000000)
                {
                    moneyUp.ForeColor = Color.FromArgb(255, Color.FromArgb(0xFFFFFF));
                    moneyUp.BackColor = Color.FromArgb(255, Color.FromArgb(0x424242));
                }
                else if (money >= 1000000)
                {
                    moneyUp.ForeColor = Color.FromArgb(255, Color.FromArgb(0xFFFFFF));
                    moneyUp.BackColor = Color.FromArgb(255, Color.FromArgb(0x616161));
                }
                else if (money == 0)
                {
                    moneyUp.ForeColor = Color.FromArgb(255, Color.FromArgb(0x757575));
                    moneyUp.BackColor = Color.FromArgb(255, Color.FromArgb(0xFFFFFF));
                }
                else if (money < 0)
                {
                    money = 0;
                    moneyUp.ForeColor = Color.FromArgb(255, Color.FromArgb(0x757575));
                    moneyUp.BackColor = Color.FromArgb(255, Color.FromArgb(0xFFFFFF));
                }
                else
                {
                    moneyUp.ForeColor = Color.FromArgb(255, Color.FromArgb(0x000000));
                    moneyUp.BackColor = Color.FromArgb(255, Color.FromArgb(0xFFFFFF));
                }

                moneyUpText.Text = String.Format("{0:#,##0}", money);
                moneyUpText.SelectionStart = moneyUpText.TextLength;
                moneyUpText.SelectionLength = 0;
            }
            else
            {
                moneyUpText.Text = "0";
                moneyUpText.SelectionStart = moneyUpText.TextLength;
                moneyUpText.SelectionLength = 0;
            }
        }

        private void moneyChangeUp(int upMoney)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(moneyUp.Text, @"\D", ""), out money);
            if (result)
            {
                moneyUp.Text = (money + upMoney).ToString();
            }
            else
            {
                moneyUp.Text = "0";
            }
        }
        private void moneyUp1000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(1000);
        }

        private void moneyUp5000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(5000);
        }

        private void moneyUp10000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(10000);
        }
        private void moneyUp30000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(30000);
        }
        private void money50000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(50000);
        }

        private void moneyUp100000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(100000);
        }
        private void moneyUp300000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(300000);
        }

        private void moneyUp500000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(500000);
        }

        private void moneyUp1000000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(1000000);
        }

        private void moneyUp5000000_Click(object sender, EventArgs e)
        {
            moneyChangeUp(5000000);
        }

        private void moneyUp100_Click(object sender, EventArgs e)
        {
            moneyChangeUp(100);
        }
        private void moneyUpInit_Click(object sender, EventArgs e)
        {
            moneyUp.Text = "0";
        }


        private void registUserPickster(string selectPick, int selectPickBetMoney)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(UtilModel.configFileDownloadUrl + "registUserPickster.php");
            sb.AppendFormat("?picksterName={0}", UtilModel.UserProfile);
            sb.AppendFormat("&inning={0}", PowerBall_Now_All_Inning.ToString());

            sb.AppendFormat("&pp={0}", selectPick);
            if (selectPick.Equals("파홀"))
            {
                sb.AppendFormat("&betmoney={0}", selectPickBetMoney);
            }
            else if (selectPick.Equals("파짝"))
            {
                sb.AppendFormat("&betmoney={0}", selectPickBetMoney);
            }
            else if (selectPick.Equals("파언더"))
            {
                sb.AppendFormat("&betmoney={0}", selectPickBetMoney);
            }
            else if (selectPick.Equals("파오버"))
            {
                sb.AppendFormat("&betmoney={0}", selectPickBetMoney);
            }
            else if (selectPick.Equals("일홀"))
            {
                sb.AppendFormat("&betmoney={0}", selectPickBetMoney);
            }
            else if (selectPick.Equals("일짝"))
            {
                sb.AppendFormat("&betmoney={0}", selectPickBetMoney);
            }
            else if (selectPick.Equals("일언더"))
            {
                sb.AppendFormat("&betmoney={0}", selectPickBetMoney);
            }
            else if (selectPick.Equals("일오버"))
            {
                sb.AppendFormat("&betmoney={0}", selectPickBetMoney);
            }
            UtilModel.MakeAsyncRequest(sb.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
        }
        int DirectBet_PowerBallOddMoney = 0;
        int DirectBet_PowerBallEvenMoney = 0;
        int DirectBet_PowerBallUnderMoney = 0;
        int DirectBet_PowerBallOverMoney = 0;
        int DirectBet_NormalBallOddMoney = 0;
        int DirectBet_NormalBallEvenMoney = 0;
        int DirectBet_NormalBallUnderMoney = 0;
        int DirectBet_NormalBallOverMoney = 0;
        string DrirectBet_GameType = string.Empty;
        private void directBetButton_Click(object sender, EventArgs e)
        {
            if (!GameIsStartStattus)
            {
                txtLogAdd("배팅 시작 버튼을 눌러주세요!", Color.White);
                return;
            }
            if (DirectBettingProcessing)
            {
                txtLogAdd("직접 배팅 처리 중입니다. 잠시 후 재시도하여 주시기 바랍니다!", Color.White);
                return;
            }
            directbetMoney = 0;
            bool _result = int.TryParse(Regex.Replace(moneyUp.Text, @"\D", ""), out directbetMoney);
            if (_result)
            {
                if (directbetMoney <= 0)
                {
                    MessageBox.Show("배팅금액이 0원입니다.");
                    DirectBet_PowerBallOddMoney = 0;
                    DirectBet_PowerBallEvenMoney = 0;
                    DirectBet_PowerBallUnderMoney = 0;
                    DirectBet_PowerBallOverMoney = 0;
                    DirectBet_NormalBallOddMoney = 0;
                    DirectBet_NormalBallEvenMoney = 0;
                    DirectBet_NormalBallUnderMoney = 0;
                    DirectBet_NormalBallOverMoney = 0;
                    return;
                }
            }
            else
            {
                return;
            }
            DirectBetPickString = string.Empty;
            DrirectBet_GameType = string.Empty;
            if (Direct_Bet_Power_Odd)
            {
                DrirectBet_GameType = "PWB";
                DirectBetPickString = "파워볼 [홀]";
                DirectBet_PowerBallOddMoney = directbetMoney;
            }
            else if (Direct_Bet_Power__PEven)
            {
                DrirectBet_GameType = "PWB";
                DirectBetPickString = "파워볼 [짝]";
                DirectBet_PowerBallEvenMoney = directbetMoney;
            }
            else if (Direct_Bet_Power_Under)
            {
                DrirectBet_GameType = "PWB";
                DirectBetPickString = "파워볼 [언더]";
                DirectBet_PowerBallUnderMoney = directbetMoney;
            }
            else if (Direct_Bet_Power_Over)
            {
                DrirectBet_GameType = "PWB";
                DirectBetPickString = "파워볼 [오버]";
                DirectBet_PowerBallOverMoney = directbetMoney;
            }
            else if (Direct_Bet_Normal_Odd)
            {
                DrirectBet_GameType = "PWB";
                DirectBetPickString = "일반볼 [홀]";
                DirectBet_NormalBallOddMoney = directbetMoney;
            }
            else if (Direct_Bet_Normal_Even)
            {
                DrirectBet_GameType = "PWB";
                DirectBetPickString = "일반볼 [짝]";
                DirectBet_NormalBallEvenMoney = directbetMoney;
            }
            else if (Direct_Bet_Normal_Under)
            {
                DrirectBet_GameType = "PWB";
                DirectBetPickString = "일반볼 [언더]";
                DirectBet_NormalBallUnderMoney = directbetMoney;
            }
            else if (Direct_Bet_Normal_Over)
            {
                DrirectBet_GameType = "PWB";
                DirectBetPickString = "일반볼 [오버]";
                DirectBet_NormalBallOverMoney = directbetMoney;
                // 파워볼 조합
            }
            else if (Direct_Bet_Mix_Power_OddUnder)
            {
                DrirectBet_GameType = "PWB_PB_MIX";
                DirectBetPickString = "파워볼 조합 [홀][언더]";
                DirectBet_PowerBallOddMoney = directbetMoney;
            }
            else if (Direct_Bet_Mix_Power_OddOver)
            {
                DrirectBet_GameType = "PWB_PB_MIX";
                DirectBetPickString = "파워볼 조합 [홀][오버]";
                DirectBet_PowerBallEvenMoney = directbetMoney;
            }
            else if (Direct_Bet_Mix_Power_EvenUnder)
            {
                DrirectBet_GameType = "PWB_PB_MIX";
                DirectBetPickString = "파워볼 조합 [짝][언더]";
                DirectBet_PowerBallUnderMoney = directbetMoney;
            }
            else if (Direct_Bet_Mix_Power_EvenOver)
            {
                DrirectBet_GameType = "PWB_PB_MIX";
                DirectBetPickString = "파워볼 조합 [짝][오버]";
                DirectBet_PowerBallOverMoney = directbetMoney;
                // 일반볼 조합
            }
            else if (Direct_Bet_Mix_Normal_OddUnder)
            {
                DrirectBet_GameType = "PWB_NB_MIX";
                DirectBetPickString = "일반볼 조합 [홀][언더]";
                DirectBet_PowerBallOddMoney = directbetMoney;
            }
            else if (Direct_Bet_Mix_Normal_OddOver)
            {
                DrirectBet_GameType = "PWB_NB_MIX";
                DirectBetPickString = "일반볼 조합 [홀][오버]";
                DirectBet_PowerBallEvenMoney = directbetMoney;
            }
            else if (Direct_Bet_Mix_Normal_EvenUnder)
            {
                DrirectBet_GameType = "PWB_NB_MIX";
                DirectBetPickString = "일반볼 조합 [짝][언더]";
                DirectBet_PowerBallUnderMoney = directbetMoney;
            }
            else if (Direct_Bet_Mix_Normal_EvenOver)
            {
                DrirectBet_GameType = "PWB_NB_MIX";
                DirectBetPickString = "일반볼 조합 [짝][오버]";
                DirectBet_PowerBallOverMoney = directbetMoney;

                // 파워사다리
            }
            else if (Direct_Bet_Ladder_Left)
            {
                DrirectBet_GameType = "PSA";
                DirectBetPickString = "파워 사다리 [좌]";
                DirectBet_PowerBallOddMoney = directbetMoney;
            }
            else if (Direct_Bet_Ladder_Right)
            {
                DrirectBet_GameType = "PSA";
                DirectBetPickString = "파워 사다리 [우]";
                DirectBet_PowerBallEvenMoney = directbetMoney;
            }
            else if (Direct_Bet_Ladder_3)
            {
                DrirectBet_GameType = "PSA";
                DirectBetPickString = "파워 사다리 [3]";
                DirectBet_PowerBallUnderMoney = directbetMoney;
            }
            else if (Direct_Bet_Ladder_4)
            {
                DrirectBet_GameType = "PSA";
                DirectBetPickString = "파워사다리 [4]";
                DirectBet_PowerBallOverMoney = directbetMoney;
            }
            else if (Direct_Bet_Ladder_Odd)
            {
                DrirectBet_GameType = "PSA";
                DirectBetPickString = "파워사다리 [홀]";
                DirectBet_NormalBallOddMoney = directbetMoney;
            }
            else if (Direct_Bet_Ladder_Even)
            {
                DrirectBet_GameType = "PSA";
                DirectBetPickString = "파워사다리 [짝]";
                DirectBet_NormalBallEvenMoney = directbetMoney;
            }
            if (string.IsNullOrEmpty(DirectBetPickString))
            {
                txtLogAdd("선택된 픽이 없거나 선택을 할 수 없는 픽입니다.", Color.White);
                directBetInit();
                return;
            }
            betPanel2.Visible = true;
            betPanel2_pick.Text = DirectBetPickString;
            betPanel2_betMoney.Text = UtilModel.StringFormatChanged(directbetMoney);
        }
        private void directBetProcessing_Click(object sender, EventArgs e)
        {
            if (BettingProcessing)
            {
                txtLogAdd("현재 프로그램 배팅이 진행 중입니다.", Color.LightCoral);
                return;
            }
            if (BetRemainingTime > 290)
            {
                moneyUp.Text = "0";
                directBetInit();
                betPanel2.Visible = false;
                txtLogAdd("배팅 진행을 할 수 없습니다. 잠시 후 재시도 해주십시요.", Color.LightCoral);
                return;
            }
            if (DirectBettingProcessing)
            {
                txtLogAdd("직접 배팅 처리 중입니다. 잠시 후 재시도하여 주시기 바랍니다!", Color.White);
                return;
            }
            string selectPick = string.Empty;
            int selectPickBetMoney = 0;
            if (DrirectBet_GameType.Equals("PWB"))
            {
                if (DirectBet_PowerBallOddMoney > 0)
                {
                    selectPick = "파홀";
                    selectPickBetMoney = DirectBet_PowerBallOddMoney;
                }
                else if (DirectBet_PowerBallEvenMoney > 0)
                {
                    selectPick = "파짝";
                    selectPickBetMoney = DirectBet_PowerBallEvenMoney;
                }
                else if (DirectBet_PowerBallUnderMoney > 0)
                {
                    selectPick = "파언더";
                    selectPickBetMoney = DirectBet_PowerBallUnderMoney;
                }
                else if (DirectBet_PowerBallOverMoney > 0)
                {
                    selectPick = "파오버";
                    selectPickBetMoney = DirectBet_PowerBallOverMoney;
                }
                else if (DirectBet_NormalBallOddMoney > 0)
                {
                    selectPick = "일홀";
                    selectPickBetMoney = DirectBet_NormalBallOddMoney;
                }
                else if (DirectBet_NormalBallEvenMoney > 0)
                {
                    selectPick = "일짝";
                    selectPickBetMoney = DirectBet_NormalBallEvenMoney;
                }
                else if (DirectBet_NormalBallUnderMoney > 0)
                {
                    selectPick = "일언더";
                    selectPickBetMoney = DirectBet_NormalBallUnderMoney;
                }
                else if (DirectBet_NormalBallOverMoney > 0)
                {
                    selectPick = "일오버";
                    selectPickBetMoney = DirectBet_NormalBallOverMoney;
                }
            }

            TermInning = 0;
            startInning = 0;
            if (!string.IsNullOrEmpty(DrirectBet_GameType))
            {
                DirectBetStatus = false;
                ScreenCapture(this.Width, this.Height, this.Location);
                Driect_Bet_Mode_Random_Nonce = selectRandom.Next(100000, 999999);
                DirectBetPowerballBetting();
                if (selectPickBetMoney > 0 && userPicksterFollowCheckBox.Checked)
                {
                    selectPickBetMoney = (int)(selectPickBetMoney * int.Parse(userPicksterFollowModePercentTextBox.Text) * 0.01);
                    registUserPickster(selectPick, selectPickBetMoney);
                }
            }
            UserDirectBetComplete = true;
            moneyUp.Text = "0";
            directBetInit();
            betPanel2.Visible = false;
        }

        public void DirectBet_Processing()
        {
            try
            {
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += DirectBet_PowerBallOddMoney + DirectBet_PowerBallEvenMoney + DirectBet_PowerBallUnderMoney + DirectBet_PowerBallOverMoney
                        + DirectBet_NormalBallOddMoney + DirectBet_NormalBallEvenMoney + DirectBet_NormalBallUnderMoney + DirectBet_NormalBallOverMoney;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                    UtilModel.UserOwnMoney -= DirectBet_PowerBallOddMoney + DirectBet_PowerBallEvenMoney + DirectBet_PowerBallUnderMoney + DirectBet_PowerBallOverMoney
                        + DirectBet_NormalBallOddMoney + DirectBet_NormalBallEvenMoney + DirectBet_NormalBallUnderMoney + DirectBet_NormalBallOverMoney;

                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                    logger.Info("[직접배팅|파홀 : " + DirectBet_PowerBallOddMoney + "][파짝 : " + DirectBet_PowerBallEvenMoney + "][파언 : " + DirectBet_PowerBallUnderMoney + "][파오 : " + DirectBet_PowerBallOverMoney + "][일홀 : " + DirectBet_NormalBallOddMoney + "][일짝 : " + DirectBet_NormalBallEvenMoney + "][일언 : " + DirectBet_NormalBallUnderMoney + "][일오 : " + DirectBet_NormalBallOverMoney + "]");
                    DirectBetStatus = true;
                }
                else if (realOrVirtualMode == 0)
                {
                    StringBuilder stringBuilder = new StringBuilder();
                    stringBuilder.Append(UtilModel.UserSiteUrlAddress);
                    stringBuilder.Append(":8082/api/bet");
                    stringBuilder.AppendFormat("?userid={0}", UtilModel.UserId);
                    stringBuilder.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);
                    stringBuilder.AppendFormat("&gm={0}", DrirectBet_GameType);
                    stringBuilder.AppendFormat("&tdate={0}", TodayDate);
                    if (DrirectBet_GameType.Equals("PSA"))
                    {
                        stringBuilder.AppendFormat("&rno={0}", PowerBall_Now_TodayInning.ToString());
                    }
                    else
                    {
                        stringBuilder.AppendFormat("&rno={0}", PowerBall_Now_All_Inning.ToString());
                    }
                    if (DirectBet_PowerBallOddMoney > 0)
                    {
                        stringBuilder.AppendFormat("&pp1={0}", DirectBet_PowerBallOddMoney);
                    }
                    if (DirectBet_PowerBallEvenMoney > 0)
                    {
                        stringBuilder.AppendFormat("&pp2={0}", DirectBet_PowerBallEvenMoney);
                    }
                    if (DirectBet_PowerBallUnderMoney > 0)
                    {
                        stringBuilder.AppendFormat("&pp3={0}", DirectBet_PowerBallUnderMoney);
                    }
                    if (DirectBet_PowerBallOverMoney > 0)
                    {
                        stringBuilder.AppendFormat("&pp4={0}", DirectBet_PowerBallOverMoney);
                    }
                    if (DirectBet_NormalBallOddMoney > 0)
                    {
                        stringBuilder.AppendFormat("&pp5={0}", DirectBet_NormalBallOddMoney);
                    }
                    if (DirectBet_NormalBallEvenMoney > 0)
                    {
                        stringBuilder.AppendFormat("&pp6={0}", DirectBet_NormalBallEvenMoney);
                    }
                    if (DirectBet_NormalBallUnderMoney > 0)
                    {
                        stringBuilder.AppendFormat("&pp7={0}", DirectBet_NormalBallUnderMoney);
                    }
                    if (DirectBet_NormalBallOverMoney > 0)
                    {
                        stringBuilder.AppendFormat("&pp8={0}", DirectBet_NormalBallOverMoney);
                    }
                    stringBuilder.AppendFormat("&nonce={0}", Driect_Bet_Mode_Random_Nonce);

                    String Message = null;
                    Boolean _BoolResult = false;

                    int CountResult = 0;

                    while (!_BoolResult)
                    {
                        try
                        {
                            var returnMessage = UtilModel.MakeAsyncRequest(stringBuilder.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                _BoolResult = true;
                                continue;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + stringBuilder.ToString());
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    _BoolResult = true;
                                }
                                if (BetRemainingTime < 30)
                                {
                                    _BoolResult = true;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + stringBuilder.ToString());
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                _BoolResult = true;
                            }
                            if (BetRemainingTime < 30)
                            {
                                _BoolResult = true;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    if (!Message.Contains("ret_code"))
                    {
                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += DirectBet_PowerBallOddMoney + DirectBet_PowerBallEvenMoney + DirectBet_PowerBallUnderMoney + DirectBet_PowerBallOverMoney + DirectBet_NormalBallOddMoney + DirectBet_NormalBallEvenMoney + DirectBet_NormalBallUnderMoney + DirectBet_NormalBallOverMoney;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                            txtLogAdd("[" + PowerBall_Now_All_Inning + "] 직접 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            String bettingMoneyString = "[직접배팅|완료][" + PowerBall_Now_All_Inning + " 회][파홀:" + DirectBet_PowerBallOddMoney + "][파짝:" + DirectBet_PowerBallEvenMoney + "][파언더:" + DirectBet_PowerBallUnderMoney + "][파오버:" + DirectBet_PowerBallOverMoney + "][일홀:" + DirectBet_NormalBallOddMoney + "][일짝:" + DirectBet_NormalBallEvenMoney + "][일언더:" + DirectBet_NormalBallUnderMoney + "][일오버:" + DirectBet_NormalBallOverMoney + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            DirectBetStatus = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        private void DirectBetPowerballBetting()
        {
            DirectBettingProcessing = true;
            DirectBet_Processing();

            if (DirectBetStatus)
            {
                ListViewItem item;
                if (DirectBet_PowerBallOddMoney > 0)
                {
                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    if (DrirectBet_GameType.Equals("PWB"))
                    {
                        item.SubItems.Add("파워");
                        item.SubItems.Add("홀");
                    }
                    else if (DrirectBet_GameType.Equals("PWB_PB_MIX"))
                    {
                        item.SubItems.Add("파조합");
                        item.SubItems.Add("홀언");
                    }
                    else if (DrirectBet_GameType.Equals("PWB_NB_MIX"))
                    {
                        item.SubItems.Add("일조합");
                        item.SubItems.Add("홀언");
                    }
                    else if (DrirectBet_GameType.Equals("PSA"))
                    {
                        item.SubItems.Add("파사");
                        item.SubItems.Add("좌");
                    }
                    item.SubItems.Add(UtilModel.StringFormatChanged(DirectBet_PowerBallOddMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add(UtilModel.getDateTime());
                    directBetRegistListView.Items.Add(item);
                }
                else if (DirectBet_PowerBallEvenMoney > 0)
                {
                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    if (DrirectBet_GameType.Equals("PWB"))
                    {
                        item.SubItems.Add("파워");
                        item.SubItems.Add("짝");
                    }
                    else if (DrirectBet_GameType.Equals("PWB_PB_MIX"))
                    {
                        item.SubItems.Add("파조합");
                        item.SubItems.Add("홀오");
                    }
                    else if (DrirectBet_GameType.Equals("PWB_NB_MIX"))
                    {
                        item.SubItems.Add("일조합");
                        item.SubItems.Add("홀오");
                    }
                    else if (DrirectBet_GameType.Equals("PSA"))
                    {
                        item.SubItems.Add("파사");
                        item.SubItems.Add("우");
                    }
                    item.SubItems.Add(UtilModel.StringFormatChanged(DirectBet_PowerBallEvenMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add(UtilModel.getDateTime());
                    directBetRegistListView.Items.Add(item);
                }
                else if (DirectBet_PowerBallUnderMoney > 0)
                {
                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    if (DrirectBet_GameType.Equals("PWB"))
                    {
                        item.SubItems.Add("파워");
                        item.SubItems.Add("언");
                    }
                    else if (DrirectBet_GameType.Equals("PWB_PB_MIX"))
                    {
                        item.SubItems.Add("파조합");
                        item.SubItems.Add("짝언");
                    }
                    else if (DrirectBet_GameType.Equals("PWB_NB_MIX"))
                    {
                        item.SubItems.Add("일조합");
                        item.SubItems.Add("짝언");
                    }
                    else if (DrirectBet_GameType.Equals("PSA"))
                    {
                        item.SubItems.Add("파사");
                        item.SubItems.Add("3");
                    }
                    item.SubItems.Add(UtilModel.StringFormatChanged(DirectBet_PowerBallUnderMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add(UtilModel.getDateTime());
                    directBetRegistListView.Items.Add(item);
                }
                else if (DirectBet_PowerBallOverMoney > 0)
                {
                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    if (DrirectBet_GameType.Equals("PWB"))
                    {
                        item.SubItems.Add("파워");
                        item.SubItems.Add("오");
                    }
                    else if (DrirectBet_GameType.Equals("PWB_PB_MIX"))
                    {
                        item.SubItems.Add("파조합");
                        item.SubItems.Add("짝오");
                    }
                    else if (DrirectBet_GameType.Equals("PWB_NB_MIX"))
                    {
                        item.SubItems.Add("일조합");
                        item.SubItems.Add("짝오");
                    }
                    else if (DrirectBet_GameType.Equals("PSA"))
                    {
                        item.SubItems.Add("파사");
                        item.SubItems.Add("4");
                    }
                    item.SubItems.Add(UtilModel.StringFormatChanged(DirectBet_PowerBallOverMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add(UtilModel.getDateTime());
                    directBetRegistListView.Items.Add(item);
                }
                else if (DirectBet_NormalBallOddMoney > 0)
                {
                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    if (DrirectBet_GameType.Equals("PWB"))
                    {
                        item.SubItems.Add("일반");
                    }
                    else if (DrirectBet_GameType.Equals("PSA"))
                    {
                        item.SubItems.Add("파사");
                    }
                    item.SubItems.Add("홀");
                    item.SubItems.Add(UtilModel.StringFormatChanged(DirectBet_NormalBallOddMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add(UtilModel.getDateTime());
                    directBetRegistListView.Items.Add(item);
                }
                else if (DirectBet_NormalBallEvenMoney > 0)
                {
                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    if (DrirectBet_GameType.Equals("PWB"))
                    {
                        item.SubItems.Add("일반");
                    }
                    else if (DrirectBet_GameType.Equals("PSA"))
                    {
                        item.SubItems.Add("파사");
                    }
                    item.SubItems.Add("짝");
                    item.SubItems.Add(UtilModel.StringFormatChanged(DirectBet_NormalBallEvenMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add(UtilModel.getDateTime());
                    directBetRegistListView.Items.Add(item);
                }
                else if (DirectBet_NormalBallUnderMoney > 0)
                {
                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("언");
                    item.SubItems.Add(UtilModel.StringFormatChanged(DirectBet_NormalBallUnderMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add(UtilModel.getDateTime());
                    directBetRegistListView.Items.Add(item);
                }
                else if (DirectBet_NormalBallOverMoney > 0)
                {
                    item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("일반");
                    item.SubItems.Add("오");
                    item.SubItems.Add(UtilModel.StringFormatChanged(DirectBet_NormalBallOverMoney));
                    item.SubItems.Add("-----");
                    item.SubItems.Add("-----");
                    item.SubItems.Add(UtilModel.getDateTime());
                    directBetRegistListView.Items.Add(item);
                }
            }
            DirectBet_PowerBallOddMoney = 0;
            DirectBet_PowerBallEvenMoney = 0;
            DirectBet_PowerBallUnderMoney = 0;
            DirectBet_PowerBallOverMoney = 0;
            DirectBet_NormalBallOddMoney = 0;
            DirectBet_NormalBallEvenMoney = 0;
            DirectBet_NormalBallUnderMoney = 0;
            DirectBet_NormalBallOverMoney = 0;
            DirectBettingProcessing = false;
            DirectBetStatus = false;
        }


        private void directBetCancel_Click(object sender, EventArgs e)
        {
            moneyUp.Text = "0";
            betPanel2.Visible = false;
        }
        private Boolean IsFolded { get; set; }

        private void extendSize_Click(object sender, EventArgs e)
        {
            if (IsFolded == false)
            {
                // 접힌 상태의 사이즈 설정
                this.Size = new Size(2560, 1050);
            }
            else
            {
                // 펼쳐진 상태의 사이즈 설정
                this.Size = new Size(1940, 1050);
            }
            IsFolded = !(IsFolded);
        }

        private void userPickRegist_Click(object sender, EventArgs e)
        {
            MessageBox.Show("아직 지원되지 않는 기능입니다.");
        }
        // 0 = 실제 배팅 
        // 1 = 가상 배팅
        int realOrVirtualMode = 0;
        private void RealOrVirtualBettingMode_Click(object sender, EventArgs e)
        {
            if (GameIsStartStattus)
            {
                MessageBox.Show("게임이 진행 중입니다. 배팅 정지 후 변경 하십시요!");
                return;
            }
            if (realOrVirtualMode == 0)
            {
                panel3.BackColor = Color.FromArgb(78, 52, 46);
                realOrVirtualMode = 1;
                RealOrVirtualBettingMode.ForeColor = Color.FromArgb(244, 143, 177);
                RealOrVirtualBettingMode.Text = "가상 배팅 진행 중 !";
                lblTxtNowMoney.Text = startVirtualMoneyTextBox.Text;
                lblTxtNowGain.Text = "0";
                UtilModel.UserOwnMoney = int.Parse(startVirtualMoneyTextBox.Text);
            }
            else if (realOrVirtualMode == 1)
            {
                panel3.BackColor = Color.FromArgb(66, 66, 66);
                realOrVirtualMode = 0;
                RealOrVirtualBettingMode.ForeColor = Color.FromArgb(100, 181, 246);
                RealOrVirtualBettingMode.Text = "실제 배팅 진행 중 !";
                lblTxtNowMoney.Text = "0";
                lblTxtNowGain.Text = "0";
                UtilModel.UserOwnMoney = 0;
            }
        }

        private void txtBtMoneySettingL1_Click(object sender, EventArgs e)
        {
            int outValue = 0;
            bool _b = int.TryParse(Regex.Replace(txtBtMoneySettingL1.Text, @"\D", ""), out outValue);
            if (_b)
            {
                txtBtMoneySettingL1.Text = outValue.ToString();
            }
        }

        Boolean Direct_Bet_Power_Odd = false;
        Boolean Direct_Bet_Power__PEven = false;
        Boolean Direct_Bet_Power_Under = false;
        Boolean Direct_Bet_Power_Over = false;
        Boolean Direct_Bet_Normal_Odd = false;
        Boolean Direct_Bet_Normal_Even = false;
        Boolean Direct_Bet_Normal_Under = false;
        Boolean Direct_Bet_Normal_Over = false;

        Boolean Direct_Bet_Ladder_Left = false;
        Boolean Direct_Bet_Ladder_Right = false;
        Boolean Direct_Bet_Ladder_3 = false;
        Boolean Direct_Bet_Ladder_4 = false;
        Boolean Direct_Bet_Ladder_Odd = false;
        Boolean Direct_Bet_Ladder_Even = false;

        Boolean Direct_Bet_Mix_Power_OddUnder = false;
        Boolean Direct_Bet_Mix_Power_OddOver = false;
        Boolean Direct_Bet_Mix_Power_EvenUnder = false;
        Boolean Direct_Bet_Mix_Power_EvenOver = false;
        Boolean Direct_Bet_Mix_Normal_OddUnder = false;
        Boolean Direct_Bet_Mix_Normal_OddOver = false;
        Boolean Direct_Bet_Mix_Normal_EvenUnder = false;
        Boolean Direct_Bet_Mix_Normal_EvenOver = false;

        Boolean BaccaratStatus = false;
        Boolean CasinoBaccaratPlayer = false;
        Boolean CasinoBaccaratTie = false;
        Boolean CasinoBaccaratBanker = true;

        private void directBetInit()
        {
            Direct_Bet_Power_Odd = false;
            Direct_Bet_Power__PEven = false;
            Direct_Bet_Power_Under = false;
            Direct_Bet_Power_Over = false;
            Direct_Bet_Normal_Odd = false;
            Direct_Bet_Normal_Even = false;
            Direct_Bet_Normal_Under = false;
            Direct_Bet_Normal_Over = false;

            Direct_Bet_Ladder_Left = false;
            Direct_Bet_Ladder_Right = false;
            Direct_Bet_Ladder_3 = false;
            Direct_Bet_Ladder_4 = false;
            Direct_Bet_Ladder_Odd = false;
            Direct_Bet_Ladder_Even = false;

            Direct_Bet_Mix_Power_OddUnder = false;
            Direct_Bet_Mix_Power_OddOver = false;
            Direct_Bet_Mix_Power_EvenUnder = false;
            Direct_Bet_Mix_Power_EvenOver = false;
            Direct_Bet_Mix_Normal_OddUnder = false;
            Direct_Bet_Mix_Normal_OddOver = false;
            Direct_Bet_Mix_Normal_EvenUnder = false;
            Direct_Bet_Mix_Normal_EvenOver = false;

            pOddCheck.BackColor = Color.White;
            pOddCheck.ForeColor = Color.Black;

            pEvenCheck.BackColor = Color.White;
            pEvenCheck.ForeColor = Color.Black;

            pUnderCheck.BackColor = Color.White;
            pUnderCheck.ForeColor = Color.Black;

            pOverCheck.BackColor = Color.White;
            pOverCheck.ForeColor = Color.Black;

            nOddCheck.BackColor = Color.White;
            nOddCheck.ForeColor = Color.Black;

            nEvenCheck.BackColor = Color.White;
            nEvenCheck.ForeColor = Color.Black;

            nUnderCheck.BackColor = Color.White;
            nUnderCheck.ForeColor = Color.Black;

            nOverCheck.BackColor = Color.White;
            nOverCheck.ForeColor = Color.Black;

            ladder3Check.BackColor = Color.White;
            ladder3Check.ForeColor = Color.Black;

            ladder4Check.BackColor = Color.White;
            ladder4Check.ForeColor = Color.Black;

            ladderLeftCheck.BackColor = Color.White;
            ladderLeftCheck.ForeColor = Color.Black;

            ladderRightCheck.BackColor = Color.White;
            ladderRightCheck.ForeColor = Color.Black;

            ladderOddCheck.BackColor = Color.White;
            ladderOddCheck.ForeColor = Color.Black;

            ladderEvenCheck.BackColor = Color.White;
            ladderEvenCheck.ForeColor = Color.Black;

            pOddUnderCheck.BackColor = Color.White;
            pOddUnderCheck.ForeColor = Color.Black;

            pOddOverCheck.BackColor = Color.White;
            pOddOverCheck.ForeColor = Color.Black;

            pEvenUnderCheck.BackColor = Color.White;
            pEvenUnderCheck.ForeColor = Color.Black;

            pEvenOverCheck.BackColor = Color.White;
            pEvenOverCheck.ForeColor = Color.Black;

            nOddUnderCheck.BackColor = Color.White;
            nOddUnderCheck.ForeColor = Color.Black;

            nOddOverCheck.BackColor = Color.White;
            nOddOverCheck.ForeColor = Color.Black;

            nEvenUnderCheck.BackColor = Color.White;
            nEvenUnderCheck.ForeColor = Color.Black;

            nEvenOverCheck.BackColor = Color.White;
            nEvenOverCheck.ForeColor = Color.Black;
        }

        private void pOddCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Power_Odd = true;
            pOddCheck.BackColor = Color.Black;
            pOddCheck.ForeColor = Color.White;
        }

        private void pEvenCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Power__PEven = true;
            pEvenCheck.BackColor = Color.Black;
            pEvenCheck.ForeColor = Color.White;
        }

        private void pUnderCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Power_Under = true;
            pUnderCheck.BackColor = Color.Black;
            pUnderCheck.ForeColor = Color.White;
        }

        private void pOverCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Power_Over = true;
            pOverCheck.BackColor = Color.Black;
            pOverCheck.ForeColor = Color.White;
        }

        private void nOddCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Normal_Odd = true;
            nOddCheck.BackColor = Color.Black;
            nOddCheck.ForeColor = Color.White;
        }

        private void nEvenCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Normal_Even = true;
            nEvenCheck.BackColor = Color.Black;
            nEvenCheck.ForeColor = Color.White;
        }

        private void nUnderCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Normal_Under = true;
            nUnderCheck.BackColor = Color.Black;
            nUnderCheck.ForeColor = Color.White;
        }

        private void nOverCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Normal_Over = true;
            nOverCheck.BackColor = Color.Black;
            nOverCheck.ForeColor = Color.White;
        }

        private void ladderLeftCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Ladder_Left = true;
            ladderLeftCheck.BackColor = Color.Black;
            ladderLeftCheck.ForeColor = Color.White;
        }

        private void ladderRightCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Ladder_Right = true;
            ladderRightCheck.BackColor = Color.Black;
            ladderRightCheck.ForeColor = Color.White;
        }

        private void ladder3Check_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Ladder_3 = true;
            ladder3Check.BackColor = Color.Black;
            ladder3Check.ForeColor = Color.White;
        }

        private void ladder4Check_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Ladder_4 = true;
            ladder4Check.BackColor = Color.Black;
            ladder4Check.ForeColor = Color.White;
        }

        private void ladderOddCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Ladder_Odd = true;
            ladderOddCheck.BackColor = Color.Black;
            ladderOddCheck.ForeColor = Color.White;
        }

        private void ladderEvenCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Ladder_Even = true;
            ladderEvenCheck.BackColor = Color.Black;
            ladderEvenCheck.ForeColor = Color.White;
        }

        private void pOddUnderCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Mix_Power_OddUnder = true;
            pOddUnderCheck.BackColor = Color.Black;
            pOddUnderCheck.ForeColor = Color.White;
        }

        private void pOddOverCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Mix_Power_OddOver = true;
            pOddOverCheck.BackColor = Color.Black;
            pOddOverCheck.ForeColor = Color.White;
        }

        private void pEvenUnderCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Mix_Power_EvenUnder = true;
            pEvenUnderCheck.BackColor = Color.Black;
            pEvenUnderCheck.ForeColor = Color.White;
        }

        private void pEvenOverCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Mix_Power_EvenOver = true;
            pEvenOverCheck.BackColor = Color.Black;
            pEvenOverCheck.ForeColor = Color.White;
        }

        private void nOddUnderCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Mix_Normal_OddUnder = true;
            nOddUnderCheck.BackColor = Color.Black;
            nOddUnderCheck.ForeColor = Color.White;
        }

        private void nOddOverCheck_Click(object sender, EventArgs e)
        {
            directBetInit();
            Direct_Bet_Mix_Normal_OddOver = true;
            nOddOverCheck.BackColor = Color.Black;
            nOddOverCheck.ForeColor = Color.White;
        }

        private void nEvenUnderCheck_Click(object sender, EventArgs e)
        {
            directBetInit();

            Direct_Bet_Mix_Normal_EvenUnder = true;
            nEvenUnderCheck.BackColor = Color.Black;
            nEvenUnderCheck.ForeColor = Color.White;
        }

        private void nEvenOverCheck_Click(object sender, EventArgs e)
        {
            directBetInit();

            Direct_Bet_Mix_Normal_EvenOver = true;
            nEvenOverCheck.BackColor = Color.Black;
            nEvenOverCheck.ForeColor = Color.White;
        }

        private void remainTime_Click(object sender, EventArgs e)
        {
            changeColor();
        }

        private void changeColor()
        {
            randomColor = selectRandom.Next(0, arrayColor.GetLength(0));

            remainTime.ForeColor = Color.White;
            remainTime.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 8]));

            for (int _find = 1; _find <= accountNumber; _find++)
            {
                TextBox _betMoney = (Controls.Find("txtBoxPBM" + _find.ToString(), true)[0] as TextBox);
                ComboBox _level = (Controls.Find("CBL" + _find.ToString(), true)[0] as ComboBox);
                colorChanged(_level, _betMoney);
            }
        }
        private void colorChanged(ComboBox _level, TextBox _betMoney)
        {
            int level = 1;
            Boolean _boolean = int.TryParse(_level.Text, out int outLevel);
            if (_boolean)
            {
                level = outLevel;
            }
            else
            {
                level = 1;
            }

            if (level == 1)
            {
                _betMoney.ForeColor = Color.Black;
                _betMoney.BackColor = Color.WhiteSmoke;
            }
            else if (level == 2)
            {
                _betMoney.ForeColor = Color.Black;
                _betMoney.BackColor = Color.WhiteSmoke;
            }
            else if (level == 3)
            {
                _betMoney.ForeColor = Color.Black;
                _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 1]));
            }
            else if (level == 4)
            {
                _betMoney.ForeColor = Color.Black;
                _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 2]));
            }
            else if (level == 5)
            {
                _betMoney.ForeColor = Color.Black;
                _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 3]));
            }
            else if (level == 6)
            {
                _betMoney.ForeColor = Color.Black;
                _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 4]));
            }
            else if (level == 7)
            {
                _betMoney.ForeColor = Color.White;
                _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 5]));
            }
            else if (level == 8)
            {
                _betMoney.ForeColor = Color.White;
                _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 6]));
            }
            else if (level == 9)
            {
                _betMoney.ForeColor = Color.White;
                _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 7]));
            }
            else if (level == 10)
            {
                _betMoney.ForeColor = Color.White;
                _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 8]));
            }
            else if (level >= 11)
            {
                _betMoney.ForeColor = Color.White;
                _betMoney.BackColor = Color.FromArgb(255, Color.FromArgb(arrayColor[randomColor, 9]));
            }
        }

        #region txtBoxPS_TextChanged
        private void TextBoxPSTextColor(object sender)
        {
            TextBox textBox = sender as TextBox;
            int outValue = 0;
            bool B = int.TryParse(Regex.Replace(textBox.Text, @"\D", ""), out outValue);
            if (B)
            {
                if (outValue >= int.Parse(patternBetNumber.Text))
                {
                    textBox.ForeColor = Color.White;
                    textBox.BackColor = Color.Black;
                }
                else
                {
                    textBox.ForeColor = Color.Black;
                    textBox.BackColor = Color.White;
                }
            }
            else
            {
                textBox.ForeColor = Color.DarkGray;
                textBox.BackColor = Color.White;
            }
        }
        private void txtBoxPS1_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS2_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS3_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS4_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS5_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS6_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS7_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS8_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS9_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS10_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS11_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS12_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS13_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS14_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS15_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS16_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS17_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS18_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS19_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }

        private void txtBoxPS20_TextChanged(object sender, EventArgs e)
        {
            TextBoxPSTextColor(sender);
        }
        #endregion txtBoxPS_TextChanged

        private void bkrBetButton_Click(object sender, EventArgs e)
        {
            //CSN_BKR
            if (BettingProcessing)
            {
                MessageBox.Show("잠시 후 재시도 해주시기 바랍니다.");
                return;
            }
            if (!BaccaratStatus)
            {
                return;
            }

            if (!GameIsStartStattus)
            {
                MessageBox.Show("배팅 시작 버튼을 눌러주세요!");
                return;
            }
            if (realOrVirtualMode == 1)
            {
                MessageBox.Show("가상 배팅 중에는 이용할 수 없습니다!");
                return;
            }
            Normal_Pickster_Pick_PowerBall_Odd_Money = 0;
            Normal_Pickster_Pick_PowerBall_Even_Money = 0;
            Normal_Pickster_Pick_PowerBall_Under_Money = 0;
            directbetMoney = 0;
            bool _result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out directbetMoney);
            if (_result)
            {
                if (directbetMoney <= 0)
                {
                    MessageBox.Show("배팅금액이 0원입니다.");
                    return;
                }
            }
            else
            {
                MessageBox.Show("배팅 금액 설정이 잘못 되었습니다. 재설정 바랍니다.");
                Baccarat_BeyMoney.Text = "0";
                return;
            }
            DirectBetPickString = "";
            gm = null;
            if (CasinoBaccaratPlayer)
            {
                DirectBetPickString = "카지노 바카라 [플레이어]";
                Normal_Pickster_Pick_PowerBall_Odd_Money = directbetMoney;
            }
            else if (CasinoBaccaratTie)
            {
                DirectBetPickString = "카지노 바카라 [타이]";
                Normal_Pickster_Pick_PowerBall_Even_Money = directbetMoney;
            }
            else if (CasinoBaccaratBanker)
            {
                DirectBetPickString = "카지노 바카라 [뱅커]";
                Normal_Pickster_Pick_PowerBall_Under_Money = directbetMoney;
            }
            if (directbetMoney < 100)
            {
                txtLogAdd("선택된 픽이 없거나 선택을 할 수 없는 픽입니다.", Color.White);
                directBetInit();
                return;
            }

            BaccaratBetting();
            TermInning = 0;
            startInning = 0;
            Baccarat_BeyMoney.Text = "0";
        }

        private void BaccaratBetting()
        {
            int a = Normal_Pickster_Pick_PowerBall_Odd_Money + Normal_Pickster_Pick_PowerBall_Even_Money + Normal_Pickster_Pick_PowerBall_Under_Money;

            if (a <= 0)
            {
                return;
            }

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(UtilModel.UserSiteUrlAddress);
            stringBuilder.Append(":8082/api/bet");
            stringBuilder.AppendFormat("?userid={0}", UtilModel.UserId);
            stringBuilder.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);
            stringBuilder.AppendFormat("&gm={0}", "CSN_BKR");
            stringBuilder.AppendFormat("&tdate={0}", TodayDate);
            stringBuilder.AppendFormat("&rno={0}", BaccaratInning);
            if (Normal_Pickster_Pick_PowerBall_Odd_Money > 0)
            {
                stringBuilder.AppendFormat("&pp1={0}", Normal_Pickster_Pick_PowerBall_Odd_Money);
            }
            if (Normal_Pickster_Pick_PowerBall_Even_Money > 0)
            {
                stringBuilder.AppendFormat("&pp2={0}", Normal_Pickster_Pick_PowerBall_Even_Money);
            }
            if (Normal_Pickster_Pick_PowerBall_Under_Money > 0)
            {
                stringBuilder.AppendFormat("&pp3={0}", Normal_Pickster_Pick_PowerBall_Under_Money);
            }
            stringBuilder.AppendFormat("&nonce={0}", selectRandom.Next(100000, 999999));

            bettingLevel2(stringBuilder.ToString());

            if (bettingStatus)
            {
                if (Normal_Pickster_Pick_PowerBall_Odd_Money > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("P");
                    item.SubItems.Add(UtilModel.StringFormatChanged(Normal_Pickster_Pick_PowerBall_Odd_Money));
                    item.SubItems.Add("0");
                    item.SubItems.Add("-");
                    BaccaratListView.Items.Add(item);
                }
                if (Normal_Pickster_Pick_PowerBall_Even_Money > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("T");
                    item.SubItems.Add(UtilModel.StringFormatChanged(Normal_Pickster_Pick_PowerBall_Even_Money));
                    item.SubItems.Add("0");
                    item.SubItems.Add("-");
                    BaccaratListView.Items.Add(item);
                }
                if (Normal_Pickster_Pick_PowerBall_Under_Money > 0)
                {
                    ListViewItem item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                    item.SubItems.Add("B");
                    item.SubItems.Add(UtilModel.StringFormatChanged(Normal_Pickster_Pick_PowerBall_Under_Money));
                    item.SubItems.Add("0");
                    item.SubItems.Add("-");
                    BaccaratListView.Items.Add(item);
                }
            }
        }

        private void BaccaratSelectBanker_Click(object sender, EventArgs e)
        {
            CasinoBaccaratPlayer = false;
            CasinoBaccaratTie = false;
            CasinoBaccaratBanker = true;

            BaccaratSelectBanker.BackColor = Color.Black;
            BaccaratSelectBanker.ForeColor = Color.White;

            BaccaratSelectTie.BackColor = Color.White;
            BaccaratSelectTie.ForeColor = Color.Black;

            BaccaratSelectPlayer.BackColor = Color.White;
            BaccaratSelectPlayer.ForeColor = Color.Black;
        }

        private void BaccaratSelectTie_Click(object sender, EventArgs e)
        {
            CasinoBaccaratPlayer = false;
            CasinoBaccaratTie = true;
            CasinoBaccaratBanker = false;

            BaccaratSelectBanker.BackColor = Color.White;
            BaccaratSelectBanker.ForeColor = Color.Black;

            BaccaratSelectTie.BackColor = Color.Black;
            BaccaratSelectTie.ForeColor = Color.White;

            BaccaratSelectPlayer.BackColor = Color.White;
            BaccaratSelectPlayer.ForeColor = Color.Black;
        }

        private void BaccaratSelectPlayer_Click(object sender, EventArgs e)
        {
            CasinoBaccaratPlayer = true;
            CasinoBaccaratTie = false;
            CasinoBaccaratBanker = false;

            BaccaratSelectBanker.BackColor = Color.White;
            BaccaratSelectBanker.ForeColor = Color.Black;

            BaccaratSelectTie.BackColor = Color.White;
            BaccaratSelectTie.ForeColor = Color.Black;

            BaccaratSelectPlayer.BackColor = Color.Black;
            BaccaratSelectPlayer.ForeColor = Color.White;
        }

        private void BaccaratStartStopButton_Click(object sender, EventArgs e)
        {
            if (BaccaratStatus)
            {
                BaccaratStatus = false;
                BaccaratStartStopButton.Text = "카지노 바카라 게임 정지 중!";
                BaccaratStartStopButton.BackColor = Color.White;
                BaccaratStartStopButton.ForeColor = Color.Black;
            } else
            {
                BaccaratStatus = true;
                BaccaratStartStopButton.Text = "카지노 바카라 게임 진행 중!";
                BaccaratStartStopButton.BackColor = Color.Black;
                BaccaratStartStopButton.ForeColor = Color.White;
            }
        }

        private void Baccarat1K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 1000)).ToString();
            }
        }

        private void Baccarat5K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 5000)).ToString();
            }
        }

        private void Baccarat10K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 10000)).ToString();
            }
        }

        private void Baccarat30K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 30000)).ToString();
            }
        }

        private void Baccarat50K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 50000)).ToString();
            }
        }

        private void Baccarat100K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 100000)).ToString();
            }
        }

        private void Baccarat200K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 200000)).ToString();
            }
        }

        private void Baccarat300K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 300000)).ToString();
            }
        }

        private void Baccarat500K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 500000)).ToString();
            }
        }

        private void Baccarat1000K_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 1000000)).ToString();
            }
        }

        private void Baccarat100_Click(object sender, EventArgs e)
        {
            int money = 0;
            bool result = int.TryParse(Regex.Replace(Baccarat_BeyMoney.Text, @"\D", ""), out money);
            if (result)
            {
                Baccarat_BeyMoney.Text = (UtilModel.StringFormatChanged(money + 100)).ToString();
            }
        }

        private void Baccarat_BeyMoney_Init_Click(object sender, EventArgs e)
        {
            Baccarat_BeyMoney.Text = "0";
        }

        private void BaccaratProcessing()
        {
            String str = UtilModel.GetHttp("http://api.6duck.net/game/baccarat/play");
            if (!string.IsNullOrEmpty(str))
            {
                JObject jo = JObject.Parse(str);
                int.Parse(jo.SelectToken("ErrorCode").ToString());
                jo.SelectToken("Message").ToString();
                baccaratTime.Text = jo.SelectToken("Data").SelectToken("COUNT").ToString();
                string status = jo.SelectToken("Data").SelectToken("STATUS").ToString();

                int RemainBaccartTime = int.Parse(baccaratTime.Text);
                if (RemainBaccartTime > 55)
                {
                    BaccaratInning = null;
                    BaccaratInning += jo.SelectToken("Data").SelectToken("SHOEBOX").ToString();
                    if (int.Parse(jo.SelectToken("Data").SelectToken("TURN").ToString()) < 10)
                    {
                        BaccaratInning += "0";
                    }
                    BaccaratInning += jo.SelectToken("Data").SelectToken("TURN").ToString();
                    BaccaratInningNum.Text = BaccaratInning;
                }

                if (status.Equals("COMPLETED"))
                {
                    jo.SelectToken("Data").SelectToken("P_SUM").ToString();
                    jo.SelectToken("Data").SelectToken("B_SUM").ToString();
                    string result = jo.SelectToken("Data").SelectToken("RESULT").ToString();

                    for (int i = 0; i < BaccaratListView.Items.Count; i++)
                    {
                        ListViewItem item = BaccaratListView.Items[i];

                        bool isContains = item.SubItems[0].Text.Equals(BaccaratInning.ToString());

                        if (isContains)
                        {
                            string pick = item.SubItems[1].Text;
                            string betMoney = item.SubItems[2].Text;
                            double outMoney = 0;
                            bool _bool = double.TryParse(Regex.Replace(betMoney, @"\D", ""), out outMoney);
                            if (result.Equals("T"))
                            {
                                if (result.Equals(pick))
                                {
                                    item.SubItems[4].Text = "당첨";
                                    if (_bool)
                                    {
                                        int winMoney = 0;

                                        winMoney = (int)(outMoney * 8);
                                        item.SubItems[3].Text = UtilModel.StringFormatChanged(winMoney);
                                    }
                                    item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                    item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                    item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                    item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                    item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                }
                                else
                                {
                                    item.SubItems[4].Text = "당첨";
                                    if (_bool)
                                    {
                                        int winMoney = 0;

                                        winMoney = (int)(outMoney * 1);
                                        item.SubItems[3].Text = UtilModel.StringFormatChanged(winMoney);
                                    }
                                    item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                    item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                    item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                    item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                    item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                }
                            }
                            else if (result.Equals(pick))
                            {
                                item.SubItems[4].Text = "당첨";
                                if (_bool)
                                {
                                    int winMoney = 0;
                                    winMoney = (int)(outMoney * 1.95);
                                    item.SubItems[3].Text = UtilModel.StringFormatChanged(winMoney);
                                }
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xA1887F));
                            }
                            else
                            {
                                item.SubItems[4].Text = "미당첨";
                                item.SubItems[3].Text = "0";
                                item.SubItems[0].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[1].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[2].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[3].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                                item.SubItems[4].ForeColor = Color.FromArgb(255, Color.FromArgb(0xBDBDBD));
                            }
                        }
                        else
                        {
                            break;
                        }
                    }
                    txtLogAdd("바카라 결과는 : " + result, Color.White);
                }
            }
        }

        private void BaccaratSelectBet01_Click(object sender, EventArgs e)
        {
            Button _button = sender as Button;
            if (_button.Text.Equals("P"))
            {
                _button.Text = "T";
            }
            else if (_button.Text.Equals("T"))
            {
                _button.Text = "B";
            }
            else if (_button.Text.Equals("B"))
            {
                _button.Text = "P";
            }
        }

        // 전체 삭제하기
        private void toolStripMenuItem1_Click(object sender, EventArgs e)
        {
            directBetRegistListView.Items.Clear();
            normalModeMaringaleBetRegistListView.Items.Clear();
            EosCruiseBetRegistListView.Items.Clear();
            txtLogAdd("배팅 내역을 삭제하였습니다.", Color.CadetBlue);
        }

        private void samePersonCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            UtilModel.SamePerson = UtilModel.getBooleanString(samePersonCheckBox.Checked);
            if (samePersonCheckBox.Checked)
            {
                txtLogAdd("동일 유저를 넣을 수 있습니다.", Color.White);
            }
            else
            {
                txtLogAdd("동일 유저를 넣을 수 없습니다.", Color.White);
            }
        }

        private void resultMarkCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            UtilModel.ResultMark = UtilModel.getBooleanString(resultMarkCheckBox.Checked);
        }

        private void errorBeep_CheckedChanged(object sender, EventArgs e)
        {
            UtilModel.ErrorBeep = UtilModel.getBooleanString(errorBeep.Checked);
        }

        private void BettingFalseCheck_CheckedChanged(object sender, EventArgs e)
        {
            UtilModel.BettingFail = UtilModel.getBooleanString(BettingFalseCheck.Checked);
        }

        private void patternBetNumber_SelectedIndexChanged(object sender, EventArgs e)
        {
            UtilModel.PatternBetNumber = patternBetNumber.Text;
        }

        private void checkOverProfit_CheckedChanged(object sender, EventArgs e)
        {
            UtilModel.UseOverProfit = UtilModel.getBooleanString(checkOverProfit.Checked);
        }
        private void OverProfit_SelectedIndexChanged(object sender, EventArgs e)
        {
            overProfit = int.Parse(OverProfit.Text);
            UtilModel.OverProfitValue = OverProfit.Text;
            txtLogAdd(string.Format("수익 설정 값이 [ {0:N0} ]로 변경되었습니다.", overProfit), Color.White);
        }

        private void checkUnderProfit_CheckedChanged(object sender, EventArgs e)
        {
            UtilModel.UseUnderProfit = UtilModel.getBooleanString(checkUnderProfit.Checked);
        }

        private void UnderProfit_SelectedIndexChanged(object sender, EventArgs e)
        {
            UtilModel.UnderProfitValue = UnderProfit.Text;
            txtLogAdd(string.Format("손실 설정 값이 [ {0:N0} ]로 변경되었습니다.", UnderProfit.Text), Color.White);
        }

        /*
        Button _menuStripButton;
        #region GetContextMenuStrip() 
        /// <summary> 
        /// /// 컨텍스트 메뉴 스트립을 가져옵니다.
        /// /// </summary> 
        /// /// <returns>컨텍스트 메뉴 스트립을 리턴합니다.</returns> 
        private ContextMenuStrip GetContextMenuStrip(Button _button)
        {
            _menuStripButton = _button;
            ContextMenuStrip contextMenuStrip = new ContextMenuStrip();
            ToolStripMenuItem deleteItem = new ToolStripMenuItem("삭제");
            contextMenuStrip.Items.AddRange(new ToolStripItem[] { deleteItem });

            deleteItem.Click += deleteItem_Click;
            return contextMenuStrip;
        }
        #endregion

        #region deleteItem_Click() 
        /// <summary> 
        /// 이벤트 처리
        /// </summary> 
        /// <param name="sender">이벤트 발생자 입니다.</param> 
        /// <param name="e">이벤트 인자 입니다.</param>
        void deleteItem_Click(object sender, EventArgs e)
        {
            _menuStripButton.Text = "------";
        }
        #endregion

        #region favoriteItem_Click()
        /// <summary> 
        /// 이벤트 처리
        /// </summary> 
        /// <param name="sender">이벤트 발생자 입니다.</param> 
        /// <param name="e">이벤트 인자 입니다.</param>
        private void favoriteItem_Click(object sender, EventArgs e)
        {
            MessageBox.Show("아직 지원되지 않는 기능입니다!");
        }
        #endregion
        */
        #region boxPicksterMouseDown
        /// <summary> 
        /// 픽스터 에서 오른쪽 버튼을 눌렀을 때 처리
        /// </summary> 
        /// <param name="sender">이벤트 발생자 입니다.</param> 
        /// <param name="e">이벤트 인자 입니다.</param>
        private void boxPicksterMouseDown(object sender, MouseEventArgs e)
        {
            if (_bettingClosed)
            {
                return;
            }
            Button _button = sender as Button;
            if (e.Button == MouseButtons.Left)
            {
                findUser(_button);
            }
        }
        #endregion
        #region BoxPicksterMouseDown
        private void BoxPickster_MouseDown(object sender, MouseEventArgs e)
        {
            boxPicksterMouseDown(sender, e);
        }
        #endregion BoxPicksterMouseDown

        private void selectOnePicksterDelete_Click(object sender, EventArgs e)
        {
            return;
            //ContextMenuStrip contextMenuStrip = sender as ContextMenuStrip;
        }

        private void selectAllPicksterDelete_Click(object sender, EventArgs e)
        {
            if (_bettingClosed)
            {
                return;
            }
            for (int _find = 1; _find <= accountNumber; _find++)
            {
                Button _pickster = (Controls.Find("BoxPickster" + _find.ToString(), true)[0] as Button);
                TextBox _ballType = (Controls.Find("txtBoxBallType" + _find.ToString(), true)[0] as TextBox);
                TextBox _boxPr = (Controls.Find("txtBoxPR" + _find.ToString(), true)[0] as TextBox);
                TextBox _boxPs = (Controls.Find("txtBoxPS" + _find.ToString(), true)[0] as TextBox);
                _pickster.Text = "------";
                _ballType.Text = "";
                _boxPr.Text = "";
                _boxPs.Text = "";
            }
        }
        bool BetPowerBallOddEvenDecal = false;
        Boolean BetPowerBallUnderOverDecal = false;
        Boolean BetNormalBallOddEvenDecal = false;
        Boolean BetNormalBallUnderOverDecal = false;
        String PowerBallOddEvenDecalLastChoice = string.Empty;
        String PowerBallUnderOverDecalLastChoice = string.Empty;
        String NormalBallOddEvenDecalLastChoice = string.Empty;
        String NormalBallUnderOverDecalLastChoice = string.Empty;
        private void CheckPowerBallOddEvenDecal()
        {
            if (BetPowerBallOddEvenDecal)
            {
                return;
            }
            PowerBallOddEvenDecalLastChoice = string.Empty;
            int firstbreakNumber = int.Parse(PowerBallOddEvenResultListView.Items[0].SubItems[0].Text);
            int breakNumber = 0;
            // 첫번째 값을 구해온다.
            if (firstbreakNumber >= decalMinimumValueInt)
            {
                int i = 0;
                PowerBallOddEvenDecalLastChoice = PowerBallOddEvenResultListView.Items[0].SubItems[1].Text;
                breakNumber = int.Parse(PowerBallOddEvenResultListView.Items[1].SubItems[0].Text);
                if (breakNumber == 1)
                {
                    while (true)
                    {
                        i++;
                        breakNumber = int.Parse(PowerBallOddEvenResultListView.Items[0 + i].SubItems[0].Text);
                        if (breakNumber > 1)
                        {
                            break;
                        }
                    }
                    if (breakNumber >= decalMinimumValueInt)
                    {
                        if (firstbreakNumber >= breakNumber)
                        {
                            BetPowerBallOddEvenDecal = true;
                            comboBoxDecalPowerBallOddEvenBetLevel.Text = "1";
                            if (PowerBallOddEvenDecalLastChoice.Equals("홀"))
                            {
                                textBoxDecalPowerBallOddEvenPick.Text = "짝";
                            }
                            else if (PowerBallOddEvenDecalLastChoice.Equals("짝"))
                            {
                                textBoxDecalPowerBallOddEvenPick.Text = "홀";
                            }

                            textBoxDecalPowerBallOddEven.ForeColor = Color.White;
                            textBoxDecalPowerBallOddEven.BackColor = Color.Black;

                            txtLogAdd("파워볼 홀짝의 데칼 모드 배팅을 시작합니다. 픽 : " + textBoxDecalPowerBallOddEvenPick.Text, Color.White);

                            if (errorBeep.Checked)
                            {
                                beepSound();
                            }
                        }
                    }
                }
            }
        }

        private void CheckPowerBallUnderOverDecal()
        {
            if (BetPowerBallUnderOverDecal)
            {
                return;
            }
            PowerBallUnderOverDecalLastChoice = string.Empty;
            int firstbreakNumber = int.Parse(PowerBallUnderOverResultListView.Items[0].SubItems[0].Text);
            int breakNumber = 0;
            // 첫번째 값을 구해온다.
            if (firstbreakNumber >= decalMinimumValueInt)
            {
                int i = 0;
                PowerBallUnderOverDecalLastChoice = PowerBallUnderOverResultListView.Items[0].SubItems[1].Text;
                breakNumber = int.Parse(PowerBallUnderOverResultListView.Items[1].SubItems[0].Text);
                if (breakNumber == 1)
                {
                    while (true)
                    {
                        i++;
                        breakNumber = int.Parse(PowerBallUnderOverResultListView.Items[0 + i].SubItems[0].Text);
                        if (breakNumber > 1)
                        {
                            break;
                        }
                    }
                    if (breakNumber >= decalMinimumValueInt)
                    {
                        if (firstbreakNumber >= breakNumber)
                        {
                            BetPowerBallUnderOverDecal = true;
                            comboBoxDecalPowerBallUnderOverBetLevel.Text = "1";
                            if (PowerBallUnderOverDecalLastChoice.Contains("언"))
                            {
                                textBoxDecalPowerBallUnderOverPick.Text = "오";
                            }
                            else if (PowerBallUnderOverDecalLastChoice.Contains("오"))
                            {
                                textBoxDecalPowerBallUnderOverPick.Text = "언";
                            }
                            textBoxDecalPowerBallUnderOver.ForeColor = Color.White;
                            textBoxDecalPowerBallUnderOver.BackColor = Color.Black;
                            txtLogAdd("파워볼 언오버의 데칼 모드 배팅을 시작합니다. 픽 : " + textBoxDecalPowerBallUnderOverPick.Text, Color.White);

                            if (errorBeep.Checked)
                            {
                                beepSound();
                            }
                        }
                    }
                }
            }
        }

        private void CheckNormalBallOddEvenDecal()
        {
            if (BetNormalBallOddEvenDecal)
            {
                return;
            }
            NormalBallOddEvenDecalLastChoice = string.Empty;
            int firstbreakNumber = int.Parse(NormalBallOddEvenResultListView.Items[0].SubItems[0].Text);
            int breakNumber = 0;
            // 첫번째 값을 구해온다.
            if (firstbreakNumber >= decalMinimumValueInt)
            {
                int i = 0;
                NormalBallOddEvenDecalLastChoice = NormalBallOddEvenResultListView.Items[0].SubItems[1].Text;
                breakNumber = int.Parse(NormalBallOddEvenResultListView.Items[1].SubItems[0].Text);
                if (breakNumber == 1)
                {
                    while (true)
                    {
                        i++;
                        breakNumber = int.Parse(NormalBallOddEvenResultListView.Items[0 + i].SubItems[0].Text);
                        if (breakNumber > 1)
                        {
                            break;
                        }
                    }
                    if (breakNumber >= decalMinimumValueInt)
                    {
                        if (firstbreakNumber >= breakNumber)
                        {
                            BetNormalBallOddEvenDecal = true;
                            comboBoxDecalNormalBallOddEvenBetLevel.Text = "1";
                            if (NormalBallOddEvenDecalLastChoice.Contains("홀"))
                            {
                                textBoxDecalNormalBallOddEvenPick.Text = "짝";
                            }
                            else if (NormalBallOddEvenDecalLastChoice.Contains("짝"))
                            {
                                textBoxDecalNormalBallOddEvenPick.Text = "홀";
                            }
                            textBoxDecalNormalBallOddEven.ForeColor = Color.White;
                            textBoxDecalNormalBallOddEven.BackColor = Color.Black;
                            txtLogAdd("일반볼 홀짝의 데칼 모드 배팅을 시작합니다. 픽 : " + textBoxDecalNormalBallOddEvenPick.Text, Color.White);

                            if (errorBeep.Checked)
                            {
                                beepSound();
                            }
                        }
                    }
                }
            }
        }
        private void CheckNormalBallUnderOverDecal()
        {
            if (BetNormalBallUnderOverDecal)
            {
                return;
            }
            NormalBallUnderOverDecalLastChoice = string.Empty;
            int firstbreakNumber = int.Parse(NormalBallUnderOverResultListView.Items[0].SubItems[0].Text);
            int breakNumber = 0;
            // 첫번째 값을 구해온다.
            if (firstbreakNumber >= decalMinimumValueInt)
            {
                int i = 0;
                NormalBallUnderOverDecalLastChoice = NormalBallUnderOverResultListView.Items[0].SubItems[1].Text;
                breakNumber = int.Parse(NormalBallUnderOverResultListView.Items[1].SubItems[0].Text);
                if (breakNumber == 1)
                {
                    while (true)
                    {
                        i++;
                        breakNumber = int.Parse(NormalBallUnderOverResultListView.Items[0 + i].SubItems[0].Text);
                        if (breakNumber > 1)
                        {
                            break;
                        }
                    }
                    if (breakNumber >= decalMinimumValueInt)
                    {
                        if (firstbreakNumber >= breakNumber)
                        {
                            BetNormalBallUnderOverDecal = true;
                            comboBoxDecalNormalBallUnderOverBetLevel.Text = "1";
                            if (NormalBallUnderOverDecalLastChoice.Contains("언"))
                            {
                                textBoxDecalNormalBallUnderOverPick.Text = "오";
                            }
                            else if (NormalBallUnderOverDecalLastChoice.Contains("오"))
                            {
                                textBoxDecalNormalBallUnderOverPick.Text = "언";
                            }
                            textBoxDecalNormalBallUnderOver.ForeColor = Color.White;
                            textBoxDecalNormalBallUnderOver.BackColor = Color.Black;
                            txtLogAdd("일반볼 언더오버의 데칼 모드 배팅을 시작합니다. 픽 : " + textBoxDecalNormalBallUnderOverPick.Text, Color.White);

                            if (errorBeep.Checked)
                            {
                                beepSound();
                            }
                        }
                    }
                }
            }
        }

        private Boolean CheckTelegramMessagePowerBallOddEvenDecal()
        {
            PowerBallOddEvenDecalLastChoice = string.Empty;
            int firstbreakNumber = int.Parse(PowerBallOddEvenResultListView.Items[0].SubItems[0].Text);
            int breakNumber = 0;
            // 첫번째 값을 구해온다.
            if (firstbreakNumber >= decalMinimumValueInt)
            {
                int i = 0;
                PowerBallOddEvenDecalLastChoice = PowerBallOddEvenResultListView.Items[0].SubItems[1].Text;
                breakNumber = int.Parse(PowerBallOddEvenResultListView.Items[1].SubItems[0].Text);
                if (breakNumber == 1)
                {
                    while (true)
                    {
                        i++;
                        breakNumber = int.Parse(PowerBallOddEvenResultListView.Items[0 + i].SubItems[0].Text);
                        if (breakNumber > 1)
                        {
                            break;
                        }
                    }
                    if (breakNumber >= decalMinimumValueInt)
                    {
                        if (firstbreakNumber >= breakNumber)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private Boolean CheckTelegramMessagePowerBallUnderOverDecal()
        {
            PowerBallUnderOverDecalLastChoice = string.Empty;
            int firstbreakNumber = int.Parse(PowerBallUnderOverResultListView.Items[0].SubItems[0].Text);
            int breakNumber = 0;
            // 첫번째 값을 구해온다.
            if (firstbreakNumber >= decalMinimumValueInt)
            {
                int i = 0;
                PowerBallUnderOverDecalLastChoice = PowerBallUnderOverResultListView.Items[0].SubItems[1].Text;
                breakNumber = int.Parse(PowerBallUnderOverResultListView.Items[1].SubItems[0].Text);
                if (breakNumber == 1)
                {
                    while (true)
                    {
                        i++;
                        breakNumber = int.Parse(PowerBallUnderOverResultListView.Items[0 + i].SubItems[0].Text);
                        if (breakNumber > 1)
                        {
                            break;
                        }
                    }
                    if (breakNumber >= decalMinimumValueInt)
                    {
                        if (firstbreakNumber >= breakNumber)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        private Boolean CheckTelegramMessageNormalBallOddEvenDecal()
        {
            NormalBallOddEvenDecalLastChoice = string.Empty;
            int firstbreakNumber = int.Parse(NormalBallOddEvenResultListView.Items[0].SubItems[0].Text);
            int breakNumber = 0;
            // 첫번째 값을 구해온다.
            if (firstbreakNumber >= decalMinimumValueInt)
            {
                int i = 0;
                NormalBallOddEvenDecalLastChoice = NormalBallOddEvenResultListView.Items[0].SubItems[1].Text;
                breakNumber = int.Parse(NormalBallOddEvenResultListView.Items[1].SubItems[0].Text);
                if (breakNumber == 1)
                {
                    while (true)
                    {
                        i++;
                        breakNumber = int.Parse(NormalBallOddEvenResultListView.Items[0 + i].SubItems[0].Text);
                        if (breakNumber > 1)
                        {
                            break;
                        }
                    }
                    if (breakNumber >= decalMinimumValueInt)
                    {
                        if (firstbreakNumber >= breakNumber)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        private Boolean CheckTelegramMessageNormalBallUnderOverDecal()
        {
            NormalBallUnderOverDecalLastChoice = string.Empty;
            int firstbreakNumber = int.Parse(NormalBallUnderOverResultListView.Items[0].SubItems[0].Text);
            int breakNumber = 0;
            // 첫번째 값을 구해온다.
            if (firstbreakNumber >= decalMinimumValueInt)
            {
                int i = 0;
                NormalBallUnderOverDecalLastChoice = NormalBallUnderOverResultListView.Items[0].SubItems[1].Text;
                breakNumber = int.Parse(NormalBallUnderOverResultListView.Items[1].SubItems[0].Text);
                if (breakNumber == 1)
                {
                    while (true)
                    {
                        i++;
                        breakNumber = int.Parse(NormalBallUnderOverResultListView.Items[0 + i].SubItems[0].Text);
                        if (breakNumber > 1)
                        {
                            break;
                        }
                    }
                    if (breakNumber >= decalMinimumValueInt)
                    {
                        if (firstbreakNumber >= breakNumber)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        Boolean TermBetProcessing = false;
        Boolean Term_Bet_Mode_Betting_Status = false;
        StringBuilder Term_Bet_Mode_Url_Param_String;
        int Term_Bet_Mode_Power_Odd_Money = 0;
        int Term_Bet_Mode_Power_Even_Money = 0;
        int Term_Bet_Mode_Power_Under_Money = 0;
        int Term_Bet_Mode_Power_Over_Money = 0;
        int Term_Bet_Mode_Normal_Odd_Money = 0;
        int Term_Bet_Mode_Normal_Even_Money = 0;
        int Term_Bet_Mode_Normal_Under_Money = 0;
        int Term_Bet_Mode_Normal_Over_Money = 0;
        int Term_Bet_Mode_All_Betting_Money = 0;
        private void Term_Mode_Betting_Process()
        {
            TermBetProcessing = true;

            Term_Bet_Mode_Power_Odd_Money = 0;
            Term_Bet_Mode_Power_Even_Money = 0;
            Term_Bet_Mode_Power_Under_Money = 0;
            Term_Bet_Mode_Power_Over_Money = 0;
            Term_Bet_Mode_Normal_Odd_Money = 0;
            Term_Bet_Mode_Normal_Even_Money = 0;
            Term_Bet_Mode_Normal_Under_Money = 0;
            Term_Bet_Mode_Normal_Over_Money = 0;
            Term_Bet_Mode_All_Betting_Money = 0;

            if (bettingTerm1)
            {
                int betmoney = int.Parse(Regex.Replace(termBetMoney1.Text, @"\D", ""));
                if (termBetPick1.Text.Equals("홀"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파홀";
                    }
                    Term_Bet_Mode_Power_Odd_Money += betmoney;
                }
                else if (termBetPick1.Text.Equals("짝"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파짝";
                    }
                    Term_Bet_Mode_Power_Even_Money += betmoney;
                }
                if (termBetPick1.Text.Equals("언"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파언더";
                    }
                    Term_Bet_Mode_Power_Under_Money += betmoney;
                }
                else if (termBetPick1.Text.Equals("오"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파오버";
                    }
                    Term_Bet_Mode_Power_Over_Money += betmoney;
                }
            }
            if (bettingTerm2)
            {
                int betmoney = int.Parse(Regex.Replace(termBetMoney2.Text, @"\D", ""));
                if (termBetPick2.Text.Equals("홀"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파홀";
                    }
                    Term_Bet_Mode_Power_Odd_Money += betmoney;
                }
                else if (termBetPick2.Text.Equals("짝"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파짝";
                    }
                    Term_Bet_Mode_Power_Even_Money += betmoney;
                }
                if (termBetPick2.Text.Equals("언"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파언더";
                    }
                    Term_Bet_Mode_Power_Under_Money += betmoney;
                }
                else if (termBetPick2.Text.Equals("오"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파오버";
                    }
                    Term_Bet_Mode_Power_Over_Money += betmoney;
                }
            }
            if (bettingTerm3)
            {
                int betmoney = int.Parse(Regex.Replace(termBetMoney3.Text, @"\D", ""));
                if (termBetPick3.Text.Equals("홀"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파홀";
                    }
                    Term_Bet_Mode_Power_Odd_Money += betmoney;
                }
                else if (termBetPick3.Text.Equals("짝"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파짝";
                    }
                    Term_Bet_Mode_Power_Even_Money += betmoney;
                }
                if (termBetPick3.Text.Equals("언"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파언더";
                    }
                    Term_Bet_Mode_Power_Under_Money += betmoney;
                }
                else if (termBetPick3.Text.Equals("오"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파오버";
                    }
                    Term_Bet_Mode_Power_Over_Money += betmoney;
                }
            }
            if (bettingTerm4)
            {
                int betmoney = int.Parse(Regex.Replace(termBetMoney4.Text, @"\D", ""));
                if (termBetPick4.Text.Equals("홀"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파홀";
                    }
                    Term_Bet_Mode_Power_Odd_Money += betmoney;
                }
                else if (termBetPick4.Text.Equals("짝"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파짝";
                    }
                    Term_Bet_Mode_Power_Even_Money += betmoney;
                }
                if (termBetPick4.Text.Equals("언"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파언더";
                    }
                    Term_Bet_Mode_Power_Under_Money += betmoney;
                }
                else if (termBetPick4.Text.Equals("오"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파오버";
                    }
                    Term_Bet_Mode_Power_Over_Money += betmoney;
                }
            }
            if (bettingTerm5)
            {
                int betmoney = int.Parse(Regex.Replace(termBetMoney5.Text, @"\D", ""));
                if (termBetPick5.Text.Equals("홀"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파홀";
                    }
                    Term_Bet_Mode_Power_Odd_Money += betmoney;
                }
                else if (termBetPick5.Text.Equals("짝"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파짝";
                    }
                    Term_Bet_Mode_Power_Even_Money += betmoney;
                }
                if (termBetPick5.Text.Equals("언"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파언더";
                    }
                    Term_Bet_Mode_Power_Under_Money += betmoney;
                }
                else if (termBetPick5.Text.Equals("오"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파오버";
                    }
                    Term_Bet_Mode_Power_Over_Money += betmoney;
                }
            }
            if (bettingTerm6)
            {
                int betmoney = int.Parse(Regex.Replace(termBetMoney6.Text, @"\D", ""));
                if (termBetPick6.Text.Equals("홀"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파홀";
                    }
                    Term_Bet_Mode_Power_Odd_Money += betmoney;
                }
                else if (termBetPick6.Text.Equals("짝"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파짝";
                    }
                    Term_Bet_Mode_Power_Even_Money += betmoney;
                }
                if (termBetPick6.Text.Equals("언"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파언더";
                    }
                    Term_Bet_Mode_Power_Under_Money += betmoney;
                }
                else if (termBetPick6.Text.Equals("오"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파오버";
                    }
                    Term_Bet_Mode_Power_Over_Money += betmoney;
                }
            }
            Term_Bet_Mode_Betting_Processing_Final();
        }


        private void Term_Bet_Mode_Betting_Processing_Final()
        {
            Term_Bet_Mode_All_Betting_Money = Term_Bet_Mode_Power_Odd_Money + Term_Bet_Mode_Power_Even_Money + Term_Bet_Mode_Power_Under_Money + Term_Bet_Mode_Power_Over_Money
                            + Term_Bet_Mode_Normal_Odd_Money + Term_Bet_Mode_Normal_Even_Money + Term_Bet_Mode_Normal_Under_Money + Term_Bet_Mode_Normal_Over_Money;

            if (Term_Bet_Mode_All_Betting_Money >= 100)
            {
                TermInning = 0;
                startInning = 0;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += Term_Bet_Mode_All_Betting_Money;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                    UtilModel.UserOwnMoney -= Term_Bet_Mode_All_Betting_Money;

                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                    logger.Info("[파홀 : " + Term_Bet_Mode_Power_Odd_Money + "][파짝 : " + Term_Bet_Mode_Power_Even_Money + "][파언 : " + Term_Bet_Mode_Power_Under_Money + "][파오 : " + Term_Bet_Mode_Power_Over_Money
                        + "][일홀 : " + Term_Bet_Mode_Normal_Odd_Money + "][일짝 : " + Term_Bet_Mode_Normal_Even_Money + "][일언 : " + Term_Bet_Mode_Normal_Under_Money + "][일오 : " + Term_Bet_Mode_Normal_Over_Money + "]");
                    Term_Bet_Mode_Betting_Status = true;
                }
                else
                {
                    Term_Bet_Mode_Url_Param_String = new StringBuilder();
                    Term_Bet_Mode_Url_Param_String.Append(UtilModel.UserSiteUrlAddress);
                    Term_Bet_Mode_Url_Param_String.Append(":8082/api/bet");
                    Term_Bet_Mode_Url_Param_String.AppendFormat("?userid={0}", UtilModel.UserId);
                    Term_Bet_Mode_Url_Param_String.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&gm={0}", "PWB");
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&tdate={0}", TodayDate);

                    Term_Bet_Mode_Url_Param_String.AppendFormat("&rno={0}", PowerBall_Now_All_Inning.ToString());
                    if (Term_Bet_Mode_Power_Odd_Money > 0)
                    {
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&pp1={0}", Term_Bet_Mode_Power_Odd_Money);
                    }
                    if (Term_Bet_Mode_Power_Even_Money > 0)
                    {
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&pp2={0}", Term_Bet_Mode_Power_Even_Money);
                    }
                    if (Term_Bet_Mode_Power_Under_Money > 0)
                    {
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&pp3={0}", Term_Bet_Mode_Power_Under_Money);
                    }
                    if (Term_Bet_Mode_Power_Over_Money > 0)
                    {
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&pp4={0}", Term_Bet_Mode_Power_Over_Money);
                    }
                    if (Term_Bet_Mode_Normal_Odd_Money > 0)
                    {
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&pp5={0}", Term_Bet_Mode_Normal_Odd_Money);
                    }
                    if (Term_Bet_Mode_Normal_Even_Money > 0)
                    {
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&pp6={0}", Term_Bet_Mode_Normal_Even_Money);
                    }
                    if (Term_Bet_Mode_Normal_Under_Money > 0)
                    {
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&pp7={0}", Term_Bet_Mode_Normal_Under_Money);
                    }
                    if (Term_Bet_Mode_Normal_Over_Money > 0)
                    {
                        Term_Bet_Mode_Url_Param_String.AppendFormat("&pp8={0}", Term_Bet_Mode_Normal_Over_Money);
                    }
                    Term_Bet_Mode_Url_Param_String.AppendFormat("&nonce={0}", Term_Bet_Mode_Random_Nonce);

                    String Message = null;
                    int CountResult = 0;
                    while (true)
                    {
                        try
                        {
                            var returnMessage = UtilModel.MakeAsyncRequest(Term_Bet_Mode_Url_Param_String.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                break;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Term_Bet_Mode_Url_Param_String.ToString());
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    break;
                                }
                                if (BetRemainingTime < 30)
                                {
                                    break;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Term_Bet_Mode_Url_Param_String.ToString());
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                break;
                            }
                            if (BetRemainingTime < 30)
                            {
                                break;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    if (!Message.Contains("ret_code"))
                    {
                        Term_Bet_Mode_Power_Odd_Money = 0;
                        Term_Bet_Mode_Power_Even_Money = 0;
                        Term_Bet_Mode_Power_Under_Money = 0;
                        Term_Bet_Mode_Power_Over_Money = 0;
                        Term_Bet_Mode_Normal_Odd_Money = 0;
                        Term_Bet_Mode_Normal_Even_Money = 0;
                        Term_Bet_Mode_Normal_Under_Money = 0;
                        Term_Bet_Mode_Normal_Over_Money = 0;

                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += Term_Bet_Mode_All_Betting_Money;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                            txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                            String bettingMoneyString = "[조건모드|배팅완료][" + PowerBall_Now_All_Inning + " 회][파홀:" + Term_Bet_Mode_Power_Odd_Money + "][파짝:" + Term_Bet_Mode_Power_Even_Money + "][파언더:" + Term_Bet_Mode_Power_Under_Money + "][파오버:" + Term_Bet_Mode_Power_Over_Money
                                + "][일홀:" + Term_Bet_Mode_Normal_Odd_Money + "][일짝:" + Term_Bet_Mode_Normal_Even_Money + "][일언더:" + Term_Bet_Mode_Normal_Under_Money + "][일오버:" + Term_Bet_Mode_Normal_Over_Money + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            Term_Bet_Mode_Betting_Status = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }

                if (Term_Bet_Mode_Betting_Status)
                {
                    String str = "";
                    String str2 = "";
                    ListViewItem item;
                    if (Term_Bet_Mode_Power_Odd_Money >= 100)
                    {
                        str += "[파홀 : " + UtilModel.StringFormatChanged(Term_Bet_Mode_Power_Odd_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Term_Bet_Mode_Power_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        termBetRegistListView.Items.Add(item);
                    }
                    if (Term_Bet_Mode_Power_Even_Money >= 100)
                    {
                        str += "[파짝 : " + UtilModel.StringFormatChanged(Term_Bet_Mode_Power_Even_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Term_Bet_Mode_Power_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        termBetRegistListView.Items.Add(item);
                    }
                    if (Term_Bet_Mode_Power_Under_Money >= 100)
                    {
                        str += "[파언 : " + UtilModel.StringFormatChanged(Term_Bet_Mode_Power_Under_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Term_Bet_Mode_Power_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        termBetRegistListView.Items.Add(item);
                    }
                    if (Term_Bet_Mode_Power_Over_Money >= 100)
                    {
                        str += "[파오 : " + UtilModel.StringFormatChanged(Term_Bet_Mode_Power_Over_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Term_Bet_Mode_Power_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        termBetRegistListView.Items.Add(item);
                    }
                    if (Term_Bet_Mode_Normal_Odd_Money >= 100)
                    {
                        str2 += "[일홀 : " + UtilModel.StringFormatChanged(Term_Bet_Mode_Normal_Odd_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Term_Bet_Mode_Normal_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        termBetRegistListView.Items.Add(item);
                    }
                    if (Term_Bet_Mode_Normal_Even_Money >= 100)
                    {
                        str2 += "[일짝 : " + UtilModel.StringFormatChanged(Term_Bet_Mode_Normal_Even_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Term_Bet_Mode_Normal_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        termBetRegistListView.Items.Add(item);
                    }
                    if (Term_Bet_Mode_Normal_Under_Money >= 100)
                    {
                        str2 += "[일언 : " + UtilModel.StringFormatChanged(Term_Bet_Mode_Normal_Under_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Term_Bet_Mode_Normal_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        termBetRegistListView.Items.Add(item);
                    }
                    if (Term_Bet_Mode_Normal_Over_Money >= 100)
                    {
                        str2 += "[일오 : " + UtilModel.StringFormatChanged(Term_Bet_Mode_Normal_Over_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Term_Bet_Mode_Normal_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        termBetRegistListView.Items.Add(item);
                    }
                    if (str.Length > 1)
                    {
                        txtLogAdd(str, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                    if (str2.Length > 1)
                    {
                        txtLogAdd(str2, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                }
            }
        }

        Boolean DecalBetProcessing = false;
        Boolean Decal_Mode_Betting_Status = false;
        StringBuilder Decal_Mode_Url_Param_String;
        int Decal_Mode_Power_Odd_Money = 0;
        int Decal_Mode_Power_Even_Money = 0;
        int Decal_Mode_Power_Under_Money = 0;
        int Decal_Mode_Power_Over_Money = 0;
        int Decal_Mode_Normal_Odd_Money = 0;
        int Decal_Mode_Normal_Even_Money = 0;
        int Decal_Mode_Normal_Under_Money = 0;
        int Decal_Mode_Normal_Over_Money = 0;
        int Decal_Mode_All_Betting_Money = 0;
        private void Decal_Mode_Betting_Process()
        {
            DecalBetProcessing = true;

            Decal_Mode_Power_Odd_Money = 0;
            Decal_Mode_Power_Even_Money = 0;
            Decal_Mode_Power_Under_Money = 0;
            Decal_Mode_Power_Over_Money = 0;
            Decal_Mode_Normal_Odd_Money = 0;
            Decal_Mode_Normal_Even_Money = 0;
            Decal_Mode_Normal_Under_Money = 0;
            Decal_Mode_Normal_Over_Money = 0;
            Decal_Mode_All_Betting_Money = 0;

            if (checkBoxDecalPowerBallOddEven.Checked)
            {
                int betmoney = int.Parse(Regex.Replace(textBoxDecalPowerBallOddEvenBetMoney.Text, @"\D", ""));
                if (textBoxDecalPowerBallOddEvenPick.Text.Equals("홀"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파홀";
                    }
                    Decal_Mode_Power_Odd_Money = betmoney;
                }
                else if (textBoxDecalPowerBallOddEvenPick.Text.Equals("짝"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파짝";
                    }
                    Decal_Mode_Power_Even_Money = betmoney;
                }
            }
            if (checkBoxDecalPowerBallUnderOver.Checked)
            {
                int betmoney = int.Parse(Regex.Replace(textBoxDecalPowerBallUnderOverBetMoney.Text, @"\D", ""));
                if (textBoxDecalPowerBallUnderOverPick.Text.Contains("언"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파언더";
                    }
                    Decal_Mode_Power_Under_Money = betmoney;
                }
                else if (textBoxDecalPowerBallUnderOverPick.Text.Contains("오"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "파오버";
                    }
                    Decal_Mode_Power_Over_Money = betmoney;
                }
            }
            if (checkBoxDecalNormalBallOddEven.Checked)
            {
                int betmoney = int.Parse(Regex.Replace(textBoxDecalNormalBallOddEvenBetMoney.Text, @"\D", ""));
                if (textBoxDecalNormalBallOddEvenPick.Text.Contains("홀"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "일홀";
                    }
                    Decal_Mode_Normal_Odd_Money = betmoney;
                }
                else if (textBoxDecalNormalBallOddEvenPick.Text.Contains("짝"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "일짝";
                    }
                    Decal_Mode_Normal_Even_Money = betmoney;
                }
            }
            if (checkBoxDecalNormalBallUnderOver.Checked)
            {
                int betmoney = int.Parse(Regex.Replace(textBoxDecalNormalBallUnderOverBetMoney.Text, @"\D", ""));
                if (textBoxDecalNormalBallUnderOverPick.Text.Contains("언"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "일언더";
                    }
                    Decal_Mode_Normal_Under_Money = betmoney;
                }
                else if (textBoxDecalNormalBallUnderOverPick.Text.Contains("오"))
                {
                    if (betmoney > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = betmoney;
                        UserMaximumSelectPick = "일오버";
                    }
                    Decal_Mode_Normal_Over_Money = betmoney;
                }
            }
            Decal_Mode_Betting_Processing_Final();
        }

        private void Decal_Mode_Betting_Processing_Final()
        {
            Decal_Mode_All_Betting_Money = Decal_Mode_Power_Odd_Money + Decal_Mode_Power_Even_Money + Decal_Mode_Power_Under_Money + Decal_Mode_Power_Over_Money
                            + Decal_Mode_Normal_Odd_Money + Decal_Mode_Normal_Even_Money + Decal_Mode_Normal_Under_Money + Decal_Mode_Normal_Over_Money;

            if (Decal_Mode_All_Betting_Money >= 100)
            {
                TermInning = 0;
                startInning = 0;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += Decal_Mode_All_Betting_Money;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                    UtilModel.UserOwnMoney -= Decal_Mode_All_Betting_Money;

                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                    logger.Info("[파홀 : " + Decal_Mode_Power_Odd_Money + "][파짝 : " + Decal_Mode_Power_Even_Money + "][파언 : " + Decal_Mode_Power_Under_Money + "][파오 : " + Decal_Mode_Power_Over_Money
                        + "][일홀 : " + Decal_Mode_Normal_Odd_Money + "][일짝 : " + Decal_Mode_Normal_Even_Money + "][일언 : " + Decal_Mode_Normal_Under_Money + "][일오 : " + Decal_Mode_Normal_Over_Money + "]");
                    Decal_Mode_Betting_Status = true;
                }
                else
                {
                    Decal_Mode_Url_Param_String = new StringBuilder();
                    Decal_Mode_Url_Param_String.Append(UtilModel.UserSiteUrlAddress);
                    Decal_Mode_Url_Param_String.Append(":8082/api/bet");
                    Decal_Mode_Url_Param_String.AppendFormat("?userid={0}", UtilModel.UserId);
                    Decal_Mode_Url_Param_String.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);

                        Decal_Mode_Url_Param_String.AppendFormat("&gm={0}", "PWB");
                        Decal_Mode_Url_Param_String.AppendFormat("&tdate={0}", TodayDate);
                        Decal_Mode_Url_Param_String.AppendFormat("&rno={0}", PowerBall_Now_All_Inning.ToString());

                    if (Decal_Mode_Power_Odd_Money > 0)
                    {
                        Decal_Mode_Url_Param_String.AppendFormat("&pp1={0}", Decal_Mode_Power_Odd_Money);
                    }
                    if (Decal_Mode_Power_Even_Money > 0)
                    {
                        Decal_Mode_Url_Param_String.AppendFormat("&pp2={0}", Decal_Mode_Power_Even_Money);
                    }
                    if (Decal_Mode_Power_Under_Money > 0)
                    {
                        Decal_Mode_Url_Param_String.AppendFormat("&pp3={0}", Decal_Mode_Power_Under_Money);
                    }
                    if (Decal_Mode_Power_Over_Money > 0)
                    {
                        Decal_Mode_Url_Param_String.AppendFormat("&pp4={0}", Decal_Mode_Power_Over_Money);
                    }
                    if (Decal_Mode_Normal_Odd_Money > 0)
                    {
                        Decal_Mode_Url_Param_String.AppendFormat("&pp5={0}", Decal_Mode_Normal_Odd_Money);
                    }
                    if (Decal_Mode_Normal_Even_Money > 0)
                    {
                        Decal_Mode_Url_Param_String.AppendFormat("&pp6={0}", Decal_Mode_Normal_Even_Money);
                    }
                    if (Decal_Mode_Normal_Under_Money > 0)
                    {
                        Decal_Mode_Url_Param_String.AppendFormat("&pp7={0}", Decal_Mode_Normal_Under_Money);
                    }
                    if (Decal_Mode_Normal_Over_Money > 0)
                    {
                        Decal_Mode_Url_Param_String.AppendFormat("&pp8={0}", Decal_Mode_Normal_Over_Money);
                    }
                    Decal_Mode_Url_Param_String.AppendFormat("&nonce={0}", Decal_Mode_Random_Nonce);

                    String Message = null;
                    int CountResult = 0;
                    while (true)
                    {
                        try
                        {
                            var returnMessage = UtilModel.MakeAsyncRequest(Decal_Mode_Url_Param_String.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                break;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Decal_Mode_Url_Param_String.ToString());
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    break;
                                }
                                if (BetRemainingTime < 30)
                                {
                                    break;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Decal_Mode_Url_Param_String.ToString());
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                break;
                            }
                            if (BetRemainingTime < 30)
                            {
                                break;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    if (!Message.Contains("ret_code"))
                    {
                        Decal_Mode_Power_Odd_Money = 0;
                        Decal_Mode_Power_Even_Money = 0;
                        Decal_Mode_Power_Under_Money = 0;
                        Decal_Mode_Power_Over_Money = 0;
                        Decal_Mode_Normal_Odd_Money = 0;
                        Decal_Mode_Normal_Even_Money = 0;
                        Decal_Mode_Normal_Under_Money = 0;
                        Decal_Mode_Normal_Over_Money = 0;

                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += Decal_Mode_All_Betting_Money;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                            txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                            String bettingMoneyString = "[데칼모드|배팅완료][" + PowerBall_Now_All_Inning + " 회][파홀:" + Decal_Mode_Power_Odd_Money + "][파짝:" + Decal_Mode_Power_Even_Money + "][파언더:" + Decal_Mode_Power_Under_Money + "][파오버:" + Decal_Mode_Power_Over_Money
                                + "][일홀:" + Decal_Mode_Normal_Odd_Money + "][일짝:" + Decal_Mode_Normal_Even_Money + "][일언더:" + Decal_Mode_Normal_Under_Money + "][일오버:" + Decal_Mode_Normal_Over_Money + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            Decal_Mode_Betting_Status = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }

                if (Decal_Mode_Betting_Status)
                {
                    String str = "";
                    String str2 = "";
                    ListViewItem item;
                    if (Decal_Mode_Power_Odd_Money >= 100)
                    {
                        str += "[파홀 : " + UtilModel.StringFormatChanged(Decal_Mode_Power_Odd_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Decal_Mode_Power_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("데칼모드");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Decal_Mode_Power_Even_Money >= 100)
                    {
                        str += "[파짝 : " + UtilModel.StringFormatChanged(Decal_Mode_Power_Even_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Decal_Mode_Power_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("데칼모드");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Decal_Mode_Power_Under_Money >= 100)
                    {
                        str += "[파언 : " + UtilModel.StringFormatChanged(Decal_Mode_Power_Under_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Decal_Mode_Power_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("데칼모드");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Decal_Mode_Power_Over_Money >= 100)
                    {
                        str += "[파오 : " + UtilModel.StringFormatChanged(Decal_Mode_Power_Over_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Decal_Mode_Power_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("데칼모드");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Decal_Mode_Normal_Odd_Money >= 100)
                    {
                        str2 += "[일홀 : " + UtilModel.StringFormatChanged(Decal_Mode_Normal_Odd_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Decal_Mode_Normal_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("데칼모드");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Decal_Mode_Normal_Even_Money >= 100)
                    {
                        str2 += "[일짝 : " + UtilModel.StringFormatChanged(Decal_Mode_Normal_Even_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Decal_Mode_Normal_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("데칼모드");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Decal_Mode_Normal_Under_Money >= 100)
                    {
                        str2 += "[일언 : " + UtilModel.StringFormatChanged(Decal_Mode_Normal_Under_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Decal_Mode_Normal_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("데칼모드");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Decal_Mode_Normal_Over_Money >= 100)
                    {
                        str2 += "[일오 : " + UtilModel.StringFormatChanged(Decal_Mode_Normal_Over_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Decal_Mode_Normal_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("데칼모드");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (str.Length > 1)
                    {
                        txtLogAdd(str, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                    if (str2.Length > 1)
                    {
                        txtLogAdd(str2, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                }
            }
        }

        Boolean Cruise_Betting_Mode_Betting_Complete = false;
        Boolean Cruise_Betting_Mode_Betting_Status = false;
        StringBuilder Cruise_Betting_Mode_Url_Param_String;
        int Cruise_Betting_Mode_Power_Odd_Money = 0;
        int Cruise_Betting_Mode_Power_Even_Money = 0;
        int Cruise_Betting_Mode_Power_Under_Money = 0;
        int Cruise_Betting_Mode_Power_Over_Money = 0;
        int Cruise_Betting_Mode_Normal_Odd_Money = 0;
        int Cruise_Betting_Mode_Normal_Even_Money = 0;
        int Cruise_Betting_Mode_Normal_Under_Money = 0;
        int Cruise_Betting_Mode_Normal_Over_Money = 0;
        int Cruise_Betting_Mode_All_Betting_Money = 0;

        int cruiseBettingPowerBallOddEvenFirstOrSecond = 1;
        int cruiseBettingPowerBallUnderOverFirstOrSecond = 1;
        int cruiseBettingNormalBallOddEvenFirstOrSecond = 1;
        int cruiseBettingNormalBallUnderOverFirstOrSecond = 1;

        private void Cruise_Betting_Mode_Betting_Process()
        {
            Cruise_Betting_Mode_Betting_Complete = true;
            Cruise_Betting_Mode_Betting_Status = false;

            Cruise_Betting_Mode_Power_Odd_Money = 0;
            Cruise_Betting_Mode_Power_Even_Money = 0;
            Cruise_Betting_Mode_Power_Under_Money = 0;
            Cruise_Betting_Mode_Power_Over_Money = 0;
            Cruise_Betting_Mode_Normal_Odd_Money = 0;
            Cruise_Betting_Mode_Normal_Even_Money = 0;
            Cruise_Betting_Mode_Normal_Under_Money = 0;
            Cruise_Betting_Mode_Normal_Over_Money = 0;

            Cruise_Betting_Mode_All_Betting_Money = 0;

            if (cruiseBettingPowerBallOddEvenUseCheckBox.Checked)
            {
                if (cruiseBettingPowerBallOddEvenBetLevelComboBox.Text.Equals("0"))
                {
                    cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "1";
                }
            }
            if (cruiseBettingPowerBallUnderOverUseCheckBox.Checked)
            {
                if (cruiseBettingPowerBallUnderOverBetLevelComboBox.Text.Equals("0"))
                {
                    cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "1";
                }
            }
            if (cruiseBettingNormalBallOddEvenUseCheckBox.Checked)
            {
                if (cruiseBettingNormalBallOddEvenBetLevelComboBox.Text.Equals("0"))
                {
                    cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "1";
                }
            }
            if (cruiseBettingNormalBallUnderOverUseCheckBox.Checked)
            {
                if (cruiseBettingNormalBallUnderOverBetLevelComboBox.Text.Equals("0"))
                {
                    cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "1";
                }
            }
            Cruise_Betting_Mode_Betting_Processing_All_Sum();
            Cruise_Betting_Mode_Betting_Processing_Final();
        }

        private void Cruise_Betting_Mode_Betting_Processing_All_Sum()
        {
            if (cruiseBettingPowerBallOddEvenUseCheckBox.Checked)
            {
                if (cruiseBettingPowerBallOddEvenSelectPick.Text.Equals("홀"))
                {
                    Cruise_Betting_Mode_Power_Odd_Money = int.Parse(Regex.Replace(cruiseBettingPowerBallOddEvenBetMoney.Text, @"\D", ""));

                    if (Cruise_Betting_Mode_Power_Odd_Money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = Cruise_Betting_Mode_Power_Odd_Money;
                        UserMaximumSelectPick = "파홀";
                    }
                }
                else if (cruiseBettingPowerBallOddEvenSelectPick.Text.Equals("짝"))
                {
                    Cruise_Betting_Mode_Power_Even_Money = int.Parse(Regex.Replace(cruiseBettingPowerBallOddEvenBetMoney.Text, @"\D", ""));
                    if (Cruise_Betting_Mode_Power_Even_Money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = Cruise_Betting_Mode_Power_Even_Money;
                        UserMaximumSelectPick = "파짝";
                    }
                }
            }
            if (cruiseBettingPowerBallUnderOverUseCheckBox.Checked)
            {
                if (cruiseBettingPowerBallUnderOverSelectPick.Text.Equals("언"))
                {
                    Cruise_Betting_Mode_Power_Under_Money = int.Parse(Regex.Replace(cruiseBettingPowerBallUnderOverBetMoney.Text, @"\D", ""));
                    if (Cruise_Betting_Mode_Power_Under_Money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = Cruise_Betting_Mode_Power_Under_Money;
                        UserMaximumSelectPick = "파언더";
                    }
                }
                else if (cruiseBettingPowerBallUnderOverSelectPick.Text.Equals("오"))
                {
                    Cruise_Betting_Mode_Power_Over_Money = int.Parse(Regex.Replace(cruiseBettingPowerBallUnderOverBetMoney.Text, @"\D", ""));
                    if (Cruise_Betting_Mode_Power_Over_Money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = Cruise_Betting_Mode_Power_Over_Money;
                        UserMaximumSelectPick = "파오버";
                    }
                }
            }
            if (cruiseBettingNormalBallOddEvenUseCheckBox.Checked)
            {
                if (cruiseBettingNormalBallOddEvenSelectPick.Text.Equals("홀"))
                {
                    Cruise_Betting_Mode_Normal_Odd_Money = int.Parse(Regex.Replace(cruiseBettingNormalBallOddEvenBetMoney.Text, @"\D", ""));
                    if (Cruise_Betting_Mode_Normal_Odd_Money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = Cruise_Betting_Mode_Normal_Odd_Money;
                        UserMaximumSelectPick = "일홀";
                    }
                }
                else if (cruiseBettingNormalBallOddEvenSelectPick.Text.Equals("짝"))
                {
                    Cruise_Betting_Mode_Normal_Even_Money = int.Parse(Regex.Replace(cruiseBettingNormalBallOddEvenBetMoney.Text, @"\D", ""));
                    if (Cruise_Betting_Mode_Normal_Even_Money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = Cruise_Betting_Mode_Normal_Even_Money;
                        UserMaximumSelectPick = "일짝";
                    }
                }
            }
            if (cruiseBettingNormalBallUnderOverUseCheckBox.Checked)
            {
                if (cruiseBettingNormalBallUnderOverSelectPick.Text.Equals("언"))
                {
                    Cruise_Betting_Mode_Normal_Under_Money = int.Parse(Regex.Replace(cruiseBettingNormalBallUnderOverBetMoney.Text, @"\D", ""));
                    if (Cruise_Betting_Mode_Normal_Under_Money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = Cruise_Betting_Mode_Normal_Under_Money;
                        UserMaximumSelectPick = "일언더";
                    }
                }
                else if (cruiseBettingNormalBallUnderOverSelectPick.Text.Equals("오"))
                {
                    Cruise_Betting_Mode_Normal_Over_Money = int.Parse(Regex.Replace(cruiseBettingNormalBallUnderOverBetMoney.Text, @"\D", ""));
                    if (Cruise_Betting_Mode_Normal_Over_Money > UserMaximumSelectPick_BetMoney)
                    {
                        UserMaximumSelectPick_BetMoney = Cruise_Betting_Mode_Normal_Over_Money;
                        UserMaximumSelectPick = "일오버";
                    }
                }
            }
        }

        private void Cruise_Betting_Mode_Betting_Processing_Final()
        {
            Cruise_Betting_Mode_All_Betting_Money = Cruise_Betting_Mode_Power_Odd_Money + Cruise_Betting_Mode_Power_Even_Money + Cruise_Betting_Mode_Power_Under_Money + Cruise_Betting_Mode_Power_Over_Money
                            + Cruise_Betting_Mode_Normal_Odd_Money + Cruise_Betting_Mode_Normal_Even_Money + Cruise_Betting_Mode_Normal_Under_Money + Cruise_Betting_Mode_Normal_Over_Money;

            if (Cruise_Betting_Mode_All_Betting_Money >= 100)
            {
                TermInning = 0;
                startInning = 0;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += Cruise_Betting_Mode_All_Betting_Money;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                    UtilModel.UserOwnMoney -= Cruise_Betting_Mode_All_Betting_Money;

                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                    logger.Info("[파홀 : " + Cruise_Betting_Mode_Power_Odd_Money + "][파짝 : " + Cruise_Betting_Mode_Power_Even_Money + "][파언 : " + Cruise_Betting_Mode_Power_Under_Money + "][파오 : " + Cruise_Betting_Mode_Power_Over_Money
                        + "][일홀 : " + Cruise_Betting_Mode_Normal_Odd_Money + "][일짝 : " + Cruise_Betting_Mode_Normal_Even_Money + "][일언 : " + Cruise_Betting_Mode_Normal_Under_Money + "][일오 : " + Cruise_Betting_Mode_Normal_Over_Money + "]");
                    Cruise_Betting_Mode_Betting_Status = true;
                }
                else
                {
                    Cruise_Betting_Mode_Url_Param_String = new StringBuilder();
                    Cruise_Betting_Mode_Url_Param_String.Append(UtilModel.UserSiteUrlAddress);
                    Cruise_Betting_Mode_Url_Param_String.Append(":8082/api/bet");
                    Cruise_Betting_Mode_Url_Param_String.AppendFormat("?userid={0}", UtilModel.UserId);
                    Cruise_Betting_Mode_Url_Param_String.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);

                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&gm={0}", "PWB");
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&tdate={0}", TodayDate);
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&rno={0}", PowerBall_Now_All_Inning.ToString());

                    if (Cruise_Betting_Mode_Power_Odd_Money > 0)
                    {
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp1={0}", Cruise_Betting_Mode_Power_Odd_Money);
                    }
                    if (Cruise_Betting_Mode_Power_Even_Money > 0)
                    {
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp2={0}", Cruise_Betting_Mode_Power_Even_Money);
                    }
                    if (Cruise_Betting_Mode_Power_Under_Money > 0)
                    {
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp3={0}", Cruise_Betting_Mode_Power_Under_Money);
                    }
                    if (Cruise_Betting_Mode_Power_Over_Money > 0)
                    {
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp4={0}", Cruise_Betting_Mode_Power_Over_Money);
                    }
                    if (Cruise_Betting_Mode_Normal_Odd_Money > 0)
                    {
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp5={0}", Cruise_Betting_Mode_Normal_Odd_Money);
                    }
                    if (Cruise_Betting_Mode_Normal_Even_Money > 0)
                    {
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp6={0}", Cruise_Betting_Mode_Normal_Even_Money);
                    }
                    if (Cruise_Betting_Mode_Normal_Under_Money > 0)
                    {
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp7={0}", Cruise_Betting_Mode_Normal_Under_Money);
                    }
                    if (Cruise_Betting_Mode_Normal_Over_Money > 0)
                    {
                        Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp8={0}", Cruise_Betting_Mode_Normal_Over_Money);
                    }
                    Cruise_Betting_Mode_Url_Param_String.AppendFormat("&nonce={0}", Cruise_Mode_Random_Nonce);

                    String Message = null;
                    int CountResult = 0;
                    while (true)
                    {
                        try
                        {
                            //Uri myUri = new Uri(sb);
                            var returnMessage = UtilModel.MakeAsyncRequest(Cruise_Betting_Mode_Url_Param_String.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                break;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Cruise_Betting_Mode_Url_Param_String.ToString());
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    break;
                                }
                                if (BetRemainingTime < 30)
                                {
                                    break;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Cruise_Betting_Mode_Url_Param_String.ToString());
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                break;
                            }
                            if (BetRemainingTime < 30)
                            {
                                break;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    if (!Message.Contains("ret_code"))
                    {
                        Cruise_Betting_Mode_Power_Odd_Money = 0;
                        Cruise_Betting_Mode_Power_Even_Money = 0;
                        Cruise_Betting_Mode_Power_Under_Money = 0;
                        Cruise_Betting_Mode_Power_Over_Money = 0;
                        Cruise_Betting_Mode_Normal_Odd_Money = 0;
                        Cruise_Betting_Mode_Normal_Even_Money = 0;
                        Cruise_Betting_Mode_Normal_Under_Money = 0;
                        Cruise_Betting_Mode_Normal_Over_Money = 0;

                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += Cruise_Betting_Mode_All_Betting_Money;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                            txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                            String bettingMoneyString = "[배팅완료][" + PowerBall_Now_All_Inning + " 회][파홀:" + Cruise_Betting_Mode_Power_Odd_Money + "][파짝:" + Cruise_Betting_Mode_Power_Even_Money + "][파언더:" + Cruise_Betting_Mode_Power_Under_Money + "][파오버:" + Cruise_Betting_Mode_Power_Over_Money
                                + "][일홀:" + Cruise_Betting_Mode_Normal_Odd_Money + "][일짝:" + Cruise_Betting_Mode_Normal_Even_Money + "][일언더:" + Cruise_Betting_Mode_Normal_Under_Money + "][일오버:" + Cruise_Betting_Mode_Normal_Over_Money + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            Cruise_Betting_Mode_Betting_Status = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }

                if (Cruise_Betting_Mode_Betting_Status)
                {
                    String str = "";
                    String str2 = "";
                    ListViewItem item;
                    if (Cruise_Betting_Mode_Power_Odd_Money >= 100)
                    {
                        str += "[파홀 : " + UtilModel.StringFormatChanged(Cruise_Betting_Mode_Power_Odd_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Cruise_Betting_Mode_Power_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add(UtilModel.getDateTime());
                        cruiseBetRegistListView.Items.Add(item);
                    }
                    if (Cruise_Betting_Mode_Power_Even_Money >= 100)
                    {
                        str += "[파짝 : " + UtilModel.StringFormatChanged(Cruise_Betting_Mode_Power_Even_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Cruise_Betting_Mode_Power_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add(UtilModel.getDateTime());
                        cruiseBetRegistListView.Items.Add(item);
                    }
                    if (Cruise_Betting_Mode_Power_Under_Money >= 100)
                    {
                        str += "[파언 : " + UtilModel.StringFormatChanged(Cruise_Betting_Mode_Power_Under_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Cruise_Betting_Mode_Power_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add(UtilModel.getDateTime());
                        cruiseBetRegistListView.Items.Add(item);
                    }
                    if (Cruise_Betting_Mode_Power_Over_Money >= 100)
                    {
                        str += "[파오 : " + UtilModel.StringFormatChanged(Cruise_Betting_Mode_Power_Over_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Cruise_Betting_Mode_Power_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add(UtilModel.getDateTime());
                        cruiseBetRegistListView.Items.Add(item);
                    }
                    if (Cruise_Betting_Mode_Normal_Odd_Money >= 100)
                    {
                        str2 += "[일홀 : " + UtilModel.StringFormatChanged(Cruise_Betting_Mode_Normal_Odd_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Cruise_Betting_Mode_Normal_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add(UtilModel.getDateTime());
                        cruiseBetRegistListView.Items.Add(item);
                    }
                    if (Cruise_Betting_Mode_Normal_Even_Money >= 100)
                    {
                        str2 += "[일짝 : " + UtilModel.StringFormatChanged(Cruise_Betting_Mode_Normal_Even_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Cruise_Betting_Mode_Normal_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add(UtilModel.getDateTime());
                        cruiseBetRegistListView.Items.Add(item);
                    }
                    if (Cruise_Betting_Mode_Normal_Under_Money >= 100)
                    {
                        str2 += "[일언 : " + UtilModel.StringFormatChanged(Cruise_Betting_Mode_Normal_Under_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Cruise_Betting_Mode_Normal_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add(UtilModel.getDateTime());
                        cruiseBetRegistListView.Items.Add(item);
                    }
                    if (Cruise_Betting_Mode_Normal_Over_Money >= 100)
                    {
                        str2 += "[일오 : " + UtilModel.StringFormatChanged(Cruise_Betting_Mode_Normal_Over_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Cruise_Betting_Mode_Normal_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add(UtilModel.getDateTime());
                        cruiseBetRegistListView.Items.Add(item);
                    }
                    if (str.Length > 1)
                    {
                        txtLogAdd(str, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                    if (str2.Length > 1)
                    {
                        txtLogAdd(str2, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                }
            }
        }

        bool HongKong_Cruise_Mode_Betting_Complete = false;
        Boolean HongKong_Cruise_Mode_Betting_Status = false;
        StringBuilder HongKong_Cruise_Betting_Mode_Url_Param_String;
        int HongKong_Cruise_Betting_Mode_Power_Odd_Money = 0;
        int HongKong_Cruise_Betting_Mode_Power_Even_Money = 0;
        int HongKong_Cruise_Betting_Mode_Power_Under_Money = 0;
        int HongKong_Cruise_Betting_Mode_Power_Over_Money = 0;
        int HongKong_Cruise_Betting_Mode_Normal_Odd_Money = 0;
        int HongKong_Cruise_Betting_Mode_Normal_Even_Money = 0;
        int HongKong_Cruise_Betting_Mode_Normal_Under_Money = 0;
        int HongKong_Cruise_Betting_Mode_Normal_Over_Money = 0;
        int HongKong_Cruise_Betting_Mode_All_Betting_Money = 0;
        private void HongKong_Cruise_Betting_Mode_Betting_Process()
        {
            HongKong_Cruise_Mode_Betting_Complete = true;
            HongKong_Cruise_Mode_Betting_Status = false;
            HongKong_Cruise_Betting_Mode_Power_Odd_Money = 0;
            HongKong_Cruise_Betting_Mode_Power_Even_Money = 0;
            HongKong_Cruise_Betting_Mode_Power_Under_Money = 0;
            HongKong_Cruise_Betting_Mode_Power_Over_Money = 0;
            HongKong_Cruise_Betting_Mode_Normal_Odd_Money = 0;
            HongKong_Cruise_Betting_Mode_Normal_Even_Money = 0;
            HongKong_Cruise_Betting_Mode_Normal_Under_Money = 0;
            HongKong_Cruise_Betting_Mode_Normal_Over_Money = 0;
            HongKong_Cruise_Betting_Mode_All_Betting_Money = 0;
            HongKong_Cruise_Betting_Mode_Betting_Processing_All_Sum();
            HongKong_Cruise_Betting_Mode_Betting_Processing_Final();
        }

        private void HongKong_Cruise_Betting_Mode_Betting_Processing_All_Sum()
        {
            CheckBox hongKongCruiseBetUseCheckBox;
            TextBox hongKongCruiseBetPickTextBox;
            TextBox hongKongCruiseBetMoneyTextBox;

            for (int findControl = 1; findControl <= 10; findControl++)
            {
                hongKongCruiseBetUseCheckBox = (Controls.Find("hongKongCruiseBetUseCheckBox" + findControl.ToString(), true)[0] as CheckBox);
                hongKongCruiseBetPickTextBox = (Controls.Find("hongKongCruiseBetPickTextBox" + findControl.ToString(), true)[0] as TextBox);
                hongKongCruiseBetMoneyTextBox = (Controls.Find("hongKongCruiseBetMoneyTextBox" + findControl.ToString(), true)[0] as TextBox);

                if (hongKongCruiseBetUseCheckBox.Checked)
                {
                    if (hongKongCruiseBetPickTextBox.Text.Equals("파홀"))
                    {
                        HongKong_Cruise_Betting_Mode_Power_Odd_Money += int.Parse(Regex.Replace(hongKongCruiseBetMoneyTextBox.Text, @"\D", ""));

                        if (HongKong_Cruise_Betting_Mode_Power_Odd_Money > UserMaximumSelectPick_BetMoney)
                        {
                            UserMaximumSelectPick_BetMoney = HongKong_Cruise_Betting_Mode_Power_Odd_Money;
                            UserMaximumSelectPick = "파홀";
                        }
                    }
                    else if (hongKongCruiseBetPickTextBox.Text.Equals("파짝"))
                    {
                        HongKong_Cruise_Betting_Mode_Power_Even_Money += int.Parse(Regex.Replace(hongKongCruiseBetMoneyTextBox.Text, @"\D", ""));
                        if (HongKong_Cruise_Betting_Mode_Power_Even_Money > UserMaximumSelectPick_BetMoney)
                        {
                            UserMaximumSelectPick_BetMoney = HongKong_Cruise_Betting_Mode_Power_Even_Money;
                            UserMaximumSelectPick = "파짝";
                        }
                    }
                    else if (hongKongCruiseBetPickTextBox.Text.Equals("파언"))
                    {
                        HongKong_Cruise_Betting_Mode_Power_Under_Money += int.Parse(Regex.Replace(hongKongCruiseBetMoneyTextBox.Text, @"\D", ""));
                        if (HongKong_Cruise_Betting_Mode_Power_Under_Money > UserMaximumSelectPick_BetMoney)
                        {
                            UserMaximumSelectPick_BetMoney = HongKong_Cruise_Betting_Mode_Power_Under_Money;
                            UserMaximumSelectPick = "파언";
                        }
                    }
                    else if (hongKongCruiseBetPickTextBox.Text.Equals("파오"))
                    {
                        HongKong_Cruise_Betting_Mode_Power_Over_Money += int.Parse(Regex.Replace(hongKongCruiseBetMoneyTextBox.Text, @"\D", ""));
                        if (HongKong_Cruise_Betting_Mode_Power_Over_Money > UserMaximumSelectPick_BetMoney)
                        {
                            UserMaximumSelectPick_BetMoney = HongKong_Cruise_Betting_Mode_Power_Over_Money;
                            UserMaximumSelectPick = "파오";
                        }
                    }
                    else if (hongKongCruiseBetPickTextBox.Text.Equals("일홀"))
                    {
                        HongKong_Cruise_Betting_Mode_Normal_Odd_Money += int.Parse(Regex.Replace(hongKongCruiseBetMoneyTextBox.Text, @"\D", ""));
                        if (HongKong_Cruise_Betting_Mode_Normal_Odd_Money > UserMaximumSelectPick_BetMoney)
                        {
                            UserMaximumSelectPick_BetMoney = HongKong_Cruise_Betting_Mode_Normal_Odd_Money;
                            UserMaximumSelectPick = "일홀";
                        }
                    }
                    else if (hongKongCruiseBetPickTextBox.Text.Equals("일짝"))
                    {
                        HongKong_Cruise_Betting_Mode_Normal_Even_Money += int.Parse(Regex.Replace(hongKongCruiseBetMoneyTextBox.Text, @"\D", ""));
                        if (HongKong_Cruise_Betting_Mode_Normal_Even_Money > UserMaximumSelectPick_BetMoney)
                        {
                            UserMaximumSelectPick_BetMoney = HongKong_Cruise_Betting_Mode_Normal_Even_Money;
                            UserMaximumSelectPick = "일짝";
                        }
                    }
                    else if (hongKongCruiseBetPickTextBox.Text.Equals("일언"))
                    {
                        HongKong_Cruise_Betting_Mode_Normal_Under_Money += int.Parse(Regex.Replace(hongKongCruiseBetMoneyTextBox.Text, @"\D", ""));
                        if (HongKong_Cruise_Betting_Mode_Normal_Under_Money > UserMaximumSelectPick_BetMoney)
                        {
                            UserMaximumSelectPick_BetMoney = HongKong_Cruise_Betting_Mode_Normal_Under_Money;
                            UserMaximumSelectPick = "일언";
                        }
                    }
                    else if (hongKongCruiseBetPickTextBox.Text.Equals("일오"))
                    {
                        HongKong_Cruise_Betting_Mode_Normal_Over_Money += int.Parse(Regex.Replace(hongKongCruiseBetMoneyTextBox.Text, @"\D", ""));
                        if (HongKong_Cruise_Betting_Mode_Normal_Over_Money > UserMaximumSelectPick_BetMoney)
                        {
                            UserMaximumSelectPick_BetMoney = HongKong_Cruise_Betting_Mode_Power_Over_Money;
                            UserMaximumSelectPick = "일오";
                        }
                    }
                }
            }
        }

        private void HongKong_Cruise_Betting_Mode_Betting_Processing_Final()
        {
            HongKong_Cruise_Betting_Mode_All_Betting_Money = HongKong_Cruise_Betting_Mode_Power_Odd_Money + HongKong_Cruise_Betting_Mode_Power_Even_Money + HongKong_Cruise_Betting_Mode_Power_Under_Money + HongKong_Cruise_Betting_Mode_Power_Over_Money
                            + HongKong_Cruise_Betting_Mode_Normal_Odd_Money + HongKong_Cruise_Betting_Mode_Normal_Even_Money + HongKong_Cruise_Betting_Mode_Normal_Under_Money + HongKong_Cruise_Betting_Mode_Normal_Over_Money;

            if (HongKong_Cruise_Betting_Mode_All_Betting_Money >= 100)
            {

                TermInning = 0;
                startInning = 0;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += HongKong_Cruise_Betting_Mode_All_Betting_Money;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                    UtilModel.UserOwnMoney -= HongKong_Cruise_Betting_Mode_All_Betting_Money;

                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                    logger.Info("[파홀 : " + HongKong_Cruise_Betting_Mode_Power_Odd_Money + "][파짝 : " + HongKong_Cruise_Betting_Mode_Power_Even_Money + "][파언 : " + HongKong_Cruise_Betting_Mode_Power_Under_Money + "][파오 : " + HongKong_Cruise_Betting_Mode_Power_Over_Money
                        + "][일홀 : " + HongKong_Cruise_Betting_Mode_Normal_Odd_Money + "][일짝 : " + HongKong_Cruise_Betting_Mode_Normal_Even_Money + "][일언 : " + HongKong_Cruise_Betting_Mode_Normal_Under_Money + "][일오 : " + HongKong_Cruise_Betting_Mode_Normal_Over_Money + "]");
                    HongKong_Cruise_Mode_Betting_Status = true;
                }
                else
                {
                    HongKong_Cruise_Betting_Mode_Url_Param_String = new StringBuilder();
                    HongKong_Cruise_Betting_Mode_Url_Param_String.Append(UtilModel.UserSiteUrlAddress);
                    HongKong_Cruise_Betting_Mode_Url_Param_String.Append(":8082/api/bet");
                    HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("?userid={0}", UtilModel.UserId);
                    HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);

                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&gm={0}", "PWB");
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&tdate={0}", TodayDate);
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&rno={0}", PowerBall_Now_All_Inning.ToString());
                    
                    if (HongKong_Cruise_Betting_Mode_Power_Odd_Money > 0)
                    {
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp1={0}", HongKong_Cruise_Betting_Mode_Power_Odd_Money);
                    }
                    if (HongKong_Cruise_Betting_Mode_Power_Even_Money > 0)
                    {
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp2={0}", HongKong_Cruise_Betting_Mode_Power_Even_Money);
                    }
                    if (HongKong_Cruise_Betting_Mode_Power_Under_Money > 0)
                    {
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp3={0}", HongKong_Cruise_Betting_Mode_Power_Under_Money);
                    }
                    if (HongKong_Cruise_Betting_Mode_Power_Over_Money > 0)
                    {
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp4={0}", HongKong_Cruise_Betting_Mode_Power_Over_Money);
                    }
                    if (HongKong_Cruise_Betting_Mode_Normal_Odd_Money > 0)
                    {
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp5={0}", HongKong_Cruise_Betting_Mode_Normal_Odd_Money);
                    }
                    if (HongKong_Cruise_Betting_Mode_Normal_Even_Money > 0)
                    {
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp6={0}", HongKong_Cruise_Betting_Mode_Normal_Even_Money);
                    }
                    if (HongKong_Cruise_Betting_Mode_Normal_Under_Money > 0)
                    {
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp7={0}", HongKong_Cruise_Betting_Mode_Normal_Under_Money);
                    }
                    if (HongKong_Cruise_Betting_Mode_Normal_Over_Money > 0)
                    {
                        HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp8={0}", HongKong_Cruise_Betting_Mode_Normal_Over_Money);
                    }
                    HongKong_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&nonce={0}", HongKong_Cruise_Mode_Random_Nonce);

                    String Message = null;
                    int CountResult = 0;
                    while (true)
                    {
                        try
                        {
                            //Uri myUri = new Uri(sb);
                            var returnMessage = UtilModel.MakeAsyncRequest(HongKong_Cruise_Betting_Mode_Url_Param_String.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                break;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + HongKong_Cruise_Betting_Mode_Url_Param_String.ToString());
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    break;
                                }
                                if (BetRemainingTime < 30)
                                {
                                    break;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + HongKong_Cruise_Betting_Mode_Url_Param_String.ToString());
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                break;
                            }
                            if (BetRemainingTime < 30)
                            {
                                break;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    if (!Message.Contains("ret_code"))
                    {
                        HongKong_Cruise_Betting_Mode_Power_Odd_Money = 0;
                        HongKong_Cruise_Betting_Mode_Power_Even_Money = 0;
                        HongKong_Cruise_Betting_Mode_Power_Under_Money = 0;
                        HongKong_Cruise_Betting_Mode_Power_Over_Money = 0;
                        HongKong_Cruise_Betting_Mode_Normal_Odd_Money = 0;
                        HongKong_Cruise_Betting_Mode_Normal_Even_Money = 0;
                        HongKong_Cruise_Betting_Mode_Normal_Under_Money = 0;
                        HongKong_Cruise_Betting_Mode_Normal_Over_Money = 0;

                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += HongKong_Cruise_Betting_Mode_All_Betting_Money;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                            txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                            String bettingMoneyString = "[홍콩크루즈|배팅완료][" + PowerBall_Now_All_Inning + " 회][파홀:" + HongKong_Cruise_Betting_Mode_Power_Odd_Money + "][파짝:" + HongKong_Cruise_Betting_Mode_Power_Even_Money + "][파언더:" + HongKong_Cruise_Betting_Mode_Power_Under_Money + "][파오버:" + HongKong_Cruise_Betting_Mode_Power_Over_Money
                                + "][일홀:" + HongKong_Cruise_Betting_Mode_Normal_Odd_Money + "][일짝:" + HongKong_Cruise_Betting_Mode_Normal_Even_Money + "][일언더:" + HongKong_Cruise_Betting_Mode_Normal_Under_Money + "][일오버:" + HongKong_Cruise_Betting_Mode_Normal_Over_Money + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            HongKong_Cruise_Mode_Betting_Status = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }

                if (HongKong_Cruise_Mode_Betting_Status)
                {
                    String str = "";
                    String str2 = "";
                    ListViewItem item;
                    if (HongKong_Cruise_Betting_Mode_Power_Odd_Money >= 100)
                    {
                        str += "[파홀 : " + UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Power_Odd_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Power_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("홍콩");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (HongKong_Cruise_Betting_Mode_Power_Even_Money >= 100)
                    {
                        str += "[파짝 : " + UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Power_Even_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Power_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("홍콩");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (HongKong_Cruise_Betting_Mode_Power_Under_Money >= 100)
                    {
                        str += "[파언 : " + UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Power_Under_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Power_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("홍콩");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (HongKong_Cruise_Betting_Mode_Power_Over_Money >= 100)
                    {
                        str += "[파오 : " + UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Power_Over_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Power_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("홍콩");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (HongKong_Cruise_Betting_Mode_Normal_Odd_Money >= 100)
                    {
                        str2 += "[일홀 : " + UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Normal_Odd_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Normal_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("홍콩");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (HongKong_Cruise_Betting_Mode_Normal_Even_Money >= 100)
                    {
                        str2 += "[일짝 : " + UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Normal_Even_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Normal_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("홍콩");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (HongKong_Cruise_Betting_Mode_Normal_Under_Money >= 100)
                    {
                        str2 += "[일언 : " + UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Normal_Under_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Normal_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("홍콩");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (HongKong_Cruise_Betting_Mode_Normal_Over_Money >= 100)
                    {
                        str2 += "[일오 : " + UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Normal_Over_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(HongKong_Cruise_Betting_Mode_Normal_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("홍콩");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (str.Length > 1)
                    {
                        txtLogAdd(str, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                    if (str2.Length > 1)
                    {
                        txtLogAdd(str2, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                }
            }
        }

        bool EOS_Cruise_Mode_Betting_Complete = false;
        Boolean EOS_Cruise_Mode_Betting_Status = false;
        StringBuilder EOS_Cruise_Betting_Mode_Url_Param_String;
        int EOS_Cruise_Betting_Mode_Power_Odd_Money = 0;
        int EOS_Cruise_Betting_Mode_Power_Even_Money = 0;
        int EOS_Cruise_Betting_Mode_Power_Under_Money = 0;
        int EOS_Cruise_Betting_Mode_Power_Over_Money = 0;
        int EOS_Cruise_Betting_Mode_Normal_Odd_Money = 0;
        int EOS_Cruise_Betting_Mode_Normal_Even_Money = 0;
        int EOS_Cruise_Betting_Mode_Normal_Under_Money = 0;
        int EOS_Cruise_Betting_Mode_Normal_Over_Money = 0;
        int EOS_Cruise_Betting_Mode_All_Betting_Money = 0;
        private void EOS_Cruise_Betting_Mode_Betting_Process()
        {
            EOS_Cruise_Mode_Betting_Complete = true;
            EOS_Cruise_Mode_Betting_Status = false;
            EOS_Cruise_Betting_Mode_Power_Odd_Money = 0;
            EOS_Cruise_Betting_Mode_Power_Even_Money = 0;
            EOS_Cruise_Betting_Mode_Power_Under_Money = 0;
            EOS_Cruise_Betting_Mode_Power_Over_Money = 0;
            EOS_Cruise_Betting_Mode_Normal_Odd_Money = 0;
            EOS_Cruise_Betting_Mode_Normal_Even_Money = 0;
            EOS_Cruise_Betting_Mode_Normal_Under_Money = 0;
            EOS_Cruise_Betting_Mode_Normal_Over_Money = 0;
            EOS_Cruise_Betting_Mode_All_Betting_Money = 0;
            EOS_Cruise_Betting_Mode_Betting_Processing_All_Sum();
            EOS_Cruise_Betting_Mode_Betting_Processing_Final();
        }

        private void EOS_Cruise_Betting_Mode_Betting_Processing_All_Sum()
        {
            if (EosPowerBallOddEvenUseCheck.Checked)
            {
                TextBox PowerBallOddEvenBetPickLevel = (Controls.Find("EosCruisePowerBallOddEvenBetPickLevel" + CruiseBetPowerBallOddEvenSubLevel.ToString(), true)[0] as TextBox);
                TextBox PowerBallOddEvenBetMoneyLevel = (Controls.Find("EosCruisePowerBallOddEvenBetMoneyLevel" + CruiseBetPowerBallOddEvenSubLevel.ToString(), true)[0] as TextBox);
                if (PowerBallOddEvenBetPickLevel.Text.Equals("홀"))
                {
                    EOS_Cruise_Betting_Mode_Power_Odd_Money = int.Parse(Regex.Replace(PowerBallOddEvenBetMoneyLevel.Text, @"\D", ""));
                }
                else if (PowerBallOddEvenBetPickLevel.Text.Equals("짝"))
                {
                    EOS_Cruise_Betting_Mode_Power_Even_Money = int.Parse(Regex.Replace(PowerBallOddEvenBetMoneyLevel.Text, @"\D", ""));
                }
            }

            if (EosPowerBallUnderOverUseCheck.Checked)
            {
                TextBox PowerBallUnderOverBetPickLevel = (Controls.Find("EosCruisePowerBallUnderOverBetPickLevel" + CruiseBetPowerBallUnderOverSubLevel.ToString(), true)[0] as TextBox);
                TextBox PowerBallUnderOverBetMoneyLevel = (Controls.Find("EosCruisePowerBallUnderOverBetMoneyLevel" + CruiseBetPowerBallUnderOverSubLevel.ToString(), true)[0] as TextBox);
                if (PowerBallUnderOverBetPickLevel.Text.Equals("언"))
                {
                    EOS_Cruise_Betting_Mode_Power_Under_Money = int.Parse(Regex.Replace(PowerBallUnderOverBetMoneyLevel.Text, @"\D", ""));
                }
                else if (PowerBallUnderOverBetPickLevel.Text.Equals("오"))
                {
                    EOS_Cruise_Betting_Mode_Power_Over_Money = int.Parse(Regex.Replace(PowerBallUnderOverBetMoneyLevel.Text, @"\D", ""));
                }
            }

            if (EosNormalBallOddEvenUseCheck.Checked)
            {
                TextBox NormalBallOddEvenBetPickLevel = (Controls.Find("EosCruiseNormalBallOddEvenBetPickLevel" + CruiseBetNormalBallOddEvenSubLevel.ToString(), true)[0] as TextBox);
                TextBox NormalBallOddEvenBetMoneyLevel = (Controls.Find("EosCruiseNormalBallOddEvenBetMoneyLevel" + CruiseBetNormalBallOddEvenSubLevel.ToString(), true)[0] as TextBox);
                if (NormalBallOddEvenBetPickLevel.Text.Equals("홀"))
                {
                    EOS_Cruise_Betting_Mode_Normal_Odd_Money = int.Parse(Regex.Replace(NormalBallOddEvenBetMoneyLevel.Text, @"\D", ""));
                }
                else if (NormalBallOddEvenBetPickLevel.Text.Equals("짝"))
                {
                    EOS_Cruise_Betting_Mode_Normal_Even_Money = int.Parse(Regex.Replace(NormalBallOddEvenBetMoneyLevel.Text, @"\D", ""));
                }
            }

            if (EossNormalBallUnderOverUseCheck.Checked)
            {
                TextBox NormalBallUnderOverBetPickLevel = (Controls.Find("EosCruiseNormalBallUnderOverBetPickLevel" + CruiseBetNormalBallUnderOverSubLevel.ToString(), true)[0] as TextBox);
                TextBox NormalBallUnderOverBetMoneyLevel = (Controls.Find("EosCruiseNormalBallUnderOverBetMoneyLevel" + CruiseBetNormalBallUnderOverSubLevel.ToString(), true)[0] as TextBox);
                if (NormalBallUnderOverBetPickLevel.Text.Equals("언"))
                {
                    EOS_Cruise_Betting_Mode_Normal_Under_Money = int.Parse(Regex.Replace(NormalBallUnderOverBetMoneyLevel.Text, @"\D", ""));
                }
                else if (NormalBallUnderOverBetPickLevel.Text.Equals("오"))
                {
                    EOS_Cruise_Betting_Mode_Normal_Over_Money = int.Parse(Regex.Replace(NormalBallUnderOverBetMoneyLevel.Text, @"\D", ""));
                }
            }
        }

        private void EOS_Cruise_Betting_Mode_Betting_Processing_Final()
        {
            EOS_Cruise_Betting_Mode_All_Betting_Money = EOS_Cruise_Betting_Mode_Power_Odd_Money + EOS_Cruise_Betting_Mode_Power_Even_Money + EOS_Cruise_Betting_Mode_Power_Under_Money + EOS_Cruise_Betting_Mode_Power_Over_Money
                            + EOS_Cruise_Betting_Mode_Normal_Odd_Money + EOS_Cruise_Betting_Mode_Normal_Even_Money + EOS_Cruise_Betting_Mode_Normal_Under_Money + EOS_Cruise_Betting_Mode_Normal_Over_Money;

            if (EOS_Cruise_Betting_Mode_All_Betting_Money >= 100)
            {
                TermInning = 0;
                startInning = 0;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += EOS_Cruise_Betting_Mode_All_Betting_Money;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                    UtilModel.UserOwnMoney -= EOS_Cruise_Betting_Mode_All_Betting_Money;

                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_TodayInning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_TodayInning + "] 정상 배팅 등록 완료.");
                    logger.Info("[파홀 : " + EOS_Cruise_Betting_Mode_Power_Odd_Money + "][파짝 : " + EOS_Cruise_Betting_Mode_Power_Even_Money + "][파언 : " + EOS_Cruise_Betting_Mode_Power_Under_Money + "][파오 : " + EOS_Cruise_Betting_Mode_Power_Over_Money
                        + "][일홀 : " + EOS_Cruise_Betting_Mode_Normal_Odd_Money + "][일짝 : " + EOS_Cruise_Betting_Mode_Normal_Even_Money + "][일언 : " + EOS_Cruise_Betting_Mode_Normal_Under_Money + "][일오 : " + EOS_Cruise_Betting_Mode_Normal_Over_Money + "]");
                    EOS_Cruise_Mode_Betting_Status = true;
                }
                else
                {
                    EOS_Cruise_Betting_Mode_Url_Param_String = new StringBuilder();
                    EOS_Cruise_Betting_Mode_Url_Param_String.Append(UtilModel.UserSiteUrlAddress);
                    EOS_Cruise_Betting_Mode_Url_Param_String.Append(":8082/api/bet");
                    EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("?userid={0}", UtilModel.UserId);
                    EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);

                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&gm={0}", "PWB");
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&tdate={0}", TodayDate);
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&rno={0}", PowerBall_Now_All_Inning.ToString());
                    
                    if (EOS_Cruise_Betting_Mode_Power_Odd_Money > 0)
                    {
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp1={0}", EOS_Cruise_Betting_Mode_Power_Odd_Money);
                    }
                    if (EOS_Cruise_Betting_Mode_Power_Even_Money > 0)
                    {
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp2={0}", EOS_Cruise_Betting_Mode_Power_Even_Money);
                    }
                    if (EOS_Cruise_Betting_Mode_Power_Under_Money > 0)
                    {
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp3={0}", EOS_Cruise_Betting_Mode_Power_Under_Money);
                    }
                    if (EOS_Cruise_Betting_Mode_Power_Over_Money > 0)
                    {
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp4={0}", EOS_Cruise_Betting_Mode_Power_Over_Money);
                    }
                    if (EOS_Cruise_Betting_Mode_Normal_Odd_Money > 0)
                    {
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp5={0}", EOS_Cruise_Betting_Mode_Normal_Odd_Money);
                    }
                    if (EOS_Cruise_Betting_Mode_Normal_Even_Money > 0)
                    {
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp6={0}", EOS_Cruise_Betting_Mode_Normal_Even_Money);
                    }
                    if (EOS_Cruise_Betting_Mode_Normal_Under_Money > 0)
                    {
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp7={0}", EOS_Cruise_Betting_Mode_Normal_Under_Money);
                    }
                    if (EOS_Cruise_Betting_Mode_Normal_Over_Money > 0)
                    {
                        EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&pp8={0}", EOS_Cruise_Betting_Mode_Normal_Over_Money);
                    }
                    EOS_Cruise_Betting_Mode_Url_Param_String.AppendFormat("&nonce={0}", EOS_Cruise_Mode_Random_Nonce);

                    String Message = null;
                    int CountResult = 0;
                    while (true)
                    {
                        try
                        {
                            //Uri myUri = new Uri(sb);
                            var returnMessage = UtilModel.MakeAsyncRequest(EOS_Cruise_Betting_Mode_Url_Param_String.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                break;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_TodayInning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + EOS_Cruise_Betting_Mode_Url_Param_String.ToString());
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    break;
                                }
                                if (BetRemainingTime < 30)
                                {
                                    break;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_TodayInning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + EOS_Cruise_Betting_Mode_Url_Param_String.ToString());
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                break;
                            }
                            if (BetRemainingTime < 30)
                            {
                                break;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    if (!Message.Contains("ret_code"))
                    {
                        EOS_Cruise_Betting_Mode_Power_Odd_Money = 0;
                        EOS_Cruise_Betting_Mode_Power_Even_Money = 0;
                        EOS_Cruise_Betting_Mode_Power_Under_Money = 0;
                        EOS_Cruise_Betting_Mode_Power_Over_Money = 0;
                        EOS_Cruise_Betting_Mode_Normal_Odd_Money = 0;
                        EOS_Cruise_Betting_Mode_Normal_Even_Money = 0;
                        EOS_Cruise_Betting_Mode_Normal_Under_Money = 0;
                        EOS_Cruise_Betting_Mode_Normal_Over_Money = 0;

                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += EOS_Cruise_Betting_Mode_All_Betting_Money;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                            txtLogAdd("[" + PowerBall_Now_TodayInning + "] 정상 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            logger.Info("[" + PowerBall_Now_TodayInning + "] 정상 배팅 등록 완료.");
                            String bettingMoneyString = "[홍콩크루즈|배팅완료][" + PowerBall_Now_TodayInning + " 회][파홀:" + EOS_Cruise_Betting_Mode_Power_Odd_Money + "][파짝:" + EOS_Cruise_Betting_Mode_Power_Even_Money + "][파언더:" + EOS_Cruise_Betting_Mode_Power_Under_Money + "][파오버:" + EOS_Cruise_Betting_Mode_Power_Over_Money
                                + "][일홀:" + EOS_Cruise_Betting_Mode_Normal_Odd_Money + "][일짝:" + EOS_Cruise_Betting_Mode_Normal_Even_Money + "][일언더:" + EOS_Cruise_Betting_Mode_Normal_Under_Money + "][일오버:" + EOS_Cruise_Betting_Mode_Normal_Over_Money + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            EOS_Cruise_Mode_Betting_Status = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_TodayInning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_TodayInning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }

                if (EOS_Cruise_Mode_Betting_Status)
                {
                    String str = "";
                    String str2 = "";
                    ListViewItem item;
                    if (EOS_Cruise_Betting_Mode_Power_Odd_Money >= 100)
                    {
                        str += "[파홀 : " + UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Power_Odd_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add(EosCruisePowerBallOddEvenLevelChange.Text + "-" + CruiseBetPowerBallOddEvenSubLevel);
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Power_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        EosCruiseBetRegistListView.Items.Add(item);
                    }
                    if (EOS_Cruise_Betting_Mode_Power_Even_Money >= 100)
                    {
                        str += "[파짝 : " + UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Power_Even_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add(EosCruisePowerBallOddEvenLevelChange.Text + "-" + CruiseBetPowerBallOddEvenSubLevel);
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Power_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        EosCruiseBetRegistListView.Items.Add(item);
                    }
                    if (EOS_Cruise_Betting_Mode_Power_Under_Money >= 100)
                    {
                        str += "[파언 : " + UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Power_Under_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add(EosCruisePowerBallUnderOverLevelChange.Text + "-" + CruiseBetPowerBallUnderOverSubLevel);
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Power_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        EosCruiseBetRegistListView.Items.Add(item);
                    }
                    if (EOS_Cruise_Betting_Mode_Power_Over_Money >= 100)
                    {
                        str += "[파오 : " + UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Power_Over_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add(EosCruisePowerBallUnderOverLevelChange.Text + "-" + CruiseBetPowerBallUnderOverSubLevel);
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Power_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        EosCruiseBetRegistListView.Items.Add(item);
                    }
                    if (EOS_Cruise_Betting_Mode_Normal_Odd_Money >= 100)
                    {
                        str2 += "[일홀 : " + UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Normal_Odd_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add(EosCruiseNormalBallOddEvenLevelChange.Text + "-" + CruiseBetNormalBallOddEvenSubLevel);
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Normal_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        EosCruiseBetRegistListView.Items.Add(item);
                    }
                    if (EOS_Cruise_Betting_Mode_Normal_Even_Money >= 100)
                    {
                        str2 += "[일짝 : " + UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Normal_Even_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add(EosCruiseNormalBallOddEvenLevelChange.Text + "-" + CruiseBetNormalBallOddEvenSubLevel);
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Normal_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        EosCruiseBetRegistListView.Items.Add(item);
                    }
                    if (EOS_Cruise_Betting_Mode_Normal_Under_Money >= 100)
                    {
                        str2 += "[일언 : " + UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Normal_Under_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add(EosCruiseNormalBallUnderOverLevelChange.Text + "-" + CruiseBetNormalBallUnderOverSubLevel);
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Normal_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        EosCruiseBetRegistListView.Items.Add(item);
                    }
                    if (EOS_Cruise_Betting_Mode_Normal_Over_Money >= 100)
                    {
                        str2 += "[일오 : " + UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Normal_Over_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add(EosCruiseNormalBallUnderOverLevelChange.Text + "-" + CruiseBetNormalBallUnderOverSubLevel);
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(EOS_Cruise_Betting_Mode_Normal_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        EosCruiseBetRegistListView.Items.Add(item);
                    }
                    if (str.Length > 1)
                    {
                        txtLogAdd(str, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                    if (str2.Length > 1)
                    {
                        txtLogAdd(str2, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                }
            }
        }


        bool Mirror_Mode_Betting_Complete = false;
        Boolean Mirror_Mode_Betting_Status = false;
        StringBuilder Mirror_Betting_Mode_Url_Param_String;
        int Mirror_Betting_Mode_Power_Odd_Money = 0;
        int Mirror_Betting_Mode_Power_Even_Money = 0;
        int Mirror_Betting_Mode_Power_Under_Money = 0;
        int Mirror_Betting_Mode_Power_Over_Money = 0;
        int Mirror_Betting_Mode_Normal_Odd_Money = 0;
        int Mirror_Betting_Mode_Normal_Even_Money = 0;
        int Mirror_Betting_Mode_Normal_Under_Money = 0;
        int Mirror_Betting_Mode_Normal_Over_Money = 0;
        int Mirror_Betting_Mode_All_Betting_Money = 0;
        private void Mirror_Betting_Mode_Betting_Process()
        {
            Mirror_Mode_Betting_Complete = true;
            Mirror_Mode_Betting_Status = false;
            Mirror_Betting_Mode_Power_Odd_Money = 0;
            Mirror_Betting_Mode_Power_Even_Money = 0;
            Mirror_Betting_Mode_Power_Under_Money = 0;
            Mirror_Betting_Mode_Power_Over_Money = 0;
            Mirror_Betting_Mode_Normal_Odd_Money = 0;
            Mirror_Betting_Mode_Normal_Even_Money = 0;
            Mirror_Betting_Mode_Normal_Under_Money = 0;
            Mirror_Betting_Mode_Normal_Over_Money = 0;
            Mirror_Betting_Mode_All_Betting_Money = 0;
            Mirror_Betting_Mode_Betting_Processing_All_Sum();
            Mirror_Betting_Mode_Betting_Processing_Final();
        }

        private void Mirror_Betting_Mode_Betting_Processing_All_Sum()
        {
            if (MirrorBetPowerOddEvenUseCheck.Checked)
            {
                Button MirrorPick1 = (Controls.Find("MirrorBetPowerOddEvenPick1", true)[0] as Button);
                Button MirrorPick2 = (Controls.Find("MirrorBetPowerOddEvenPick2", true)[0] as Button);
                // MirrorBetPowerOddEvenMoney1
                ComboBox MirrorMoney1 = (Controls.Find("MirrorBetPowerOddEvenMoney1", true)[0] as ComboBox);
                ComboBox MirrorMoney2 = (Controls.Find("MirrorBetPowerOddEvenMoney2", true)[0] as ComboBox);
                if (MirrorPick1.Text.Equals("홀"))
                {
                    Mirror_Betting_Mode_Power_Odd_Money = int.Parse(Regex.Replace(MirrorMoney1.Text, @"\D", ""));
                }
                else if (MirrorPick1.Text.Equals("짝"))
                {
                    Mirror_Betting_Mode_Power_Even_Money = int.Parse(Regex.Replace(MirrorMoney1.Text, @"\D", ""));
                } else if (MirrorPick2.Text.Equals("홀"))
                {
                    Mirror_Betting_Mode_Power_Odd_Money = int.Parse(Regex.Replace(MirrorMoney2.Text, @"\D", ""));
                }
                else if (MirrorPick2.Text.Equals("짝"))
                {
                    Mirror_Betting_Mode_Power_Even_Money = int.Parse(Regex.Replace(MirrorMoney2.Text, @"\D", ""));
                }
            }

            if (MirrorBetPowerUnderOverUseCheck.Checked)
            {
                Button MirrorPick1 = (Controls.Find("MirrorBetPowerUnderOverPick1", true)[0] as Button);
                Button MirrorPick2 = (Controls.Find("MirrorBetPowerUnderOverPick2", true)[0] as Button);
                // MirrorBetPowerOddEvenMoney1
                ComboBox MirrorMoney1 = (Controls.Find("MirrorBetPowerUnderOverMoney1", true)[0] as ComboBox);
                ComboBox MirrorMoney2 = (Controls.Find("MirrorBetPowerUnderOverMoney2", true)[0] as ComboBox);
                if (MirrorPick1.Text.Equals("언"))
                {
                    Mirror_Betting_Mode_Power_Under_Money = int.Parse(Regex.Replace(MirrorMoney1.Text, @"\D", ""));
                }
                else if (MirrorPick1.Text.Equals("오"))
                {
                    Mirror_Betting_Mode_Power_Over_Money = int.Parse(Regex.Replace(MirrorMoney1.Text, @"\D", ""));
                }
                else if (MirrorPick2.Text.Equals("언"))
                {
                    Mirror_Betting_Mode_Power_Under_Money = int.Parse(Regex.Replace(MirrorMoney2.Text, @"\D", ""));
                }
                else if (MirrorPick2.Text.Equals("오"))
                {
                    Mirror_Betting_Mode_Power_Over_Money = int.Parse(Regex.Replace(MirrorMoney2.Text, @"\D", ""));
                }
            }

            if (MirrorBetNormalOddEvenUseCheck.Checked)
            {
                Button MirrorPick1 = (Controls.Find("MirrorBetNormalOddEvenPick1", true)[0] as Button);
                Button MirrorPick2 = (Controls.Find("MirrorBetNormalOddEvenPick2", true)[0] as Button);
                // MirrorBetPowerOddEvenMoney1
                ComboBox MirrorMoney1 = (Controls.Find("MirrorBetNormalOddEvenMoney1", true)[0] as ComboBox);
                ComboBox MirrorMoney2 = (Controls.Find("MirrorBetNormalOddEvenMoney2", true)[0] as ComboBox);
                if (MirrorPick1.Text.Equals("홀"))
                {
                    Mirror_Betting_Mode_Normal_Odd_Money = int.Parse(Regex.Replace(MirrorMoney1.Text, @"\D", ""));
                }
                else if (MirrorPick1.Text.Equals("짝"))
                {
                    Mirror_Betting_Mode_Normal_Even_Money = int.Parse(Regex.Replace(MirrorMoney1.Text, @"\D", ""));
                }
                else if (MirrorPick2.Text.Equals("홀"))
                {
                    Mirror_Betting_Mode_Normal_Odd_Money = int.Parse(Regex.Replace(MirrorMoney2.Text, @"\D", ""));
                }
                else if (MirrorPick2.Text.Equals("짝"))
                {
                    Mirror_Betting_Mode_Normal_Even_Money = int.Parse(Regex.Replace(MirrorMoney2.Text, @"\D", ""));
                }
            }

            if (MirrorBetNormalUnderOverUseCheck.Checked)
            {
                Button MirrorPick1 = (Controls.Find("MirrorBetNormalUnderOverPick1", true)[0] as Button);
                Button MirrorPick2 = (Controls.Find("MirrorBetNormalUnderOverPick2", true)[0] as Button);
                // MirrorBetPowerOddEvenMoney1
                ComboBox MirrorMoney1 = (Controls.Find("MirrorBetNormalUnderOverMoney1", true)[0] as ComboBox);
                ComboBox MirrorMoney2 = (Controls.Find("MirrorBetNormalUnderOverMoney2", true)[0] as ComboBox);
                if (MirrorPick1.Text.Equals("언"))
                {
                    Mirror_Betting_Mode_Normal_Under_Money = int.Parse(Regex.Replace(MirrorMoney1.Text, @"\D", ""));
                }
                else if (MirrorPick1.Text.Equals("오"))
                {
                    Mirror_Betting_Mode_Normal_Over_Money = int.Parse(Regex.Replace(MirrorMoney1.Text, @"\D", ""));
                }
                else if (MirrorPick2.Text.Equals("언"))
                {
                    Mirror_Betting_Mode_Normal_Under_Money = int.Parse(Regex.Replace(MirrorMoney2.Text, @"\D", ""));
                }
                else if (MirrorPick2.Text.Equals("오"))
                {
                    Mirror_Betting_Mode_Normal_Over_Money = int.Parse(Regex.Replace(MirrorMoney2.Text, @"\D", ""));
                }
            }
        }

        private void Mirror_Betting_Mode_Betting_Processing_Final()
        {
            Mirror_Betting_Mode_All_Betting_Money = Mirror_Betting_Mode_Power_Odd_Money + Mirror_Betting_Mode_Power_Even_Money + Mirror_Betting_Mode_Power_Under_Money + Mirror_Betting_Mode_Power_Over_Money
                            + Mirror_Betting_Mode_Normal_Odd_Money + Mirror_Betting_Mode_Normal_Even_Money + Mirror_Betting_Mode_Normal_Under_Money + Mirror_Betting_Mode_Normal_Over_Money;

            if (Mirror_Betting_Mode_All_Betting_Money >= 100)
            {
                TermInning = 0;
                startInning = 0;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += Mirror_Betting_Mode_All_Betting_Money;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                    UtilModel.UserOwnMoney -= Mirror_Betting_Mode_All_Betting_Money;

                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_TodayInning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_TodayInning + "] 정상 배팅 등록 완료.");
                    logger.Info("[파홀 : " + Mirror_Betting_Mode_Power_Odd_Money + "][파짝 : " + Mirror_Betting_Mode_Power_Even_Money + "][파언 : " + Mirror_Betting_Mode_Power_Under_Money + "][파오 : " + Mirror_Betting_Mode_Power_Over_Money
                        + "][일홀 : " + Mirror_Betting_Mode_Normal_Odd_Money + "][일짝 : " + Mirror_Betting_Mode_Normal_Even_Money + "][일언 : " + Mirror_Betting_Mode_Normal_Under_Money + "][일오 : " + Mirror_Betting_Mode_Normal_Over_Money + "]");
                    Mirror_Mode_Betting_Status = true;
                }
                else
                {
                    Mirror_Betting_Mode_Url_Param_String = new StringBuilder();
                    Mirror_Betting_Mode_Url_Param_String.Append(UtilModel.UserSiteUrlAddress);
                    Mirror_Betting_Mode_Url_Param_String.Append(":8082/api/bet");
                    Mirror_Betting_Mode_Url_Param_String.AppendFormat("?userid={0}", UtilModel.UserId);
                    Mirror_Betting_Mode_Url_Param_String.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);
                    Mirror_Betting_Mode_Url_Param_String.AppendFormat("&tdate={0}", TodayDate);

                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&gm={0}", "PWB");
                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&rno={0}", PowerBall_Now_All_Inning.ToString());
                    
                    if (Mirror_Betting_Mode_Power_Odd_Money > 0)
                    {
                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&pp1={0}", Mirror_Betting_Mode_Power_Odd_Money);
                    }
                    if (Mirror_Betting_Mode_Power_Even_Money > 0)
                    {
                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&pp2={0}", Mirror_Betting_Mode_Power_Even_Money);
                    }
                    if (Mirror_Betting_Mode_Power_Under_Money > 0)
                    {
                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&pp3={0}", Mirror_Betting_Mode_Power_Under_Money);
                    }
                    if (Mirror_Betting_Mode_Power_Over_Money > 0)
                    {
                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&pp4={0}", Mirror_Betting_Mode_Power_Over_Money);
                    }
                    if (Mirror_Betting_Mode_Normal_Odd_Money > 0)
                    {
                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&pp5={0}", Mirror_Betting_Mode_Normal_Odd_Money);
                    }
                    if (Mirror_Betting_Mode_Normal_Even_Money > 0)
                    {
                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&pp6={0}", Mirror_Betting_Mode_Normal_Even_Money);
                    }
                    if (Mirror_Betting_Mode_Normal_Under_Money > 0)
                    {
                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&pp7={0}", Mirror_Betting_Mode_Normal_Under_Money);
                    }
                    if (Mirror_Betting_Mode_Normal_Over_Money > 0)
                    {
                        Mirror_Betting_Mode_Url_Param_String.AppendFormat("&pp8={0}", Mirror_Betting_Mode_Normal_Over_Money);
                    }
                    Mirror_Betting_Mode_Url_Param_String.AppendFormat("&nonce={0}", Mirror_Mode_Random_Nonce);

                    String Message = null;
                    int CountResult = 0;
                    while (true)
                    {
                        try
                        {
                            //Uri myUri = new Uri(sb);
                            var returnMessage = UtilModel.MakeAsyncRequest(Mirror_Betting_Mode_Url_Param_String.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                break;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_TodayInning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Mirror_Betting_Mode_Url_Param_String.ToString());
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    break;
                                }
                                if (BetRemainingTime < 30)
                                {
                                    break;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_TodayInning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Mirror_Betting_Mode_Url_Param_String.ToString());
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                break;
                            }
                            if (BetRemainingTime < 30)
                            {
                                break;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    if (!Message.Contains("ret_code"))
                    {
                        Mirror_Betting_Mode_Power_Odd_Money = 0;
                        Mirror_Betting_Mode_Power_Even_Money = 0;
                        Mirror_Betting_Mode_Power_Under_Money = 0;
                        Mirror_Betting_Mode_Power_Over_Money = 0;
                        Mirror_Betting_Mode_Normal_Odd_Money = 0;
                        Mirror_Betting_Mode_Normal_Even_Money = 0;
                        Mirror_Betting_Mode_Normal_Under_Money = 0;
                        Mirror_Betting_Mode_Normal_Over_Money = 0;

                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += Mirror_Betting_Mode_All_Betting_Money;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                            txtLogAdd("[" + PowerBall_Now_TodayInning + "] 정상 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            logger.Info("[" + PowerBall_Now_TodayInning + "] 정상 배팅 등록 완료.");
                            String bettingMoneyString = "[홍콩크루즈|배팅완료][" + PowerBall_Now_TodayInning + " 회][파홀:" + Mirror_Betting_Mode_Power_Odd_Money + "][파짝:" + Mirror_Betting_Mode_Power_Even_Money + "][파언더:" + Mirror_Betting_Mode_Power_Under_Money + "][파오버:" + Mirror_Betting_Mode_Power_Over_Money
                                + "][일홀:" + Mirror_Betting_Mode_Normal_Odd_Money + "][일짝:" + Mirror_Betting_Mode_Normal_Even_Money + "][일언더:" + Mirror_Betting_Mode_Normal_Under_Money + "][일오버:" + Mirror_Betting_Mode_Normal_Over_Money + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            Mirror_Mode_Betting_Status = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_TodayInning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_TodayInning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }

                if (Mirror_Mode_Betting_Status)
                {
                    String str = "";
                    String str2 = "";
                    ListViewItem item;
                    if (Mirror_Betting_Mode_Power_Odd_Money >= 100)
                    {
                        str += "[파홀 : " + UtilModel.StringFormatChanged(Mirror_Betting_Mode_Power_Odd_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("1");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Mirror_Betting_Mode_Power_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        MirrorBetListView.Items.Add(item);
                    }
                    if (Mirror_Betting_Mode_Power_Even_Money >= 100)
                    {
                        str += "[파짝 : " + UtilModel.StringFormatChanged(Mirror_Betting_Mode_Power_Even_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("1");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Mirror_Betting_Mode_Power_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        MirrorBetListView.Items.Add(item);
                    }
                    if (Mirror_Betting_Mode_Power_Under_Money >= 100)
                    {
                        str += "[파언 : " + UtilModel.StringFormatChanged(Mirror_Betting_Mode_Power_Under_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("1");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Mirror_Betting_Mode_Power_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        MirrorBetListView.Items.Add(item);
                    }
                    if (Mirror_Betting_Mode_Power_Over_Money >= 100)
                    {
                        str += "[파오 : " + UtilModel.StringFormatChanged(Mirror_Betting_Mode_Power_Over_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("1");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("파워");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Mirror_Betting_Mode_Power_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        MirrorBetListView.Items.Add(item);
                    }
                    if (Mirror_Betting_Mode_Normal_Odd_Money >= 100)
                    {
                        str2 += "[일홀 : " + UtilModel.StringFormatChanged(Mirror_Betting_Mode_Normal_Odd_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("1");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Mirror_Betting_Mode_Normal_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        MirrorBetListView.Items.Add(item);
                    }
                    if (Mirror_Betting_Mode_Normal_Even_Money >= 100)
                    {
                        str2 += "[일짝 : " + UtilModel.StringFormatChanged(Mirror_Betting_Mode_Normal_Even_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("1");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Mirror_Betting_Mode_Normal_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        MirrorBetListView.Items.Add(item);
                    }
                    if (Mirror_Betting_Mode_Normal_Under_Money >= 100)
                    {
                        str2 += "[일언 : " + UtilModel.StringFormatChanged(Mirror_Betting_Mode_Normal_Under_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("1");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Mirror_Betting_Mode_Normal_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        MirrorBetListView.Items.Add(item);
                    }
                    if (Mirror_Betting_Mode_Normal_Over_Money >= 100)
                    {
                        str2 += "[일오 : " + UtilModel.StringFormatChanged(Mirror_Betting_Mode_Normal_Over_Money) + "원]";

                        item = new ListViewItem(DateTime.Now.ToString("MM-dd HH:mm:ss")); // 픽스터 이름
                        item.SubItems.Add("1");
                        item.SubItems.Add(PowerBall_Now_TodayInning.ToString());
                        item.SubItems.Add("일반");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Mirror_Betting_Mode_Normal_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        MirrorBetListView.Items.Add(item);
                    }
                    if (str.Length > 1)
                    {
                        txtLogAdd(str, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                    if (str2.Length > 1)
                    {
                        txtLogAdd(str2, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                }
            }
        }
        Boolean Pattern_Equal_Mode_Betting_Complete = false;
        int Pattern_Equal_Mode_Power_Odd_Money = 0;
        int Pattern_Equal_Mode_Power_Even_Money = 0;
        int Pattern_Equal_Mode_Power_Under_Money = 0;
        int Pattern_Equal_Mode_Power_Over_Money = 0;
        int Pattern_Equal_Mode_Normal_Odd_Money = 0;
        int Pattern_Equal_Mode_Normal_Even_Money = 0;
        int Pattern_Equal_Mode_Normal_Under_Money = 0;
        int Pattern_Equal_Mode_Normal_Over_Money = 0;
        int Pattern_Equal_Mode_All_Betting_Money = 0;

        StringBuilder Pattern_Equal_Mode_Url_Param_String;
        private void Pattern_Equal_Mode_Betting_Process()
        {
            Pattern_Equal_Mode_Betting_Complete = true;
            Pattern_Equal_Mode_Betting_Status = false;

            Pattern_Equal_Mode_Power_Odd_Money = 0;
            Pattern_Equal_Mode_Power_Even_Money = 0;
            Pattern_Equal_Mode_Power_Under_Money = 0;
            Pattern_Equal_Mode_Power_Over_Money = 0;
            Pattern_Equal_Mode_Normal_Odd_Money = 0;
            Pattern_Equal_Mode_Normal_Even_Money = 0;
            Pattern_Equal_Mode_Normal_Under_Money = 0;
            Pattern_Equal_Mode_Normal_Over_Money = 0;

            Pattern_Equal_Mode_All_Betting_Money = 0;

            Pattern_Equal_Mode_Betting_Processing_All_Sum();
            Pattern_Equal_Mode_Betting_Processing_Final();
        }
        private void Pattern_Equal_Mode_Betting_Processing_All_Sum()
        {
            CheckBox checkBoxStatus;
            TextBox textBoxPick;
            ComboBox comboBoxLevel;
            TextBox oddInningBetMoney;
            TextBox evenInningBetMoney;
            TextBox textBoxEqual;
            int _ComboBoxLevel = 0;
            for (int findControl = 1; findControl <= 16; findControl++)
            {
                checkBoxStatus = (Controls.Find("checkBoxStatus" + findControl.ToString(), true)[0] as CheckBox);
                if (!checkBoxStatus.Checked)
                {
                    continue;
                }
                textBoxEqual = (Controls.Find("textBoxEqual" + findControl.ToString(), true)[0] as TextBox);
                textBoxEqual.ForeColor = Color.DarkGray;

                if (textBoxEqual.Text.Contains("불"))
                {
                    continue;
                }
                if (PowerBall_Now_All_Inning % 2 == 1)
                {
                    textBoxPick = (Controls.Find("oddInningPick" + findControl.ToString(), true)[0] as TextBox);
                    if (textBoxPick.Text.Equals("통과"))
                    {
                        continue;
                    }

                    comboBoxLevel = (Controls.Find("oddInningBetLevel" + findControl.ToString(), true)[0] as ComboBox);
                    if (string.IsNullOrEmpty(comboBoxLevel.Text))
                    {
                        comboBoxLevel.Text = "0";
                        continue;
                    }
                    _ComboBoxLevel = int.Parse(comboBoxLevel.Text);
                    if (_ComboBoxLevel == 0)
                    {
                        continue;
                    }
                    oddInningBetMoney = (Controls.Find("oddInningBetMoney" + findControl.ToString(), true)[0] as TextBox);
                    int betMoney = int.Parse(Regex.Replace(oddInningBetMoney.Text, @"\D", ""));
                    if (findControl > 12)
                    {
                        if (textBoxPick.Text.Equals("언"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "일언더";
                            }
                            Pattern_Equal_Mode_Normal_Under_Money += betMoney;
                        }
                        else if (textBoxPick.Text.Equals("오"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "일오버";
                            }
                            Pattern_Equal_Mode_Normal_Over_Money += betMoney;
                        }
                    }
                    else if (findControl > 8)
                    {
                        if (textBoxPick.Text.Equals("홀"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "일홀";
                            }
                            Pattern_Equal_Mode_Normal_Odd_Money += betMoney;
                        }
                        else if (textBoxPick.Text.Equals("짝"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "일짝";
                            }
                            Pattern_Equal_Mode_Normal_Even_Money += betMoney;
                        }
                    }
                    else if (findControl > 4)
                    {
                        if (textBoxPick.Text.Equals("언"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "파언더";
                            }
                            Pattern_Equal_Mode_Power_Under_Money += betMoney;
                        }
                        else if (textBoxPick.Text.Equals("오"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "파오버";
                            }
                            Pattern_Equal_Mode_Power_Over_Money += betMoney;
                        }
                    }
                    else
                    {
                        if (textBoxPick.Text.Equals("홀"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "파홀";
                            }
                            Pattern_Equal_Mode_Power_Odd_Money += betMoney;
                        }
                        else if (textBoxPick.Text.Equals("짝"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "파짝";
                            }
                            Pattern_Equal_Mode_Power_Even_Money += betMoney;
                        }
                    }
                }
                else
                {
                    textBoxPick = (Controls.Find("evenInningPick" + findControl.ToString(), true)[0] as TextBox);
                    if (textBoxPick.Text.Equals("통과"))
                    {
                        continue;
                    }

                    comboBoxLevel = (Controls.Find("evenInningBetLevel" + findControl.ToString(), true)[0] as ComboBox);
                    if (string.IsNullOrEmpty(comboBoxLevel.Text))
                    {
                        comboBoxLevel.Text = "0";
                        continue;
                    }
                    _ComboBoxLevel = int.Parse(comboBoxLevel.Text);
                    if (_ComboBoxLevel == 0)
                    {
                        continue;
                    }
                    evenInningBetMoney = (Controls.Find("evenInningBetMoney" + findControl.ToString(), true)[0] as TextBox);
                    int betMoney = int.Parse(Regex.Replace(evenInningBetMoney.Text, @"\D", ""));
                    if (findControl > 12)
                    {
                        if (textBoxPick.Text.Equals("언"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "일언더";
                            }
                            Pattern_Equal_Mode_Normal_Under_Money += betMoney;
                        }
                        else if (textBoxPick.Text.Equals("오"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "일오버";
                            }
                            Pattern_Equal_Mode_Normal_Over_Money += betMoney;
                        }
                    }
                    else if (findControl > 8)
                    {
                        if (textBoxPick.Text.Equals("홀"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "일홀";
                            }
                            Pattern_Equal_Mode_Normal_Odd_Money += betMoney;
                        }
                        else if (textBoxPick.Text.Equals("짝"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "일짝";
                            }
                            Pattern_Equal_Mode_Normal_Even_Money += betMoney;
                        }
                    }
                    else if (findControl > 4)
                    {
                        if (textBoxPick.Text.Equals("언"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "파언더";
                            }
                            Pattern_Equal_Mode_Power_Under_Money += betMoney;
                        }
                        else if (textBoxPick.Text.Equals("오"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "파오버";
                            }
                            Pattern_Equal_Mode_Power_Over_Money += betMoney;
                        }
                    }
                    else
                    {
                        if (textBoxPick.Text.Equals("홀"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "파홀";
                            }
                            Pattern_Equal_Mode_Power_Odd_Money += betMoney;
                        }
                        else if (textBoxPick.Text.Equals("짝"))
                        {
                            if (betMoney > UserMaximumSelectPick_BetMoney)
                            {
                                UserMaximumSelectPick_BetMoney = betMoney;
                                UserMaximumSelectPick = "파짝";
                            }
                            Pattern_Equal_Mode_Power_Even_Money += betMoney;
                        }
                    }
                }
            }
        }

        private void Pattern_Equal_Mode_Betting_Processing_Final()
        {
            Pattern_Equal_Mode_All_Betting_Money = Pattern_Equal_Mode_Power_Odd_Money + Pattern_Equal_Mode_Power_Even_Money + Pattern_Equal_Mode_Power_Under_Money + Pattern_Equal_Mode_Power_Over_Money
                            + Pattern_Equal_Mode_Normal_Odd_Money + Pattern_Equal_Mode_Normal_Even_Money + Pattern_Equal_Mode_Normal_Under_Money + Pattern_Equal_Mode_Normal_Over_Money;

            if (Pattern_Equal_Mode_All_Betting_Money >= 100)
            {
                TermInning = 0;
                startInning = 0;
                if (realOrVirtualMode == 1)
                {
                    PowerBall_All_Bet_Money += Pattern_Equal_Mode_All_Betting_Money;

                    allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);
                    UtilModel.UserOwnMoney -= Pattern_Equal_Mode_All_Betting_Money;

                    lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                    txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.White);
                    logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                    logger.Info("[파홀 : " + Pattern_Equal_Mode_Power_Odd_Money + "][파짝 : " + Pattern_Equal_Mode_Power_Even_Money + "][파언 : " + Pattern_Equal_Mode_Power_Under_Money + "][파오 : " + Pattern_Equal_Mode_Power_Over_Money
                        + "][일홀 : " + Pattern_Equal_Mode_Normal_Odd_Money + "][일짝 : " + Pattern_Equal_Mode_Normal_Even_Money + "][일언 : " + Pattern_Equal_Mode_Normal_Under_Money + "][일오 : " + Pattern_Equal_Mode_Normal_Over_Money + "]");
                    Pattern_Equal_Mode_Betting_Status = true;
                }
                else
                {
                    Pattern_Equal_Mode_Url_Param_String = new StringBuilder();
                    Pattern_Equal_Mode_Url_Param_String.Append(UtilModel.UserSiteUrlAddress);
                    Pattern_Equal_Mode_Url_Param_String.Append(":8082/api/bet");
                    Pattern_Equal_Mode_Url_Param_String.AppendFormat("?userid={0}", UtilModel.UserId);
                    Pattern_Equal_Mode_Url_Param_String.AppendFormat("&key={0}", UtilModel.Bet_Api_Key);

                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&gm={0}", "PWB");
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&tdate={0}", TodayDate);
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&rno={0}", PowerBall_Now_All_Inning.ToString());
                    
                    if (Pattern_Equal_Mode_Power_Odd_Money > 0)
                    {
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&pp1={0}", Pattern_Equal_Mode_Power_Odd_Money);
                    }
                    if (Pattern_Equal_Mode_Power_Even_Money > 0)
                    {
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&pp2={0}", Pattern_Equal_Mode_Power_Even_Money);
                    }
                    if (Pattern_Equal_Mode_Power_Under_Money > 0)
                    {
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&pp3={0}", Pattern_Equal_Mode_Power_Under_Money);
                    }
                    if (Pattern_Equal_Mode_Power_Over_Money > 0)
                    {
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&pp4={0}", Pattern_Equal_Mode_Power_Over_Money);
                    }
                    if (Pattern_Equal_Mode_Normal_Odd_Money > 0)
                    {
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&pp5={0}", Pattern_Equal_Mode_Normal_Odd_Money);
                    }
                    if (Pattern_Equal_Mode_Normal_Even_Money > 0)
                    {
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&pp6={0}", Pattern_Equal_Mode_Normal_Even_Money);
                    }
                    if (Pattern_Equal_Mode_Normal_Under_Money > 0)
                    {
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&pp7={0}", Pattern_Equal_Mode_Normal_Under_Money);
                    }
                    if (Pattern_Equal_Mode_Normal_Over_Money > 0)
                    {
                        Pattern_Equal_Mode_Url_Param_String.AppendFormat("&pp8={0}", Pattern_Equal_Mode_Normal_Over_Money);
                    }
                    Pattern_Equal_Mode_Url_Param_String.AppendFormat("&nonce={0}", Pattern_Mode_Random_Nonce);


                    String Message = null;

                    int CountResult = 0;

                    //logger.Info(sb);
                    while (true)
                    {
                        try
                        {
                            //Uri myUri = new Uri(sb);
                            var returnMessage = UtilModel.MakeAsyncRequest(Pattern_Equal_Mode_Url_Param_String.ToString(), "application/x-www-form-urlencoded; charset=UTF-8");
                            Message = returnMessage.Result;
                            logger.Info(Message);
                            if (Message.Contains("ret_code"))
                            {
                                break;
                            }
                            else
                            {
                                CountResult++;
                                string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                                String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Pattern_Equal_Mode_Url_Param_String.ToString());
                                StringBuilder stringB = new StringBuilder();

                                using (TimeoutWebClient webClient = new TimeoutWebClient())
                                {
                                    webClient.Encoding = Encoding.UTF8;
                                    stringB.Append(UtilModel.telegramChatUrl);
                                    stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                    webClient.DownloadString(stringB.ToString());
                                }

                                txtLogAdd(errorMessage, Color.OrangeRed);
                                if (CountResult > 40)
                                {
                                    break;
                                }
                                if (BetRemainingTime < 30)
                                {
                                    break;
                                }
                                UtilModel.Delay(1500);
                                continue;
                            }
                        }
                        catch (Exception _ex)
                        {
                            CountResult++;
                            string errorMessage = "재배팅 시도 횟수 : [" + CountResult + "] 회";

                            String sendMessage = HttpUtility.UrlEncode(PowerBall_Now_All_Inning + "[" + UtilModel._ip + "][" + UtilModel.UserId + "님] 배팅 실패 : " + Pattern_Equal_Mode_Url_Param_String.ToString());
                            StringBuilder stringB = new StringBuilder();

                            using (TimeoutWebClient webClient = new TimeoutWebClient())
                            {
                                webClient.Encoding = Encoding.UTF8;
                                stringB.Append(UtilModel.telegramChatUrl);
                                stringB.AppendFormat("?chatid=847317664&Message={0}", sendMessage);
                                webClient.DownloadString(stringB.ToString());
                            }

                            txtLogAdd(errorMessage, Color.OrangeRed);
                            if (CountResult > 40)
                            {
                                break;
                            }
                            if (BetRemainingTime < 30)
                            {
                                break;
                            }
                            logger.Error(_ex.ToString());
                            UtilModel.Delay(1500);
                            continue;
                        }
                    }
                    if (!Message.Contains("ret_code"))
                    {
                        Pattern_Equal_Mode_Power_Odd_Money = 0;
                        Pattern_Equal_Mode_Power_Even_Money = 0;
                        Pattern_Equal_Mode_Power_Under_Money = 0;
                        Pattern_Equal_Mode_Power_Over_Money = 0;
                        Pattern_Equal_Mode_Normal_Odd_Money = 0;
                        Pattern_Equal_Mode_Normal_Even_Money = 0;
                        Pattern_Equal_Mode_Normal_Under_Money = 0;
                        Pattern_Equal_Mode_Normal_Over_Money = 0;

                        string errorMessage = "[" + CountResult + "] 배팅 시도를 여러 차례 시도하였지만 실패하여 배팅이 등록되지 않았습니다.";
                        txtLogAdd(errorMessage, Color.White);
                        logger.Info(errorMessage);
                    }
                    else
                    {
                        JObject jo = JObject.Parse(Message);
                        int ret_code = int.Parse(jo.SelectToken("ret_code").ToString());
                        var ret_message = jo.SelectToken("comment").ToString();
                        if (ret_code == 1)
                        {
                            UtilModel.UserOwnMoney = int.Parse(jo.SelectToken("more_info").SelectToken("balance").ToString());

                            lblTxtNowMoney.Text = UtilModel.StringFormatChanged(UtilModel.UserOwnMoney);

                            PowerBall_All_Bet_Money += Pattern_Equal_Mode_All_Betting_Money;
                            allBettingMoneyLabel.Text = UtilModel.StringFormatChanged(PowerBall_All_Bet_Money);

                            txtLogAdd("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.", Color.FromArgb(255, Color.FromArgb(0x42A5F5)));
                            logger.Info("[" + PowerBall_Now_All_Inning + "] 정상 배팅 등록 완료.");
                            String bettingMoneyString = "[배팅완료][" + PowerBall_Now_All_Inning + " 회][파홀:" + Pattern_Equal_Mode_Power_Odd_Money + "][파짝:" + Pattern_Equal_Mode_Power_Even_Money + "][파언더:" + Pattern_Equal_Mode_Power_Under_Money + "][파오버:" + Pattern_Equal_Mode_Power_Over_Money
                                + "][일홀:" + Pattern_Equal_Mode_Normal_Odd_Money + "][일짝:" + Pattern_Equal_Mode_Normal_Even_Money + "][일언더:" + Pattern_Equal_Mode_Normal_Under_Money + "][일오버:" + Pattern_Equal_Mode_Normal_Over_Money + "]";
                            logger.Info(bettingMoneyString);
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingRegistMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(bettingMoneyString));
                                }
                            }
                            Pattern_Equal_Mode_Betting_Status = true;
                        }
                        else if (ret_code < 0)
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }

                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                        else
                        {
                            if (errorBeep.Checked)
                            {
                                AsyncTextSpeak(UtilModel.UserProfile + @"님 배팅 실패. " + ret_message);
                            }
                            if (UtilModel.User_Telegram_Chat_Id > 0)
                            {
                                if (bettingErrorMessageCheck.Checked)
                                {
                                    UtilModel.GetHttp(UtilModel.telegramChatUrl + "?chatid=" + UtilModel.User_Telegram_Chat_Id + "&Message=" + HttpUtility.UrlEncode(ret_message));
                                }
                            }
                            txtLogAdd("배팅 실패 : " + ret_code + " : " + ret_message, Color.White);
                            MessageBox.Show("배팅 실패 : " + ret_message);
                            logger.Info(PowerBall_Now_All_Inning + " : 배팅 실패 : " + ret_code + " : " + ret_message);
                        }
                    }
                }

                if (Pattern_Equal_Mode_Betting_Status)
                {
                    String str = "";
                    String str2 = "";
                    ListViewItem item;
                    if (Pattern_Equal_Mode_Power_Odd_Money >= 100)
                    {
                        str += "[파홀 : " + UtilModel.StringFormatChanged(Pattern_Equal_Mode_Power_Odd_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Pattern_Equal_Mode_Power_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("패턴일치");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Pattern_Equal_Mode_Power_Even_Money >= 100)
                    {
                        str += "[파짝 : " + UtilModel.StringFormatChanged(Pattern_Equal_Mode_Power_Even_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Pattern_Equal_Mode_Power_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("패턴일치");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Pattern_Equal_Mode_Power_Under_Money >= 100)
                    {
                        str += "[파언 : " + UtilModel.StringFormatChanged(Pattern_Equal_Mode_Power_Under_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Pattern_Equal_Mode_Power_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("패턴일치");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Pattern_Equal_Mode_Power_Over_Money >= 100)
                    {
                        str += "[파오 : " + UtilModel.StringFormatChanged(Pattern_Equal_Mode_Power_Over_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("파워");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Pattern_Equal_Mode_Power_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("패턴일치");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Pattern_Equal_Mode_Normal_Odd_Money >= 100)
                    {
                        str2 += "[일홀 : " + UtilModel.StringFormatChanged(Pattern_Equal_Mode_Normal_Odd_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("홀");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Pattern_Equal_Mode_Normal_Odd_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("패턴일치");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Pattern_Equal_Mode_Normal_Even_Money >= 100)
                    {
                        str2 += "[일짝 : " + UtilModel.StringFormatChanged(Pattern_Equal_Mode_Normal_Even_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("짝");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Pattern_Equal_Mode_Normal_Even_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("패턴일치");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Pattern_Equal_Mode_Normal_Under_Money >= 100)
                    {
                        str2 += "[일언 : " + UtilModel.StringFormatChanged(Pattern_Equal_Mode_Normal_Under_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("언");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Pattern_Equal_Mode_Normal_Under_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("패턴일치");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (Pattern_Equal_Mode_Normal_Over_Money >= 100)
                    {
                        str2 += "[일오 : " + UtilModel.StringFormatChanged(Pattern_Equal_Mode_Normal_Over_Money) + "원]";

                        item = new ListViewItem(PowerBall_Now_All_Inning.ToString()); // 픽스터 이름
                        item.SubItems.Add("일반");
                        item.SubItems.Add("오");
                        item.SubItems.Add(UtilModel.StringFormatChanged(Pattern_Equal_Mode_Normal_Over_Money));
                        item.SubItems.Add("-----");
                        item.SubItems.Add("-----");
                        item.SubItems.Add("패턴일치");
                        directBetRegistListView.Items.Add(item);
                    }
                    if (str.Length > 1)
                    {
                        txtLogAdd(str, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                    if (str2.Length > 1)
                    {
                        txtLogAdd(str2, Color.FromArgb(255, Color.FromArgb(0x42A5F5))); // 129, 199, 132
                    }
                }
            }
        }

        private void comboBoxDecalPowerBallOddEvenBetLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            string betLevel = comboBoxDecalPowerBallOddEvenBetLevel.Text;
            TextBox TargetBox = textBoxDecalPowerBallOddEvenBetMoney;

            if (betLevel.Equals("1"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("2"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("3"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("4"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("5"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("6"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("7"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("8"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("9"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("10"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("11"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("12"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else
            {
                textBoxDecalPowerBallOddEven.ForeColor = Color.DarkGray;
                textBoxDecalPowerBallOddEven.BackColor = Color.White;
                TargetBox.Text = "0";
            }
        }

        private void comboBoxDecalPowerBallUnderOverBetLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            string betLevel = comboBoxDecalPowerBallUnderOverBetLevel.Text;
            TextBox TargetBox = textBoxDecalPowerBallUnderOverBetMoney;
            if (betLevel.Equals("1"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("2"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("3"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("4"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("5"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("6"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("7"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("8"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("9"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("10"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("11"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("12"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else
            {
                textBoxDecalPowerBallUnderOver.ForeColor = Color.DarkGray;
                textBoxDecalPowerBallUnderOver.BackColor = Color.White;
                TargetBox.Text = "0";
            }
        }

        private void comboBoxDecalNormalBallOddEvenBetLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            string betLevel = comboBoxDecalNormalBallOddEvenBetLevel.Text;
            TextBox TargetBox = textBoxDecalNormalBallOddEvenBetMoney;
            if (betLevel.Equals("1"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("2"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("3"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("4"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("5"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("6"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("7"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("8"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("9"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("10"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("11"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("12"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else
            {
                textBoxDecalNormalBallOddEven.ForeColor = Color.DarkGray;
                textBoxDecalNormalBallOddEven.BackColor = Color.White;
                TargetBox.Text = "0";
            }
        }

        private void comboBoxDecalNormalBallUnderOverBetLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            string betLevel = comboBoxDecalNormalBallUnderOverBetLevel.Text;
            TextBox TargetBox = textBoxDecalNormalBallUnderOverBetMoney;
            if (betLevel.Equals("1"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("2"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("3"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("4"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("5"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("6"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("7"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("8"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("9"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("10"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("11"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else if (betLevel.Equals("12"))
            {
                TargetBox.Text = DecalBetMoneySetting(betLevel);
            }
            else
            {
                textBoxDecalNormalBallUnderOver.ForeColor = Color.DarkGray;
                textBoxDecalNormalBallUnderOver.BackColor = Color.White;
                TargetBox.Text = "0";
            }
        }

        private string DecalBetMoneySetting(string betLevel)
        {
            if (betLevel.Equals("1"))
            {
                return MiniGameDecalMoneySettingL1.Text;
            }
            else if (betLevel.Equals("2"))
            {
                return MiniGameDecalMoneySettingL2.Text;
            }
            else if (betLevel.Equals("3"))
            {
                return MiniGameDecalMoneySettingL3.Text;
            }
            else if (betLevel.Equals("4"))
            {
                return MiniGameDecalMoneySettingL4.Text;
            }
            else if (betLevel.Equals("5"))
            {
                return MiniGameDecalMoneySettingL5.Text;
            }
            else if (betLevel.Equals("6"))
            {
                return MiniGameDecalMoneySettingL6.Text;
            }
            else if (betLevel.Equals("7"))
            {
                return MiniGameDecalMoneySettingL7.Text;
            }
            else if (betLevel.Equals("8"))
            {
                return MiniGameDecalMoneySettingL8.Text;
            }
            else if (betLevel.Equals("9"))
            {
                return MiniGameDecalMoneySettingL9.Text;
            }
            else if (betLevel.Equals("10"))
            {
                return MiniGameDecalMoneySettingL10.Text;
            }
            else if (betLevel.Equals("11"))
            {
                return MiniGameDecalMoneySettingL11.Text;
            }
            else if (betLevel.Equals("12"))
            {
                return MiniGameDecalMoneySettingL12.Text;
            }
            return "0";
        }
        private void txtMoneySetting_Changed(object sender, EventArgs e)
        {
            TextBox txtPrice = sender as TextBox;
            string lgsText;

            lgsText = Regex.Replace(txtPrice.Text, @"\D", "");

            if (!string.IsNullOrEmpty(lgsText))
            {
                txtPrice.Text = String.Format("{0:#,##0}", Convert.ToDouble(lgsText));

                txtPrice.SelectionStart = txtPrice.TextLength;

                txtPrice.SelectionLength = 0;
            }
        }

        Boolean Check_PatternEqualMode = false;
        Boolean CheckDecalBet = false;

        private void checkBoxDecalPowerBallOddEven_CheckedChanged(object sender, EventArgs e)
        {
            BetPowerBallOddEvenDecal = false;
            PowerBallOddEvenDecalLastChoice = string.Empty;
            comboBoxDecalPowerBallOddEvenBetLevel.Text = "0";
            textBoxDecalPowerBallOddEvenPick.Text = "통과";

        }

        private void checkBoxDecalPowerBallUnderOver_CheckedChanged(object sender, EventArgs e)
        {

            BetPowerBallUnderOverDecal = false;
            PowerBallUnderOverDecalLastChoice = string.Empty;
            comboBoxDecalPowerBallUnderOverBetLevel.Text = "0";
            textBoxDecalPowerBallUnderOverPick.Text = "통과";
        }

        private void checkBoxDecalNormalBallOddEven_CheckedChanged(object sender, EventArgs e)
        {
            BetNormalBallOddEvenDecal = false;
            NormalBallOddEvenDecalLastChoice = string.Empty;
            comboBoxDecalNormalBallOddEvenBetLevel.Text = "0";
            textBoxDecalNormalBallOddEvenPick.Text = "통과";
        }

        private void checkBoxDecalNormalBallUnderOver_CheckedChanged(object sender, EventArgs e)
        {
            BetNormalBallUnderOverDecal = false;
            NormalBallUnderOverDecalLastChoice = string.Empty;
            comboBoxDecalNormalBallUnderOverBetLevel.Text = "0";
            textBoxDecalNormalBallUnderOverPick.Text = "통과";
        }
        private void termBetLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox comboBox = sender as ComboBox;
            int betLevel = int.Parse(comboBox.Text);
            TextBox TargetBox = null;
            if (comboBox.Name.Equals("termBetLevel1"))
            {
                TargetBox = termBetMoney1;
                string[] splitPick = termModePick1.Text.Split(new char[] { '|' });

                if (betLevel < splitPick.Length && betLevel > 0)
                {
                    string strSplitPick = splitPick[betLevel - 1];
                    if (string.IsNullOrEmpty(strSplitPick))
                    {
                        termBetPick1.Text = "통";
                        termBetPick1.ForeColor = Color.Black;
                        termBetPick1.BackColor = Color.White;
                        bettingTerm1 = false;
                    }
                    else
                    {
                        if (strSplitPick.Equals("홀") || strSplitPick.Equals("짝") || strSplitPick.Equals("언") || strSplitPick.Equals("오"))
                        {
                            termBetPick1.Text = strSplitPick;
                            termBetPick1.ForeColor = Color.White;
                            termBetPick1.BackColor = Color.Black;
                        }
                        else
                        {
                            termBetPick1.Text = "통";
                            termBetPick1.ForeColor = Color.Black;
                            termBetPick1.BackColor = Color.White;
                            bettingTerm1 = false;
                        }
                    }
                }
                else
                {
                    termBetPick1.Text = "통";
                    termBetPick1.ForeColor = Color.Black;
                    termBetPick1.BackColor = Color.White;
                    bettingTerm1 = false;
                }
            }
            else if (comboBox.Name.Equals("termBetLevel2"))
            {
                TargetBox = termBetMoney2;
                string[] splitPick = termModePick2.Text.Split(new char[] { '|' });

                if (betLevel < splitPick.Length && betLevel > 0)
                {
                    string strSplitPick = splitPick[betLevel - 1];
                    if (string.IsNullOrEmpty(strSplitPick))
                    {
                        termBetPick2.Text = "통";
                        termBetPick2.ForeColor = Color.Black;
                        termBetPick2.BackColor = Color.White;
                        bettingTerm1 = false;
                    }
                    else
                    {
                        if (strSplitPick.Equals("홀") || strSplitPick.Equals("짝") || strSplitPick.Equals("언") || strSplitPick.Equals("오"))
                        {
                            termBetPick2.Text = strSplitPick;
                            termBetPick2.ForeColor = Color.White;
                            termBetPick2.BackColor = Color.Black;
                        }
                        else
                        {
                            termBetPick2.Text = "통";
                            termBetPick2.ForeColor = Color.Black;
                            termBetPick2.BackColor = Color.White;
                            bettingTerm2 = false;
                        }
                    }
                }
                else
                {
                    termBetPick2.Text = "통";
                    termBetPick2.ForeColor = Color.Black;
                    termBetPick2.BackColor = Color.White;
                    bettingTerm2 = false;
                }
            }
            else if (comboBox.Name.Equals("termBetLevel3"))
            {
                TargetBox = termBetMoney3;
                string[] splitPick = termModePick3.Text.Split(new char[] { '|' });

                if (betLevel < splitPick.Length && betLevel > 0)
                {
                    string strSplitPick = splitPick[betLevel - 1];
                    if (string.IsNullOrEmpty(strSplitPick))
                    {
                        termBetPick3.Text = "통";
                        termBetPick3.ForeColor = Color.Black;
                        termBetPick3.BackColor = Color.White;
                        bettingTerm3 = false;
                    }
                    else
                    {
                        if (strSplitPick.Equals("홀") || strSplitPick.Equals("짝") || strSplitPick.Equals("언") || strSplitPick.Equals("오"))
                        {
                            termBetPick3.Text = strSplitPick;
                            termBetPick3.ForeColor = Color.White;
                            termBetPick3.BackColor = Color.Black;
                        }
                        else
                        {
                            termBetPick3.Text = "통";
                            termBetPick3.ForeColor = Color.Black;
                            termBetPick3.BackColor = Color.White;
                            bettingTerm3 = false;
                        }
                    }
                }
                else
                {
                    termBetPick3.Text = "통";
                    termBetPick3.ForeColor = Color.Black;
                    termBetPick3.BackColor = Color.White;
                    bettingTerm3 = false;
                }
            }
            else if (comboBox.Name.Equals("termBetLevel4"))
            {
                TargetBox = termBetMoney4;
                string[] splitPick = termModePick4.Text.Split(new char[] { '|' });

                if (betLevel < splitPick.Length && betLevel > 0)
                {
                    string strSplitPick = splitPick[betLevel - 1];
                    if (string.IsNullOrEmpty(strSplitPick))
                    {
                        termBetPick4.Text = "통";
                        termBetPick4.ForeColor = Color.Black;
                        termBetPick4.BackColor = Color.White;
                        bettingTerm4 = false;
                    }
                    else
                    {
                        if (strSplitPick.Equals("홀") || strSplitPick.Equals("짝") || strSplitPick.Equals("언") || strSplitPick.Equals("오"))
                        {
                            termBetPick4.Text = strSplitPick;
                            termBetPick4.ForeColor = Color.White;
                            termBetPick4.BackColor = Color.Black;
                        }
                        else
                        {
                            termBetPick4.Text = "통";
                            termBetPick4.ForeColor = Color.Black;
                            termBetPick4.BackColor = Color.White;
                            bettingTerm4 = false;
                        }
                    }
                }
                else
                {
                    termBetPick4.Text = "통";
                    termBetPick4.ForeColor = Color.Black;
                    termBetPick4.BackColor = Color.White;
                    bettingTerm4 = false;
                }
            }
            else if (comboBox.Name.Equals("termBetLevel5"))
            {
                TargetBox = termBetMoney5;
                string[] splitPick = termModePick5.Text.Split(new char[] { '|' });

                if (betLevel < splitPick.Length && betLevel > 0)
                {
                    string strSplitPick = splitPick[betLevel - 1];
                    if (string.IsNullOrEmpty(strSplitPick))
                    {
                        termBetPick5.Text = "통";
                        termBetPick5.ForeColor = Color.Black;
                        termBetPick5.BackColor = Color.White;
                        bettingTerm5 = false;
                    }
                    else
                    {
                        if (strSplitPick.Equals("홀") || strSplitPick.Equals("짝") || strSplitPick.Equals("언") || strSplitPick.Equals("오"))
                        {
                            termBetPick5.Text = strSplitPick;
                            termBetPick5.ForeColor = Color.White;
                            termBetPick5.BackColor = Color.Black;
                        }
                        else
                        {
                            termBetPick5.Text = "통";
                            termBetPick5.ForeColor = Color.Black;
                            termBetPick5.BackColor = Color.White;
                            bettingTerm5 = false;
                        }
                    }
                }
                else
                {
                    termBetPick5.Text = "통";
                    termBetPick5.ForeColor = Color.Black;
                    termBetPick5.BackColor = Color.White;
                    bettingTerm5 = false;
                }
            }
            else if (comboBox.Name.Equals("termBetLevel6"))
            {
                TargetBox = termBetMoney6;
                string[] splitPick = termModePick6.Text.Split(new char[] { '|' });

                if (betLevel < splitPick.Length && betLevel > 0)
                {
                    string strSplitPick = splitPick[betLevel - 1];
                    if (string.IsNullOrEmpty(strSplitPick))
                    {
                        termBetPick6.Text = "통";
                        termBetPick6.ForeColor = Color.Black;
                        termBetPick6.BackColor = Color.White;
                        bettingTerm6 = false;
                    }
                    else
                    {
                        if (strSplitPick.Equals("홀") || strSplitPick.Equals("짝") || strSplitPick.Equals("언") || strSplitPick.Equals("오"))
                        {
                            termBetPick6.Text = strSplitPick;
                            termBetPick6.ForeColor = Color.White;
                            termBetPick6.BackColor = Color.Black;
                        }
                        else
                        {
                            termBetPick6.Text = "통";
                            termBetPick6.ForeColor = Color.Black;
                            termBetPick6.BackColor = Color.White;
                            bettingTerm6 = false;
                        }
                    }
                }
                else
                {
                    termBetPick6.Text = "통";
                    termBetPick6.ForeColor = Color.Black;
                    termBetPick6.BackColor = Color.White;
                    bettingTerm6 = false;
                }
            }
            if (TargetBox != null)
            {
                if (betLevel > 0)
                {
                    TargetBox.Text = (Controls.Find("MiniGameTermMoneySettingL" + betLevel.ToString(), true)[0] as TextBox).Text;
                }
                else
                {
                    TargetBox.Text = "0";
                }
            }
        }

        Boolean UseBetTerm1 = false;
        Boolean UseBetTerm2 = false;
        Boolean UseBetTerm3 = false;
        Boolean UseBetTerm4 = false;
        Boolean UseBetTerm5 = false;
        Boolean UseBetTerm6 = false;

        Boolean bettingTerm1 = false;
        Boolean bettingTerm2 = false;
        Boolean bettingTerm3 = false;
        Boolean bettingTerm4 = false;
        Boolean bettingTerm5 = false;
        Boolean bettingTerm6 = false;

        Boolean CheckTermBet = false;

        private void checkBoxTerm1_CheckedChanged(object sender, EventArgs e)
        {
            termBetLevel1.Text = "0";
            termBetPick1.Text = "통과";
            // 242, 245, 246
            //tableLayoutPanelTerm1
            if (checkBoxTerm1.Checked)
            {
                tableLayoutPanelTerm1.BackColor = Color.FromArgb(255, Color.FromArgb(0xFFB74D));
                termModePick1.ReadOnly = true;
                UseBetTerm1 = true;
            }
            else
            {
                tableLayoutPanelTerm1.BackColor = Color.FromArgb(242, 245, 246);
                termModePick1.ReadOnly = false;
                UseBetTerm1 = false;
            }
        }

        private void CheckBoxTerm2_CheckedChanged(object sender, EventArgs e)
        {
            termBetLevel2.Text = "0";
            termBetPick2.Text = "통과";
            if (CheckBoxTerm2.Checked)
            {
                tableLayoutPanelTerm2.BackColor = Color.FromArgb(255, Color.FromArgb(0xFFAB91));
                termModePick2.ReadOnly = true;
                UseBetTerm2 = true;
            }
            else
            {
                tableLayoutPanelTerm2.BackColor = Color.FromArgb(242, 245, 246);
                termModePick2.ReadOnly = false;
                UseBetTerm2 = false;
            }
        }

        private void checkBoxTerm3_CheckedChanged(object sender, EventArgs e)
        {
            termBetLevel3.Text = "0";
            termBetPick3.Text = "통과";
            if (checkBoxTerm3.Checked)
            {
                tableLayoutPanelTerm3.BackColor = Color.FromArgb(255, Color.FromArgb(0xBCAAA4));
                termModePick3.ReadOnly = true;
                UseBetTerm3 = true;
            }
            else
            {
                tableLayoutPanelTerm3.BackColor = Color.FromArgb(242, 245, 246);
                termModePick3.ReadOnly = false;
                UseBetTerm3 = false;
            }
        }

        private void checkBoxTerm4_CheckedChanged(object sender, EventArgs e)
        {
            termBetLevel4.Text = "0";
            termBetPick4.Text = "통과";
            if (checkBoxTerm4.Checked)
            {
                tableLayoutPanelTerm4.BackColor = Color.FromArgb(255, Color.FromArgb(0xA5D6A7));
                termModePick4.ReadOnly = true;
                UseBetTerm4 = true;
            }
            else
            {
                tableLayoutPanelTerm4.BackColor = Color.FromArgb(242, 245, 246);
                termModePick4.ReadOnly = false;
                UseBetTerm4 = false;
            }
        }

        private void checkBoxTerm5_CheckedChanged(object sender, EventArgs e)
        {
            termBetLevel5.Text = "0";
            termBetPick5.Text = "통과";
            if (checkBoxTerm5.Checked)
            {
                tableLayoutPanelTerm5.BackColor = Color.FromArgb(255, Color.FromArgb(0xA5D6A7));
                termModePick5.ReadOnly = true;
                UseBetTerm5 = true;
            }
            else
            {
                tableLayoutPanelTerm5.BackColor = Color.FromArgb(242, 245, 246);
                termModePick5.ReadOnly = false;
                UseBetTerm5 = false;
            }
        }

        private void checkBoxTerm6_CheckedChanged(object sender, EventArgs e)
        {
            termBetLevel6.Text = "0";
            termBetPick6.Text = "통과";
            if (checkBoxTerm6.Checked)
            {
                tableLayoutPanelTerm6.BackColor = Color.FromArgb(255, Color.FromArgb(0xA5D6A7));
                termModePick6.ReadOnly = true;
                UseBetTerm6 = true;
            }
            else
            {
                tableLayoutPanelTerm6.BackColor = Color.FromArgb(242, 245, 246);
                termModePick6.ReadOnly = false;
                UseBetTerm6 = false;
            }
        }
        private void CheckNumberTermBet()
        {
            if (string.IsNullOrEmpty(PowerBall_Result_Number))
            {
                return;
            }
            if (UseBetTerm1 && !bettingTerm1)
            {
                if (!termSelectNumber1.Text.Equals("-1"))
                {
                    if (termSelectNumber1.Text.Equals(PowerBall_Result_Number))
                    {
                        termBetLevel1.Text = "1";
                        bettingTerm1 = true;
                    }
                }
            }
            if (UseBetTerm2 && !bettingTerm2)
            {
                if (!termSelectNumber2.Text.Equals("-1"))
                {
                    if (termSelectNumber2.Text.Equals(PowerBall_Result_Number))
                    {
                        termBetLevel2.Text = "1";
                        bettingTerm2 = true;
                    }
                }
            }
            if (UseBetTerm3 && !bettingTerm3)
            {
                if (!termSelectNumber3.Text.Equals("-1"))
                {
                    if (termSelectNumber3.Text.Equals(PowerBall_Result_Number))
                    {
                        termBetLevel3.Text = "1";
                        bettingTerm3 = true;
                    }
                }
            }
            if (UseBetTerm4 && !bettingTerm4)
            {
                if (!termSelectNumber4.Text.Equals("-1"))
                {
                    if (termSelectNumber4.Text.Equals(PowerBall_Result_Number))
                    {
                        termBetLevel4.Text = "1";
                        bettingTerm4 = true;
                    }
                }
            }
            if (UseBetTerm5 && !bettingTerm5)
            {
                if (!termSelectNumber5.Text.Equals("-1"))
                {
                    if (termSelectNumber5.Text.Equals(PowerBall_Result_Number))
                    {
                        termBetLevel5.Text = "1";
                        bettingTerm5 = true;
                    }
                }
            }
            if (UseBetTerm6 && !bettingTerm6)
            {
                if (!termSelectNumber6.Text.Equals("-1"))
                {
                    if (termSelectNumber6.Text.Equals(PowerBall_Result_Number))
                    {
                        termBetLevel6.Text = "1";
                        bettingTerm6 = true;
                    }
                }
            }
        }

        private Boolean CheckTelegramMessageNumberTermBet()
        {
            if (string.IsNullOrEmpty(PowerBall_Result_Number))
            {
                return false;
            }
            if (!bettingTerm1)
            {
                if (!termSelectNumber1.Text.Equals("-1"))
                {
                    if (termSelectNumber1.Text.Equals(PowerBall_Result_Number))
                    {
                        return true;
                    }
                }
            }
            if (!bettingTerm2)
            {
                if (!termSelectNumber2.Text.Equals("-1"))
                {
                    if (termSelectNumber2.Text.Equals(PowerBall_Result_Number))
                    {
                        return true;
                    }
                }
            }
            if (!bettingTerm3)
            {
                if (!termSelectNumber3.Text.Equals("-1"))
                {
                    if (termSelectNumber3.Text.Equals(PowerBall_Result_Number))
                    {
                        return true;
                    }
                }
            }
            if (!bettingTerm4)
            {
                if (!termSelectNumber4.Text.Equals("-1"))
                {
                    if (termSelectNumber4.Text.Equals(PowerBall_Result_Number))
                    {
                        return true;
                    }
                }
            }
            if (!bettingTerm5)
            {
                if (!termSelectNumber5.Text.Equals("-1"))
                {
                    if (termSelectNumber5.Text.Equals(PowerBall_Result_Number))
                    {
                        return true;
                    }
                }
            }
            if (!bettingTerm6)
            {
                if (!termSelectNumber6.Text.Equals("-1"))
                {
                    if (termSelectNumber6.Text.Equals(PowerBall_Result_Number))
                    {
                        return true;
                    }
                }
            }
            return false;
        }

        private void checking_Pattern_Equal_Mode()
        {
            Check_PatternEqualMode = true;

            CheckBox checkBoxStatus;
            TextBox textBoxPattern;
            TextBox textBoxEqual;
            ComboBox InningBetLevel;

            for (int _find = 1; _find <= 16; _find++)
            {
                checkBoxStatus = (Controls.Find("checkBoxStatus" + _find.ToString(), true)[0] as CheckBox);

                if (checkBoxStatus.Checked)
                {
                    textBoxPattern = (Controls.Find("textBoxPattern" + _find.ToString(), true)[0] as TextBox);

                    if (PowerBall_Now_All_Inning % 2 == 1)
                    {
                        InningBetLevel = (Controls.Find("oddInningBetLevel" + _find.ToString(), true)[0] as ComboBox);
                        if (string.IsNullOrEmpty(InningBetLevel.Text))
                        {
                            InningBetLevel.Text = "0";
                        }
                        if (_find > 12) // 일반볼 언오버
                        {
                            textBoxEqual = (Controls.Find("textBoxEqual" + _find.ToString(), true)[0] as TextBox);

                            if (oddNormalBallUnderOver.ToString().IndexOf(textBoxPattern.Text) == 0)
                            {
                                textBoxEqual.ForeColor = Color.Black;
                                textBoxPattern.ForeColor = Color.White;
                                textBoxPattern.BackColor = Color.Black;
                                textBoxEqual.Text = "일치";
                                if (InningBetLevel.Text.Equals("0"))
                                {
                                    InningBetLevel.Text = "1";
                                }
                            }
                            else
                            {
                                textBoxEqual.ForeColor = Color.DarkGray;
                                textBoxPattern.ForeColor = Color.Black;
                                textBoxPattern.BackColor = Color.White;
                                textBoxEqual.Text = "불일치";
                            }
                        }
                        else if (_find > 8) // 일반볼 홀짝
                        {
                            textBoxEqual = (Controls.Find("textBoxEqual" + _find.ToString(), true)[0] as TextBox);

                            if (oddNormalBallOddEven.ToString().IndexOf(textBoxPattern.Text) == 0)
                            {
                                textBoxEqual.ForeColor = Color.Black;
                                textBoxPattern.ForeColor = Color.White;
                                textBoxPattern.BackColor = Color.Black;
                                textBoxEqual.Text = "일치";
                                if (InningBetLevel.Text.Equals("0"))
                                {
                                    InningBetLevel.Text = "1";
                                }
                            }
                            else
                            {
                                textBoxEqual.ForeColor = Color.DarkGray;
                                textBoxPattern.ForeColor = Color.Black;
                                textBoxPattern.BackColor = Color.White;
                                textBoxEqual.Text = "불일치";
                            }
                        }
                        else if (_find > 4) // 파워볼 언오버
                        {
                            textBoxEqual = (Controls.Find("textBoxEqual" + _find.ToString(), true)[0] as TextBox);

                            if (oddPowerBallUnderOver.ToString().IndexOf(textBoxPattern.Text) == 0)
                            {
                                textBoxEqual.ForeColor = Color.Black;
                                textBoxPattern.ForeColor = Color.White;
                                textBoxPattern.BackColor = Color.Black;
                                textBoxEqual.Text = "일치";
                                if (InningBetLevel.Text.Equals("0"))
                                {
                                    InningBetLevel.Text = "1";
                                }
                            }
                            else
                            {
                                textBoxEqual.ForeColor = Color.DarkGray;
                                textBoxPattern.ForeColor = Color.Black;
                                textBoxPattern.BackColor = Color.White;
                                textBoxEqual.Text = "불일치";
                            }
                        }
                        else // 파워볼 홀짝
                        {
                            textBoxEqual = (Controls.Find("textBoxEqual" + _find.ToString(), true)[0] as TextBox);

                            if (oddPowerBallOddEven.ToString().IndexOf(textBoxPattern.Text) == 0)
                            {
                                textBoxEqual.ForeColor = Color.Black;
                                textBoxPattern.ForeColor = Color.White;
                                textBoxPattern.BackColor = Color.Black;
                                textBoxEqual.Text = "일치";
                                if (InningBetLevel.Text.Equals("0"))
                                {
                                    InningBetLevel.Text = "1";
                                }
                            }
                            else
                            {
                                textBoxEqual.ForeColor = Color.DarkGray;
                                textBoxPattern.ForeColor = Color.Black;
                                textBoxPattern.BackColor = Color.White;
                                textBoxEqual.Text = "불일치";
                            }
                        }
                    }
                    else if (PowerBall_Now_All_Inning % 2 == 0)
                    {

                        InningBetLevel = (Controls.Find("evenInningBetLevel" + _find.ToString(), true)[0] as ComboBox);
                        if (string.IsNullOrEmpty(InningBetLevel.Text))
                        {
                            InningBetLevel.Text = "0";
                        }
                        if (_find > 12) // 일반볼 언오버
                        {
                            textBoxEqual = (Controls.Find("textBoxEqual" + _find.ToString(), true)[0] as TextBox);

                            if (evenNormalBallUnderOver.ToString().IndexOf(textBoxPattern.Text) == 0)
                            {
                                textBoxEqual.ForeColor = Color.Black;
                                textBoxPattern.ForeColor = Color.White;
                                textBoxPattern.BackColor = Color.Black;
                                textBoxEqual.Text = "일치";
                                if (InningBetLevel.Text.Equals("0"))
                                {
                                    InningBetLevel.Text = "1";
                                }
                            }
                            else
                            {
                                textBoxEqual.ForeColor = Color.DarkGray;
                                textBoxPattern.ForeColor = Color.Black;
                                textBoxPattern.BackColor = Color.White;
                                textBoxEqual.Text = "불일치";
                            }
                        }
                        else if (_find > 8) // 일반볼 홀짝
                        {
                            textBoxEqual = (Controls.Find("textBoxEqual" + _find.ToString(), true)[0] as TextBox);

                            if (evenNormalBallOddEven.ToString().IndexOf(textBoxPattern.Text) == 0)
                            {
                                textBoxEqual.ForeColor = Color.Black;
                                textBoxPattern.ForeColor = Color.White;
                                textBoxPattern.BackColor = Color.Black;
                                textBoxEqual.Text = "일치";
                                if (InningBetLevel.Text.Equals("0"))
                                {
                                    InningBetLevel.Text = "1";
                                }
                            }
                            else
                            {
                                textBoxEqual.ForeColor = Color.DarkGray;
                                textBoxPattern.ForeColor = Color.Black;
                                textBoxPattern.BackColor = Color.White;
                                textBoxEqual.Text = "불일치";
                            }
                        }
                        else if (_find > 4) // 파워볼 언오버
                        {
                            textBoxEqual = (Controls.Find("textBoxEqual" + _find.ToString(), true)[0] as TextBox);

                            if (evenPowerBallUnderOver.ToString().IndexOf(textBoxPattern.Text) == 0)
                            {
                                textBoxEqual.ForeColor = Color.Black;
                                textBoxPattern.ForeColor = Color.White;
                                textBoxPattern.BackColor = Color.Black;
                                textBoxEqual.Text = "일치";
                                if (InningBetLevel.Text.Equals("0"))
                                {
                                    InningBetLevel.Text = "1";
                                }
                            }
                            else
                            {
                                textBoxEqual.ForeColor = Color.DarkGray;
                                textBoxPattern.ForeColor = Color.Black;
                                textBoxPattern.BackColor = Color.White;
                                textBoxEqual.Text = "불일치";
                            }
                        }
                        else // 파워볼 홀짝
                        {
                            textBoxEqual = (Controls.Find("textBoxEqual" + _find.ToString(), true)[0] as TextBox);

                            if (evenPowerBallOddEven.ToString().IndexOf(textBoxPattern.Text) == 0)
                            {
                                textBoxEqual.ForeColor = Color.Black;
                                textBoxPattern.ForeColor = Color.White;
                                textBoxPattern.BackColor = Color.Black;
                                textBoxEqual.Text = "일치";
                                if (InningBetLevel.Text.Equals("0"))
                                {
                                    InningBetLevel.Text = "1";
                                }
                            }
                            else
                            {
                                textBoxEqual.ForeColor = Color.DarkGray;
                                textBoxPattern.ForeColor = Color.Black;
                                textBoxPattern.BackColor = Color.White;
                                textBoxEqual.Text = "불일치";
                            }
                        }
                    }
                }
            }
        }
        // <summary>
        // 수정 삭제하기
        // </summary>
        private void XMLModifierPropertiesSettings()
        {
            try
            {
                // xml 문서를 불러온다.
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.Load("propertiesSettings.xml");

                // 첫노드를 잡아주고 하위 노드를 서냍ㄱ한다.
                XmlNode Firstnode = XmlDoc.DocumentElement;
                XmlElement SubNode = (XmlElement)Firstnode.SelectSingleNode("propertiesSettings");

                if (SubNode != null)
                {
                    XmlNode DeleteNode;

                    DeleteNode = SubNode.SelectSingleNode("id");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "id", UtilModel.UserId));

                    DeleteNode = SubNode.SelectSingleNode("UserSiteUrlAddress");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "UserSiteUrlAddress", UtilModel.UserSiteUrlAddress));

                    DeleteNode = SubNode.SelectSingleNode("samePerson");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "samePerson", UtilModel.SamePerson));

                    DeleteNode = SubNode.SelectSingleNode("resultMark");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "resultMark", UtilModel.ResultMark));

                    DeleteNode = SubNode.SelectSingleNode("errorBeep");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "errorBeep", UtilModel.ErrorBeep));

                    DeleteNode = SubNode.SelectSingleNode("bettingFail");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "bettingFail", UtilModel.BettingFail));

                    DeleteNode = SubNode.SelectSingleNode("patternBetNumber");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "patternBetNumber", UtilModel.PatternBetNumber));

                    DeleteNode = SubNode.SelectSingleNode("useAutoReverse");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "useAutoReverse", UtilModel.UseAutoReverse));

                    DeleteNode = SubNode.SelectSingleNode("useOverProfit");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "useOverProfit", UtilModel.UseOverProfit));

                    DeleteNode = SubNode.SelectSingleNode("OverProfitValue");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "OverProfitValue", UtilModel.OverProfitValue));

                    DeleteNode = SubNode.SelectSingleNode("useUnderProfit");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "useUnderProfit", UtilModel.UseUnderProfit));

                    DeleteNode = SubNode.SelectSingleNode("UnderProfitValue");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "UnderProfitValue", UtilModel.UnderProfitValue));
                    /*****************************************************************************************/
                    DeleteNode = SubNode.SelectSingleNode("termSelectNumber");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "termSelectNumber", string.Format("{0},{1},{2},{3},{4},{5}", termSelectNumber1.Text, termSelectNumber2.Text, termSelectNumber3.Text, termSelectNumber4.Text, termSelectNumber5.Text, termSelectNumber6.Text)));

                    DeleteNode = SubNode.SelectSingleNode("termModePick");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "termModePick", string.Format("{0},{1},{2},{3},{4},{5}", termModePick1.Text, termModePick2.Text, termModePick3.Text, termModePick4.Text, termModePick5.Text, termModePick6.Text)));

                    DeleteNode = SubNode.SelectSingleNode("DecalMoney");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(
                        XmlDoc, "DecalMoney",
                        string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22}",
                                UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL1.Text), UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL2.Text), UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL3.Text),
                                UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL4.Text), UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL5.Text), UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL6.Text),
                                UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL7.Text), UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL8.Text), UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL9.Text),
                                UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL10.Text), UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL11.Text), UtilModel.RegexOnlyNumber(MiniGameDecalMoneySettingL12.Text),
                                DecalMagnification2.Text.Trim(), DecalMagnification3.Text.Trim(), DecalMagnification4.Text.Trim(), DecalMagnification5.Text.Trim(), DecalMagnification6.Text.Trim(),
                                DecalMagnification7.Text.Trim(), DecalMagnification8.Text.Trim(), DecalMagnification9.Text.Trim(), DecalMagnification10.Text.Trim(), DecalMagnification11.Text.Trim(), DecalMagnification12.Text.Trim()
                                )
                            )
                        );

                    DeleteNode = SubNode.SelectSingleNode("TermMoney");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "TermMoney", string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22}",
                        UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL1.Text), UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL2.Text), UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL3.Text),
                        UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL4.Text), UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL5.Text), UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL6.Text),
                        UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL7.Text), UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL8.Text), UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL9.Text),
                        UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL10.Text), UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL11.Text), UtilModel.RegexOnlyNumber(MiniGameTermMoneySettingL12.Text),
                        TermMagnification2.Text.Trim(), TermMagnification3.Text.Trim(), TermMagnification4.Text.Trim(), TermMagnification5.Text.Trim(), TermMagnification6.Text.Trim(),
                        TermMagnification7.Text.Trim(), TermMagnification8.Text.Trim(), TermMagnification9.Text.Trim(), TermMagnification10.Text.Trim(), TermMagnification11.Text.Trim(), TermMagnification12.Text.Trim()
                        )));

                    DeleteNode = SubNode.SelectSingleNode("PatternEqualSettingMoney");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "PatternEqualSettingMoney", string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22}",
                        UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel1.Text), UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel2.Text), UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel3.Text),
                        UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel4.Text), UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel5.Text), UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel6.Text),
                        UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel7.Text), UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel8.Text), UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel9.Text),
                        UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel10.Text), UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel11.Text), UtilModel.RegexOnlyNumber(MiniGamePatterEqualMoneyLevel12.Text),
                        PatternEqualMagnification2.Text.Trim(), PatternEqualMagnification3.Text.Trim(), PatternEqualMagnification4.Text.Trim(), PatternEqualMagnification5.Text.Trim(), PatternEqualMagnification6.Text.Trim(),
                        PatternEqualMagnification7.Text.Trim(), PatternEqualMagnification8.Text.Trim(), PatternEqualMagnification9.Text.Trim(), PatternEqualMagnification10.Text.Trim(), PatternEqualMagnification11.Text.Trim(), PatternEqualMagnification12.Text.Trim()
                        )));

                    DeleteNode = SubNode.SelectSingleNode("Cruise_Bet_Money");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "Cruise_Bet_Money", string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10}",
                        UtilModel.RegexOnlyNumber(CruiseBetMoneyLevel1.Text), UtilModel.RegexOnlyNumber(CruiseBetMoneyLevel2.Text), UtilModel.RegexOnlyNumber(CruiseBetMoneyLevel3.Text),
                        UtilModel.RegexOnlyNumber(CruiseBetMoneyLevel4.Text), UtilModel.RegexOnlyNumber(CruiseBetMoneyLevel5.Text), UtilModel.RegexOnlyNumber(CruiseBetMoneyLevel6.Text),
                        cruiseBetMagnification2.Text.Trim(), cruiseBetMagnification3.Text.Trim(), cruiseBetMagnification4.Text.Trim(),
                        cruiseBetMagnification5.Text.Trim(), cruiseBetMagnification6.Text.Trim()
                        )));

                    DeleteNode = SubNode.SelectSingleNode("BoxPattern");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "BoxPattern", string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15}",
                        textBoxPattern1.Text, textBoxPattern2.Text, textBoxPattern3.Text, textBoxPattern4.Text, textBoxPattern5.Text,
                        textBoxPattern6.Text, textBoxPattern7.Text, textBoxPattern8.Text, textBoxPattern9.Text, textBoxPattern10.Text,
                        textBoxPattern11.Text, textBoxPattern12.Text, textBoxPattern13.Text, textBoxPattern14.Text, textBoxPattern15.Text,
                        textBoxPattern16.Text
                        )));

                    DeleteNode = SubNode.SelectSingleNode("BoxPatternAllPick");
                    if (DeleteNode != null)
                    {
                        SubNode.RemoveChild(DeleteNode);
                    }
                    SubNode.AppendChild(CreateNode(XmlDoc, "BoxPatternAllPick", string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15}",
                        textBoxAllPick1.Text, textBoxAllPick2.Text, textBoxAllPick3.Text, textBoxAllPick4.Text, textBoxAllPick5.Text,
                        textBoxAllPick6.Text, textBoxAllPick7.Text, textBoxAllPick8.Text, textBoxAllPick9.Text, textBoxAllPick10.Text,
                        textBoxAllPick11.Text, textBoxAllPick12.Text, textBoxAllPick13.Text, textBoxAllPick14.Text, textBoxAllPick15.Text,
                        textBoxAllPick16.Text
                        )));
                    XmlDoc.Save("propertiesSettings.xml");
                }
            }
            catch (Exception _ex)
            {
                logger.Error(_ex.ToString());
            }
        }

        private void tableLayoutPanel68_DragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            UserPicksterDragDrop(data, UserPickster1);
        }
        private void tableLayoutPanel70_DragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            UserPicksterDragDrop(data, UserPickster2);
        }
        private void tableLayoutPanel71_DragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            UserPicksterDragDrop(data, UserPickster3);
        }
        private void tableLayoutPanel69_DragDrop(object sender, DragEventArgs e)
        {
            if (!e.Data.GetDataPresent(typeof(ListViewItem)))
                return;
            ListViewItem data = e.Data.GetData(typeof(ListViewItem)) as ListViewItem;
            UserPicksterDragDrop(data, UserPickster4);
        }
        private void UserPicksterDragDrop(ListViewItem _data, Button pickster)
        {
            if (_bettingClosed)
            {
                return;
            }
            pickster.Text = _data.Text;
            logger.Info("[" + _data.Text + " ] 를 배팅 목록에 추가");
        }

        private void tableLayoutPanel68_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }
        private void tableLayoutPanel70_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }
        private void tableLayoutPanel71_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }
        private void tableLayoutPanel69_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(typeof(ListViewItem)))
                e.Effect = DragDropEffects.Copy;
            else
                e.Effect = DragDropEffects.None;
        }

        private void UserBetFollowList_ItemDrag(object sender, ItemDragEventArgs e)
        {
            this.DoDragDrop(e.Item, DragDropEffects.Copy);
        }

        private void UserPicksterReady_Click(object sender, EventArgs e)
        {
            Button button = sender as Button;
            if (button.Text.Equals("배팅정지"))
            {
                button.Text = "배팅진행";
                button.ForeColor = Color.Black;
                button.BackColor = Color.White;
            }
            else
            {
                button.Text = "배팅정지";
                button.ForeColor = Color.White;
                button.BackColor = Color.Black;
            }
        }

        private void decalMinimumValue_SelectedIndexChanged(object sender, EventArgs e)
        {
            decalMinimumValueInt = int.Parse(decalMinimumValue.Text);
        }
        private void checkBoxStatusChanged(object sender, TextBox pattern, TextBox Allpick, ComboBox oddbetLevel, ComboBox evenBetLevel, TextBox oddInning, TextBox evenInning)
        {
            CheckBox status = sender as CheckBox;
            if (status.Checked)
            {
                pattern.ReadOnly = true;
                Allpick.ReadOnly = true;

                if (PowerBall_Now_All_Inning % 2 == 1)
                {
                    oddInning.ForeColor = Color.Black;
                    evenInning.ForeColor = Color.DarkGray;
                }
                else
                {
                    oddInning.ForeColor = Color.DarkGray;
                    evenInning.ForeColor = Color.Black;
                }
            }
            else
            {
                pattern.ReadOnly = false;
                Allpick.ReadOnly = false;

                oddInning.ForeColor = Color.DarkGray;
                evenInning.ForeColor = Color.DarkGray;
            }
            oddbetLevel.Text = "0";
            evenBetLevel.Text = "0";
        }
        private void checkBoxStatus1_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern1, textBoxAllPick1, oddInningBetLevel1, evenInningBetLevel1, oddInningText1, evenInningText1);
        }

        private void checkBoxStatus2_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern2, textBoxAllPick2, oddInningBetLevel2, evenInningBetLevel2, oddInningText2, evenInningText2);
        }

        private void checkBoxStatus3_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern3, textBoxAllPick3, oddInningBetLevel3, evenInningBetLevel3, oddInningText3, evenInningText3);
        }

        private void checkBoxStatus4_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern4, textBoxAllPick4, oddInningBetLevel4, evenInningBetLevel4, oddInningText4, evenInningText4);
        }

        private void checkBoxStatus5_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern5, textBoxAllPick5, oddInningBetLevel5, evenInningBetLevel5, oddInningText5, evenInningText5);
        }

        private void checkBoxStatus6_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern6, textBoxAllPick6, oddInningBetLevel6, evenInningBetLevel6, oddInningText6, evenInningText6);
        }

        private void checkBoxStatus7_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern7, textBoxAllPick7, oddInningBetLevel7, evenInningBetLevel7, oddInningText7, evenInningText7);
        }

        private void checkBoxStatus8_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern8, textBoxAllPick8, oddInningBetLevel8, evenInningBetLevel8, oddInningText8, evenInningText8);
        }

        private void checkBoxStatus9_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern9, textBoxAllPick9, oddInningBetLevel9, evenInningBetLevel9, oddInningText9, evenInningText9);
        }

        private void checkBoxStatus10_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern10, textBoxAllPick10, oddInningBetLevel10, evenInningBetLevel10, oddInningText10, evenInningText10);
        }

        private void checkBoxStatus11_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern11, textBoxAllPick11, oddInningBetLevel11, evenInningBetLevel11, oddInningText11, evenInningText11);
        }

        private void checkBoxStatus12_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern12, textBoxAllPick12, oddInningBetLevel12, evenInningBetLevel12, oddInningText12, evenInningText12);
        }

        private void checkBoxStatus13_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern13, textBoxAllPick13, oddInningBetLevel13, evenInningBetLevel13, oddInningText13, evenInningText13);
        }

        private void checkBoxStatus14_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern14, textBoxAllPick14, oddInningBetLevel14, evenInningBetLevel14, oddInningText14, evenInningText14);
        }

        private void checkBoxStatus15_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern15, textBoxAllPick15, oddInningBetLevel15, evenInningBetLevel15, oddInningText15, evenInningText15);
        }

        private void checkBoxStatus16_CheckedChanged(object sender, EventArgs e)
        {
            checkBoxStatusChanged(sender, textBoxPattern16, textBoxAllPick16, oddInningBetLevel16, evenInningBetLevel16, oddInningText16, evenInningText16);
        }
        private void levelIndexChange(object sender, TextBox textBox, TextBox allPick, TextBox pick)
        {
            ComboBox comboBox = sender as ComboBox;
            int num = int.Parse(comboBox.Text);

            if (allPick.Text.Length > num)
            {
                if (num == 0)
                {
                    pick.Text = "통과";
                    pick.ForeColor = Color.DarkGray;
                }
                else
                {
                    string[] allPickSplit = allPick.Text.Split(new char[] { '|' });
                    if (allPickSplit.Length > num)
                    {
                        string sub = allPickSplit[num - 1];
                        if (sub.Equals("홀") || sub.Equals("짝") || sub.Equals("언") || sub.Equals("오"))
                        {
                            pick.Text = sub;
                            pick.ForeColor = Color.Black;
                        }
                        else
                        {
                            pick.Text = "통과";
                            pick.ForeColor = Color.DarkGray;
                        }
                    }
                    else
                    {
                        pick.Text = "통과";
                        pick.ForeColor = Color.DarkGray;
                    }
                }
            }
            else
            {
                pick.Text = "통과";
                pick.ForeColor = Color.DarkGray;
            }
            switch (num)
            {
                case 0:
                    textBox.Text = "0";
                    textBox.ForeColor = Color.DarkGray;
                    break;
                case 1:
                    textBox.Text = MiniGamePatterEqualMoneyLevel1.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 2:
                    textBox.Text = MiniGamePatterEqualMoneyLevel2.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 3:
                    textBox.Text = MiniGamePatterEqualMoneyLevel3.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 4:
                    textBox.Text = MiniGamePatterEqualMoneyLevel4.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 5:
                    textBox.Text = MiniGamePatterEqualMoneyLevel5.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 6:
                    textBox.Text = MiniGamePatterEqualMoneyLevel6.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 7:
                    textBox.Text = MiniGamePatterEqualMoneyLevel7.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 8:
                    textBox.Text = MiniGamePatterEqualMoneyLevel8.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 9:
                    textBox.Text = MiniGamePatterEqualMoneyLevel9.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 10:
                    textBox.Text = MiniGamePatterEqualMoneyLevel10.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 11:
                    textBox.Text = MiniGamePatterEqualMoneyLevel11.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                case 12:
                    textBox.Text = MiniGamePatterEqualMoneyLevel12.Text;
                    textBox.ForeColor = Color.Black;
                    break;
                default:
                    textBox.Text = "0";
                    textBox.ForeColor = Color.DarkGray;
                    pick.Text = "통과";
                    pick.ForeColor = Color.DarkGray;
                    break;
            }
        }

        private void oddInningBetLevel1_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney1, textBoxAllPick1, oddInningPick1);
        }

        private void oddInningBetLevel2_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney2, textBoxAllPick2, oddInningPick2);
        }

        private void oddInningBetLevel3_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney3, textBoxAllPick3, oddInningPick3);
        }

        private void oddInningBetLevel4_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney4, textBoxAllPick4, oddInningPick4);
        }

        private void oddInningBetLevel5_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney5, textBoxAllPick5, oddInningPick5);
        }

        private void oddInningBetLevel6_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney6, textBoxAllPick6, oddInningPick6);
        }

        private void oddInningBetLevel7_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney7, textBoxAllPick7, oddInningPick7);
        }

        private void oddInningBetLevel8_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney8, textBoxAllPick8, oddInningPick8);
        }

        private void oddInningBetLevel9_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney9, textBoxAllPick9, oddInningPick9);
        }

        private void oddInningBetLevel10_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney10, textBoxAllPick10, oddInningPick10);
        }

        private void oddInningBetLevel11_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney11, textBoxAllPick11, oddInningPick11);
        }

        private void oddInningBetLevel12_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney12, textBoxAllPick12, oddInningPick12);
        }

        private void oddInningBetLevel13_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney13, textBoxAllPick13, oddInningPick13);
        }

        private void oddInningBetLevel14_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney14, textBoxAllPick14, oddInningPick14);
        }

        private void oddInningBetLevel15_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney15, textBoxAllPick15, oddInningPick15);
        }

        private void oddInningBetLevel16_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, oddInningBetMoney16, textBoxAllPick16, oddInningPick16);
        }

        private void evenInningBetLevel1_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney1, textBoxAllPick1, evenInningPick1);
        }

        private void evenInningBetLevel2_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney2, textBoxAllPick2, evenInningPick2);
        }

        private void evenInningBetLevel3_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney3, textBoxAllPick3, evenInningPick3);
        }

        private void evenInningBetLevel4_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney4, textBoxAllPick4, evenInningPick4);
        }

        private void evenInningBetLevel5_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney5, textBoxAllPick5, evenInningPick5);
        }

        private void evenInningBetLevel6_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney6, textBoxAllPick6, evenInningPick6);
        }

        private void evenInningBetLevel7_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney7, textBoxAllPick7, evenInningPick7);
        }

        private void evenInningBetLevel8_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney8, textBoxAllPick8, evenInningPick8);
        }

        private void evenInningBetLevel9_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney9, textBoxAllPick9, evenInningPick9);
        }

        private void evenInningBetLevel10_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney10, textBoxAllPick10, evenInningPick10);
        }

        private void evenInningBetLevel11_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney11, textBoxAllPick11, evenInningPick11);
        }

        private void evenInningBetLevel12_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney12, textBoxAllPick12, evenInningPick12);
        }

        private void evenInningBetLevel13_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney13, textBoxAllPick13, evenInningPick13);
        }

        private void evenInningBetLevel14_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney14, textBoxAllPick14, evenInningPick14);
        }

        private void evenInningBetLevel15_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney15, textBoxAllPick15, evenInningPick15);
        }

        private void evenInningBetLevel16_SelectedIndexChanged(object sender, EventArgs e)
        {
            levelIndexChange(sender, evenInningBetMoney16, textBoxAllPick16, evenInningPick16);
        }

        private void knowhowTelegramChatId_Click(object sender, EventArgs e)
        {
            System.Diagnostics.Process.Start("https://ncube.net/telegram%ED%85%94%EB%A0%88%EA%B7%B8%EB%9E%A8-chat-id-%ED%99%95%EC%9D%B8/");
        }

        private void PatternEqualAllUse_Click(object sender, EventArgs e)
        {
            CheckBox chechBoxStatus;

            for (int findContol = 1; findContol <= 16; findContol++)
            {
                chechBoxStatus = (Controls.Find("checkBoxStatus" + findContol.ToString(), true)[0] as CheckBox);
                if (chechBoxStatus != null)
                {
                    chechBoxStatus.Checked = true;
                }
            }
        }

        private void PatternEqualAllUnuse_Click(object sender, EventArgs e)
        {
            CheckBox chechBoxStatus;

            for (int findContol = 1; findContol <= 16; findContol++)
            {
                chechBoxStatus = (Controls.Find("checkBoxStatus" + findContol.ToString(), true)[0] as CheckBox);
                if (chechBoxStatus != null)
                {
                    chechBoxStatus.Checked = false;
                }
            }
        }
        private void PatternEqualInit_Click(object sender, EventArgs e)
        {
            ComboBox oddInningBetLevel;
            ComboBox evenInningBetLevel;
            for (int findContol = 1; findContol <= 16; findContol++)
            {
                oddInningBetLevel = (Controls.Find("oddInningBetLevel" + findContol.ToString(), true)[0] as ComboBox);
                if (oddInningBetLevel != null)
                {
                    oddInningBetLevel.Text = "0";
                }
                evenInningBetLevel = (Controls.Find("evenInningBetLevel" + findContol.ToString(), true)[0] as ComboBox);
                if (evenInningBetLevel != null)
                {
                    evenInningBetLevel.Text = "0";
                }
            }
        }

        private void inputTelegramId_Click(object sender, EventArgs e)
        {
            UtilModel.User_Telegram_Chat_Id = int.Parse(telegramChatIdTextBox.Text);
            txtLogAdd("텔레그램 아이디가 [ " + UtilModel.User_Telegram_Chat_Id + " ] 으로 설정되었습니다.", Color.White);

            string reqString = string.Format("userTelegramChatIdUpdate={0}&editusername={1}&telegramChatId={2}", "OK", UtilModel.UserId, UtilModel.User_Telegram_Chat_Id); // 전송할 Parameter
            string encodeStr = "UTF-8";                                          // 인코딩 방식
            int errorcode = 0;                                                     // 에러 전달받을 값

            String returnMessage = UtilModel.GetHttpPOST(reqString, UtilModel.configFileDownloadUrl + "cherryUserEdit.php", "POST", encodeStr, ref errorcode);
            logger.Info(returnMessage);
        }

        private void DecalMagnificationChanged(object sender, EventArgs e)
        {
            DecalModeCalculationProcessing();
        }

        private void TermMagnificationChanged(object sender, EventArgs e)
        {
            TermModeCalculationProcessing();
        }

        private void PatternEqualMagnificationChanged(object sender, EventArgs e)
        {
            PatternEqualModeCalculationProcessing();
        }

        string[] ArrayCruiseBettingOddEvenValue = new string[] {
            "홀",
            "짝",
            "홀|홀",
            "홀|짝",
            "짝|홀",
            "짝|짝",
            "홀|홀|홀",
            "홀|홀|짝",
            "홀|짝|짝",
            "짝|홀|홀",
            "짝|짝|홀",
            "짝|짝|짝",
            "홀|홀|홀|홀",
            "홀|홀|홀|짝",
            "홀|홀|짝|짝",
            "홀|짝|짝|짝",
            "짝|홀|홀|홀",
            "짝|짝|홀|홀",
            "짝|짝|짝|홀",
            "짝|짝|짝|짝",
            "홀|짝|홀|짝",
            "짝|홀|짝|홀",
            "홀|홀|홀|홀|홀",
            "홀|홀|홀|홀|짝",
            "홀|홀|홀|짝|짝",
            "홀|홀|짝|짝|짝",
            "홀|짝|짝|짝|짝",
            "짝|홀|홀|홀|홀",
            "짝|짝|홀|홀|홀",
            "짝|짝|짝|홀|홀",
            "짝|짝|짝|짝|홀",
            "짝|짝|짝|짝|짝",
            "홀|짝|홀|짝|홀",
            "짝|홀|짝|홀|짝",
            "홀|짝|짝|홀|홀",
            "짝|홀|홀|짝|짝",
            "홀|짝|짝|짝|홀",
            "짝|홀|홀|홀|짝",
            "홀|홀|짝|짝|홀",
            "짝|짝|홀|홀|짝",
            "짝|홀|홀|짝|짝",
            "홀|짝|짝|홀|홀"
        };

        string[] ArrayCruiseBettingUnderOverValue = new string[] {
            "언",
            "오",
            "언|언",
            "언|오",
            "오|언",
            "오|오",
            "언|언|언",
            "언|언|오",
            "언|오|오",
            "오|언|언",
            "오|오|언",
            "오|오|오",
            "언|언|언|언",
            "언|언|언|오",
            "언|언|오|오",
            "언|오|오|오",
            "오|언|언|언",
            "오|오|언|언",
            "오|오|오|언",
            "오|오|오|오",
            "오|언|오|언",
            "언|오|언|오",
            "언|언|언|언|언",
            "언|언|언|언|오",
            "언|언|언|오|오",
            "언|언|오|오|오",
            "언|오|오|오|오",
            "오|언|언|언|언",
            "오|오|언|언|언",
            "오|오|오|언|언",
            "오|오|오|오|언",
            "오|오|오|오|오",
            "오|언|오|언|오",
            "언|오|언|오|언",
            "언|언|오|언|언",
            "오|오|언|오|오",
            "언|오|오|오|언",
            "오|언|언|언|오",
            "오|오|언|언|오",
            "언|언|오|오|언",
            "언|오|오|언|언",
            "오|언|언|오|오"
        };

        int cruiseBettingPowerBallOddEvenSheetNumberOfFirst = 0;
        int cruiseBettingPowerBallUnderOverSheetNumberOfFirst = 0;
        int cruiseBettingNormalBallOddEvenSheetNumberOfFirst = 0;
        int cruiseBettingNormalBallUnderOverSheetNumberOfFirst = 0;

        int cruiseBettingPowerBallOddEvenSheetNumberOfSecond = 0;
        int cruiseBettingPowerBallUnderOverSheetNumberOfSecond = 0;
        int cruiseBettingNormalBallOddEvenSheetNumberOfSecond = 0;
        int cruiseBettingNormalBallUnderOverSheetNumberOfSecond = 0;

        private void cruiseBettingGroupBoxTextChange(CheckBox UseCheckBox, GroupBox groupBox, string typeText, int sheetNumber1, int sheetNumber2)
        {
            if (UseCheckBox.Checked)
            {
                groupBox.Text = typeText + " | 사용 중! | " + sheetNumber1 + " 연승 | " + sheetNumber2 + " 연승 배팅";
            }
            else
            {
                groupBox.Text = typeText + " | 사용 정지 | " + sheetNumber1 + " 연승 | " + sheetNumber2 + " 연승 배팅";
            }
        }
        private void cruiseBettingPowerBallOddEvenComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox combobox = sender as ComboBox;
            int selectIndex = combobox.SelectedIndex;
            cruiseBettingPowerBallOddEvenAllPickTextBox1.Text = ArrayCruiseBettingOddEvenValue[selectIndex];
            cruiseBettingPowerBallOddEvenSheetNumberOfFirst = cruiseBettingPowerBallOddEvenAllPickTextBox1.Text.Split(new char[] { '|' }).Length;
            cruiseBettingGroupBoxTextChange(cruiseBettingPowerBallOddEvenUseCheckBox, cruiseBettingPowerBallOddEvenGroupBox, "파워볼 홀짝", cruiseBettingPowerBallOddEvenSheetNumberOfFirst, cruiseBettingPowerBallOddEvenSheetNumberOfSecond);
            cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "0";
        }
        private void cruiseBettingPowerBallUnderOverComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox combobox = sender as ComboBox;
            int selectIndex = combobox.SelectedIndex;
            cruiseBettingPowerBallUnderOverAllPickTextBox1.Text = ArrayCruiseBettingUnderOverValue[selectIndex];
            cruiseBettingPowerBallUnderOverSheetNumberOfFirst = cruiseBettingPowerBallUnderOverAllPickTextBox1.Text.Split(new char[] { '|' }).Length;
            cruiseBettingGroupBoxTextChange(cruiseBettingPowerBallUnderOverUseCheckBox, cruiseBettingPowerBallUnderOverGroupBox, "파워볼 언오버", cruiseBettingPowerBallUnderOverSheetNumberOfFirst, cruiseBettingPowerBallUnderOverSheetNumberOfSecond);
            cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "0";
        }
        private void cruiseBettingNormalBallOddEvenComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox combobox = sender as ComboBox;
            int selectIndex = combobox.SelectedIndex;
            cruiseBettingNormalBallOddEvenAllPickTextBox1.Text = ArrayCruiseBettingOddEvenValue[selectIndex];
            cruiseBettingNormalBallOddEvenSheetNumberOfFirst = cruiseBettingNormalBallOddEvenAllPickTextBox1.Text.Split(new char[] { '|' }).Length;
            cruiseBettingGroupBoxTextChange(cruiseBettingNormalBallOddEvenUseCheckBox, cruiseBettingNormalBallOddEvenGroupBox, "일반볼 홀짝", cruiseBettingNormalBallOddEvenSheetNumberOfFirst, cruiseBettingNormalBallOddEvenSheetNumberOfSecond);
            cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "0";
        }
        private void cruiseBettingNormalBallUnderOverComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox combobox = sender as ComboBox;
            int selectIndex = combobox.SelectedIndex;
            cruiseBettingNormalBallUnderOverAllPickTextBox1.Text = ArrayCruiseBettingUnderOverValue[selectIndex];
            cruiseBettingNormalBallUnderOverSheetNumberOfFirst = cruiseBettingNormalBallUnderOverAllPickTextBox1.Text.Split(new char[] { '|' }).Length;
            cruiseBettingGroupBoxTextChange(cruiseBettingNormalBallUnderOverUseCheckBox, cruiseBettingNormalBallUnderOverGroupBox, "일반볼 언오버", cruiseBettingNormalBallUnderOverSheetNumberOfFirst, cruiseBettingNormalBallUnderOverSheetNumberOfSecond);
            cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "0";
        }

        private void cruiseBettingPowerBallOddEvenComboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox combobox = sender as ComboBox;
            int selectIndex = combobox.SelectedIndex;
            cruiseBettingPowerBallOddEvenAllPickTextBox2.Text = ArrayCruiseBettingOddEvenValue[selectIndex];
            cruiseBettingPowerBallOddEvenSheetNumberOfSecond = cruiseBettingPowerBallOddEvenAllPickTextBox2.Text.Split(new char[] { '|' }).Length;
            cruiseBettingGroupBoxTextChange(cruiseBettingPowerBallOddEvenUseCheckBox, cruiseBettingPowerBallOddEvenGroupBox, "파워볼 홀짝", cruiseBettingPowerBallOddEvenSheetNumberOfFirst, cruiseBettingPowerBallOddEvenSheetNumberOfSecond);
            cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "0";
        }

        private void cruiseBettingPowerBallUnderOverComboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox combobox = sender as ComboBox;
            int selectIndex = combobox.SelectedIndex;
            cruiseBettingPowerBallUnderOverAllPickTextBox2.Text = ArrayCruiseBettingUnderOverValue[selectIndex];
            cruiseBettingPowerBallUnderOverSheetNumberOfSecond = cruiseBettingPowerBallUnderOverAllPickTextBox2.Text.Split(new char[] { '|' }).Length;
            cruiseBettingGroupBoxTextChange(cruiseBettingPowerBallUnderOverUseCheckBox, cruiseBettingPowerBallUnderOverGroupBox, "파워볼 언오버", cruiseBettingPowerBallUnderOverSheetNumberOfFirst, cruiseBettingPowerBallUnderOverSheetNumberOfSecond);
            cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "0";
        }

        private void cruiseBettingNormalBallOddEvenComboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox combobox = sender as ComboBox;
            int selectIndex = combobox.SelectedIndex;
            cruiseBettingNormalBallOddEvenAllPickTextBox2.Text = ArrayCruiseBettingOddEvenValue[selectIndex];
            cruiseBettingNormalBallOddEvenSheetNumberOfSecond = cruiseBettingNormalBallOddEvenAllPickTextBox2.Text.Split(new char[] { '|' }).Length;
            cruiseBettingGroupBoxTextChange(cruiseBettingNormalBallOddEvenUseCheckBox, cruiseBettingNormalBallOddEvenGroupBox, "일반볼 홀짝", cruiseBettingNormalBallOddEvenSheetNumberOfFirst, cruiseBettingNormalBallOddEvenSheetNumberOfSecond);
            cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "0";
        }

        private void cruiseBettingNormalBallUnderOverComboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            ComboBox combobox = sender as ComboBox;
            int selectIndex = combobox.SelectedIndex;
            cruiseBettingNormalBallUnderOverAllPickTextBox2.Text = ArrayCruiseBettingUnderOverValue[selectIndex];
            cruiseBettingNormalBallUnderOverSheetNumberOfSecond = cruiseBettingNormalBallUnderOverAllPickTextBox2.Text.Split(new char[] { '|' }).Length;
            cruiseBettingGroupBoxTextChange(cruiseBettingNormalBallUnderOverUseCheckBox, cruiseBettingNormalBallUnderOverGroupBox, "일반볼 언오버", cruiseBettingNormalBallUnderOverSheetNumberOfFirst, cruiseBettingNormalBallUnderOverSheetNumberOfSecond);
            cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "0";
        }
        private void cruiseBettingPowerBallOddEvenBetLevelComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] AllPickText = new string[5];
            if (cruiseBettingPowerBallOddEvenFirstOrSecond == 1)
            {
                cruiseBettingPowerBallOddEvenAllPickTextBox1.ForeColor = Color.White;
                cruiseBettingPowerBallOddEvenAllPickTextBox1.BackColor = Color.Black;
                cruiseBettingPowerBallOddEvenAllPickTextBox2.ForeColor = Color.Black;
                cruiseBettingPowerBallOddEvenAllPickTextBox2.BackColor = Color.White;
                AllPickText = cruiseBettingPowerBallOddEvenAllPickTextBox1.Text.Split(new char[] { '|' });
            }
            else if (cruiseBettingPowerBallOddEvenFirstOrSecond == 2)
            {
                cruiseBettingPowerBallOddEvenAllPickTextBox2.ForeColor = Color.White;
                cruiseBettingPowerBallOddEvenAllPickTextBox2.BackColor = Color.Black;
                cruiseBettingPowerBallOddEvenAllPickTextBox1.ForeColor = Color.Black;
                cruiseBettingPowerBallOddEvenAllPickTextBox1.BackColor = Color.White;
                AllPickText = cruiseBettingPowerBallOddEvenAllPickTextBox2.Text.Split(new char[] { '|' });
            }
            int SelectIndex = int.Parse(cruiseBettingPowerBallOddEvenBetLevelComboBox.Text);
            if (SelectIndex >= 1 && AllPickText.Length >= SelectIndex)
            {
                if (!string.IsNullOrEmpty(AllPickText[SelectIndex - 1]))
                {
                    cruiseBettingPowerBallOddEvenSelectPick.Text = AllPickText[SelectIndex - 1];
                    TextBox CruiseBetMoneyLevel = (Controls.Find("CruiseBetMoneyLevel" + SelectIndex.ToString(), true)[0] as TextBox);
                    cruiseBettingPowerBallOddEvenBetMoney.Text = CruiseBetMoneyLevel.Text;
                }
                else
                {
                    cruiseBettingPowerBallOddEvenSelectPick.Text = "통과";
                    cruiseBettingPowerBallOddEvenBetMoney.Text = "0";
                }
            }
            else
            {
                cruiseBettingPowerBallOddEvenSelectPick.Text = "통과";
                cruiseBettingPowerBallOddEvenBetMoney.Text = "0";
            }
        }

        private void cruiseBettingPowerBallUnderOverBetLevelComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] AllPickText = new string[5];
            if (cruiseBettingPowerBallUnderOverFirstOrSecond == 1)
            {
                cruiseBettingPowerBallUnderOverAllPickTextBox1.ForeColor = Color.White;
                cruiseBettingPowerBallUnderOverAllPickTextBox1.BackColor = Color.Black;
                cruiseBettingPowerBallUnderOverAllPickTextBox2.ForeColor = Color.Black;
                cruiseBettingPowerBallUnderOverAllPickTextBox2.BackColor = Color.White;
                AllPickText = cruiseBettingPowerBallUnderOverAllPickTextBox1.Text.Split(new char[] { '|' });
            }
            else if (cruiseBettingPowerBallUnderOverFirstOrSecond == 2)
            {
                cruiseBettingPowerBallUnderOverAllPickTextBox2.ForeColor = Color.White;
                cruiseBettingPowerBallUnderOverAllPickTextBox2.BackColor = Color.Black;
                cruiseBettingPowerBallUnderOverAllPickTextBox1.ForeColor = Color.Black;
                cruiseBettingPowerBallUnderOverAllPickTextBox1.BackColor = Color.White;
                AllPickText = cruiseBettingPowerBallUnderOverAllPickTextBox2.Text.Split(new char[] { '|' });
            }
            int SelectIndex = int.Parse(cruiseBettingPowerBallUnderOverBetLevelComboBox.Text);
            if (SelectIndex >= 1 && AllPickText.Length >= SelectIndex)
            {
                if (!string.IsNullOrEmpty(AllPickText[SelectIndex - 1]))
                {
                    cruiseBettingPowerBallUnderOverSelectPick.Text = AllPickText[SelectIndex - 1];
                    TextBox CruiseBetMoneyLevel = (Controls.Find("CruiseBetMoneyLevel" + SelectIndex.ToString(), true)[0] as TextBox);
                    cruiseBettingPowerBallUnderOverBetMoney.Text = CruiseBetMoneyLevel.Text;
                }
                else
                {
                    cruiseBettingPowerBallUnderOverSelectPick.Text = "통과";
                    cruiseBettingPowerBallUnderOverBetMoney.Text = "0";
                }
            }
            else
            {
                cruiseBettingPowerBallUnderOverSelectPick.Text = "통과";
                cruiseBettingPowerBallUnderOverBetMoney.Text = "0";
            }
        }

        private void cruiseBettingNormalBallOddEvenBetLevelComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] AllPickText = new string[5];
            if (cruiseBettingNormalBallOddEvenFirstOrSecond == 1)
            {
                cruiseBettingNormalBallOddEvenAllPickTextBox1.ForeColor = Color.White;
                cruiseBettingNormalBallOddEvenAllPickTextBox1.BackColor = Color.Black;
                cruiseBettingNormalBallOddEvenAllPickTextBox2.ForeColor = Color.Black;
                cruiseBettingNormalBallOddEvenAllPickTextBox2.BackColor = Color.White;
                AllPickText = cruiseBettingNormalBallOddEvenAllPickTextBox1.Text.Split(new char[] { '|' });
            }
            else if (cruiseBettingNormalBallOddEvenFirstOrSecond == 2)
            {
                cruiseBettingNormalBallOddEvenAllPickTextBox2.ForeColor = Color.White;
                cruiseBettingNormalBallOddEvenAllPickTextBox2.BackColor = Color.Black;
                cruiseBettingNormalBallOddEvenAllPickTextBox1.ForeColor = Color.Black;
                cruiseBettingNormalBallOddEvenAllPickTextBox1.BackColor = Color.White;
                AllPickText = cruiseBettingNormalBallOddEvenAllPickTextBox2.Text.Split(new char[] { '|' });
            }
            int SelectIndex = int.Parse(cruiseBettingNormalBallOddEvenBetLevelComboBox.Text);
            if (SelectIndex >= 1 && AllPickText.Length >= SelectIndex)
            {
                if (!string.IsNullOrEmpty(AllPickText[SelectIndex - 1]))
                {
                    cruiseBettingNormalBallOddEvenSelectPick.Text = AllPickText[SelectIndex - 1];
                    TextBox CruiseBetMoneyLevel = (Controls.Find("CruiseBetMoneyLevel" + SelectIndex.ToString(), true)[0] as TextBox);
                    cruiseBettingNormalBallOddEvenBetMoney.Text = CruiseBetMoneyLevel.Text;
                }
                else
                {
                    cruiseBettingNormalBallOddEvenSelectPick.Text = "통과";
                    cruiseBettingNormalBallOddEvenBetMoney.Text = "0";
                }
            }
            else
            {
                cruiseBettingNormalBallOddEvenSelectPick.Text = "통과";
                cruiseBettingNormalBallOddEvenBetMoney.Text = "0";
            }
        }

        private void cruiseBettingNormalBallUnderOverBetLevelComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            string[] AllPickText = new string[5];
            if (cruiseBettingNormalBallUnderOverFirstOrSecond == 1)
            {
                cruiseBettingNormalBallUnderOverAllPickTextBox1.ForeColor = Color.White;
                cruiseBettingNormalBallUnderOverAllPickTextBox1.BackColor = Color.Black;
                cruiseBettingNormalBallUnderOverAllPickTextBox2.ForeColor = Color.Black;
                cruiseBettingNormalBallUnderOverAllPickTextBox2.BackColor = Color.White;
                AllPickText = cruiseBettingNormalBallUnderOverAllPickTextBox1.Text.Split(new char[] { '|' });
            }
            else if (cruiseBettingNormalBallUnderOverFirstOrSecond == 2)
            {
                cruiseBettingNormalBallUnderOverAllPickTextBox2.ForeColor = Color.White;
                cruiseBettingNormalBallUnderOverAllPickTextBox2.BackColor = Color.Black;
                cruiseBettingNormalBallUnderOverAllPickTextBox1.ForeColor = Color.Black;
                cruiseBettingNormalBallUnderOverAllPickTextBox1.BackColor = Color.White;
                AllPickText = cruiseBettingNormalBallUnderOverAllPickTextBox2.Text.Split(new char[] { '|' });
            }
            int SelectIndex = int.Parse(cruiseBettingNormalBallUnderOverBetLevelComboBox.Text);
            if (SelectIndex >= 1 && AllPickText.Length >= SelectIndex)
            {
                if (!string.IsNullOrEmpty(AllPickText[SelectIndex - 1]))
                {
                    cruiseBettingNormalBallUnderOverSelectPick.Text = AllPickText[SelectIndex - 1];
                    TextBox CruiseBetMoneyLevel = (Controls.Find("CruiseBetMoneyLevel" + SelectIndex.ToString(), true)[0] as TextBox);
                    cruiseBettingNormalBallUnderOverBetMoney.Text = CruiseBetMoneyLevel.Text;
                }
                else
                {
                    cruiseBettingNormalBallUnderOverSelectPick.Text = "통과";
                    cruiseBettingNormalBallUnderOverBetMoney.Text = "0";
                }
            }
            else
            {
                cruiseBettingNormalBallUnderOverSelectPick.Text = "통과";
                cruiseBettingNormalBallUnderOverBetMoney.Text = "0";
            }
        }

        private void cruiseBettingPowerBallOddEvenUseCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            cruiseBettingPowerBallOddEvenFirstOrSecond = 1;
            cruiseBettingPowerBallOddEvenAllPickTextBox1.ForeColor = Color.White;
            cruiseBettingPowerBallOddEvenAllPickTextBox1.BackColor = Color.Black;
            cruiseBettingPowerBallOddEvenAllPickTextBox2.ForeColor = Color.Black;
            cruiseBettingPowerBallOddEvenAllPickTextBox2.BackColor = Color.White;

            CheckBox useCheckBox = sender as CheckBox;
            cruiseBettingGroupBoxTextChange(useCheckBox, cruiseBettingPowerBallOddEvenGroupBox, "파워볼 홀짝", cruiseBettingPowerBallOddEvenSheetNumberOfFirst, cruiseBettingPowerBallOddEvenSheetNumberOfSecond);
            cruiseBettingPowerBallOddEvenBetLevelComboBox.Text = "0";
        }

        private void cruiseBettingPowerBallUnderOverUseCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            cruiseBettingPowerBallUnderOverFirstOrSecond = 1;
            cruiseBettingPowerBallUnderOverAllPickTextBox1.ForeColor = Color.White;
            cruiseBettingPowerBallUnderOverAllPickTextBox1.BackColor = Color.Black;
            cruiseBettingPowerBallUnderOverAllPickTextBox2.ForeColor = Color.Black;
            cruiseBettingPowerBallUnderOverAllPickTextBox2.BackColor = Color.White;

            CheckBox useCheckBox = sender as CheckBox;
            cruiseBettingGroupBoxTextChange(useCheckBox, cruiseBettingPowerBallUnderOverGroupBox, "파워볼 언오버", cruiseBettingPowerBallUnderOverSheetNumberOfFirst, cruiseBettingPowerBallUnderOverSheetNumberOfSecond);
            cruiseBettingPowerBallUnderOverBetLevelComboBox.Text = "0";
        }

        private void cruiseBettingNormalBallOddEvenUseCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            cruiseBettingNormalBallOddEvenFirstOrSecond = 1;
            cruiseBettingNormalBallOddEvenAllPickTextBox1.ForeColor = Color.White;
            cruiseBettingNormalBallOddEvenAllPickTextBox1.BackColor = Color.Black;
            cruiseBettingNormalBallOddEvenAllPickTextBox2.ForeColor = Color.Black;
            cruiseBettingNormalBallOddEvenAllPickTextBox2.BackColor = Color.White;

            CheckBox useCheckBox = sender as CheckBox;
            cruiseBettingGroupBoxTextChange(useCheckBox, cruiseBettingNormalBallOddEvenGroupBox, "일반볼 홀짝", cruiseBettingNormalBallOddEvenSheetNumberOfFirst, cruiseBettingNormalBallOddEvenSheetNumberOfSecond);
            cruiseBettingNormalBallOddEvenBetLevelComboBox.Text = "0";
        }

        private void cruiseBettingNormalBallUnderOverUseCheckBox_CheckedChanged(object sender, EventArgs e)
        {
            cruiseBettingNormalBallUnderOverFirstOrSecond = 1;
            cruiseBettingNormalBallUnderOverAllPickTextBox1.ForeColor = Color.White;
            cruiseBettingNormalBallUnderOverAllPickTextBox1.BackColor = Color.Black;
            cruiseBettingNormalBallUnderOverAllPickTextBox2.ForeColor = Color.Black;
            cruiseBettingNormalBallUnderOverAllPickTextBox2.BackColor = Color.White;

            CheckBox useCheckBox = sender as CheckBox;
            cruiseBettingGroupBoxTextChange(useCheckBox, cruiseBettingNormalBallUnderOverGroupBox, "일반볼 언오버", cruiseBettingNormalBallUnderOverSheetNumberOfFirst, cruiseBettingNormalBallUnderOverSheetNumberOfSecond);
            cruiseBettingNormalBallUnderOverBetLevelComboBox.Text = "0";
        }

        private void cruiseBetMagnification2_SelectedIndexChanged(object sender, EventArgs e)
        {
            Cruise_Bet_lMode_Calculation_Processing();
        }

        private void btnBettingStart_Click(object sender, EventArgs e)
        {
            if (GameIsStartStattus)
            {
                return;
            }
            if (CheckVersion())
            {
                txtLogAdd("프로그램이 업데이트 되었습니다. 종료 후 재실행 부탁드립니다.", Color.White);
                MessageBox.Show("프로그램이 업데이트 되었습니다. 종료 후 재실행 부탁드립니다.");
            }

            if (!UtilModel.AuthSite.Contains(UtilModel.UserSiteUrlAddress.ToLower()))
            {
                MessageBox.Show("인증되지 않은 사이트로 접속하였습니다. 사용에 제한이 걸립니다.", "알림", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
            btnBettingStart.Text = "- 진행 중 -";
            btnBettingStart.BackColor = Color.Black;
            btnBettingStart.ForeColor = Color.White;
            start();
        }

        TextBox pattern_Equal_Mode_Pick;

        private void textBoxAllPick_Click(object sender, EventArgs e)
        {
            pattern_Equal_Mode_Pick = sender as TextBox;
            Pattern_Equal_Mode_Pick_Change_Panel.Visible = true;
            Pattern_Equal_Mode_Pick_Change_TextBox.Text = pattern_Equal_Mode_Pick.Text;
            Pattern_Equal_Mode_Pick_Change_ComboBox1.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[0];
            Pattern_Equal_Mode_Pick_Change_ComboBox2.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[1];
            Pattern_Equal_Mode_Pick_Change_ComboBox3.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[2];
            Pattern_Equal_Mode_Pick_Change_ComboBox4.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[3];
            Pattern_Equal_Mode_Pick_Change_ComboBox5.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[4];
            Pattern_Equal_Mode_Pick_Change_ComboBox6.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[5];
            Pattern_Equal_Mode_Pick_Change_ComboBox7.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[6];
            Pattern_Equal_Mode_Pick_Change_ComboBox8.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[7];
            Pattern_Equal_Mode_Pick_Change_ComboBox9.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[8];
            Pattern_Equal_Mode_Pick_Change_ComboBox10.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[9];
            Pattern_Equal_Mode_Pick_Change_ComboBox11.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[10];
            Pattern_Equal_Mode_Pick_Change_ComboBox12.Text = pattern_Equal_Mode_Pick.Text.Split(new char[] { '|' })[11];
        }
        private void Pattern_Equal_Mode_Pick_Change_Complete_Button_Click(object sender, EventArgs e)
        {
            Pattern_Equal_Mode_Pick_Change_Panel.Visible = false;
            pattern_Equal_Mode_Pick.Text = Pattern_Equal_Mode_Pick_Change_TextBox.Text;
        }
        private void Pattern_Equal_Mode_Pick_Change_ComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox1.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox2.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox3.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox4.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox5.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox6.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox7.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox8.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox9.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox10.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox11.Text);
            stringBuilder.AppendFormat("{0}|", Pattern_Equal_Mode_Pick_Change_ComboBox12.Text);
            Pattern_Equal_Mode_Pick_Change_TextBox.Text = stringBuilder.ToString();
        }

        int[] hongkongCruiseAllBetMoney = new int[70];
        private void hongkongCruiseBetCalculationButton_Click(object sender, EventArgs e)
        {
            hongkongCruiseBetCalculation();
        }

        private void hongkongCruiseBetCalculation()
        {
            honekongCruiseBetListView.Items.Clear();
            int.TryParse(Regex.Replace(hongkongCruiseBetStartBetMoneyTextBox.Text, @"\D", ""), out int outValue);
            //honekongCruiseBetListView
            ListViewItem honekongCruiseBetListViewItem;
            int ValueSum = 0;
            int FirstValueAllSum = outValue;
            int hongkongCruiseAllBetMoneyPlus = 0;
            int maxComboBoxLevel = 35;
            int comboBoxLevel = int.Parse(hongkongCruiseBetStartBetMoneyComboBox.Text);

            for (int numberI = 1; numberI <= maxComboBoxLevel; numberI++)
            {
                if (numberI <= comboBoxLevel)
                {
                    if (ValueSum < 30000000)
                    {
                        honekongCruiseBetListViewItem = new ListViewItem(numberI.ToString());

                        ValueSum += FirstValueAllSum;

                        honekongCruiseBetListViewItem.SubItems.Add(UtilModel.StringFormatChanged(FirstValueAllSum)); // 1차 배팅금

                        honekongCruiseBetListViewItem.SubItems.Add(UtilModel.StringFormatChanged((FirstValueAllSum * 2))); // 2차 배팅금
                        hongkongCruiseAllBetMoney[hongkongCruiseAllBetMoneyPlus++] = FirstValueAllSum;
                        hongkongCruiseAllBetMoney[hongkongCruiseAllBetMoneyPlus++] = FirstValueAllSum * 2;

                        honekongCruiseBetListViewItem.SubItems.Add(UtilModel.StringFormatChanged((int)((FirstValueAllSum * 2 * 1.95) - ValueSum))); // 당첨 이익금

                        honekongCruiseBetListViewItem.SubItems.Add(UtilModel.StringFormatChanged(ValueSum)); // 총 배팅금

                        FirstValueAllSum = (int)(FirstValueAllSum * 1.35);
                        honekongCruiseBetListView.Items.Add(honekongCruiseBetListViewItem);
                    }
                    else
                    {
                        honekongCruiseBetListViewItem = new ListViewItem(numberI.ToString());
                        honekongCruiseBetListViewItem.SubItems.Add("0"); // 1차 배팅금
                        honekongCruiseBetListViewItem.SubItems.Add("0"); // 2차 배팅금
                        hongkongCruiseAllBetMoney[hongkongCruiseAllBetMoneyPlus++] = 0;
                        hongkongCruiseAllBetMoney[hongkongCruiseAllBetMoneyPlus++] = 0;
                        honekongCruiseBetListViewItem.SubItems.Add("0"); // 당첨 이익금
                        honekongCruiseBetListViewItem.SubItems.Add("0"); // 총 배팅금
                        honekongCruiseBetListView.Items.Add(honekongCruiseBetListViewItem);
                    }
                }
                else
                {
                    honekongCruiseBetListViewItem = new ListViewItem(numberI.ToString());
                    honekongCruiseBetListViewItem.SubItems.Add("0"); // 1차 배팅금
                    honekongCruiseBetListViewItem.SubItems.Add("0"); // 2차 배팅금
                    hongkongCruiseAllBetMoney[hongkongCruiseAllBetMoneyPlus++] = 0;
                    hongkongCruiseAllBetMoney[hongkongCruiseAllBetMoneyPlus++] = 0;
                    honekongCruiseBetListViewItem.SubItems.Add("0"); // 당첨 이익금
                    honekongCruiseBetListViewItem.SubItems.Add("0"); // 총 배팅금
                    honekongCruiseBetListView.Items.Add(honekongCruiseBetListViewItem);
                }
            }
        }

        private void hongkongCruiseBetInit()
        {
            ComboBox hongKongCruiseAllRandomBetComboBox;
            ComboBox hongkongCruiseBetSelectPickTypeComboBox1;
            ComboBox hongkongCruiseBetSelectPickTypeComboBox2;
            ComboBox hongkongCruiseBetSelectPickTypeComboBox3;
            for (int findControl = 1; findControl <= 10; findControl++)
            {
                hongKongCruiseAllRandomBetComboBox = (Controls.Find("hongKongCruiseAllRandomBetComboBox" + findControl.ToString(), true)[0] as ComboBox);
                hongKongCruiseAllRandomBetComboBox.Text = hongkongCruiseComboBoxString[70];

                hongkongCruiseBetSelectPickTypeComboBox1 = (Controls.Find("hongkongCruiseBetSelectPickTypeComboBox" + findControl + "_1".ToString(), true)[0] as ComboBox);
                hongkongCruiseBetSelectPickTypeComboBox1.Text = "파홀";
                hongkongCruiseBetSelectPickTypeComboBox2 = (Controls.Find("hongkongCruiseBetSelectPickTypeComboBox" + findControl + "_2".ToString(), true)[0] as ComboBox);
                hongkongCruiseBetSelectPickTypeComboBox2.Text = "파홀|파짝";
                hongkongCruiseBetSelectPickTypeComboBox3 = (Controls.Find("hongkongCruiseBetSelectPickTypeComboBox" + findControl + "_3".ToString(), true)[0] as ComboBox);
                hongkongCruiseBetSelectPickTypeComboBox3.Text = "전체 무작위";
            }
        }
        string[] hongkongCruiseComboBoxString = new string[71] {
            "0|  1-1",
            "1|  1-2",
            "2|  2-1",
            "3|  2-2",
            "4|  3-1",
            "5|  3-2",
            "6|  4-1",
            "7|  4-2",
            "8|  5-1",
            "9|  5-2",
            "10|  6-1",
            "11|  6-2",
            "12|  7-1",
            "13|  7-2",
            "14|  8-1",
            "15|  8-2",
            "16|  9-1",
            "17|  9-2",
            "18|  10-1",
            "19|  10-2",
            "20|  11-1",
            "21|  11-2",
            "22|  12-1",
            "23|  12-2",
            "24|  13-1",
            "25|  13-2",
            "26|  14-1",
            "27|  14-2",
            "28|  15-1",
            "29|  15-2",
            "30|  16-1",
            "31|  16-2",
            "32|  17-1",
            "33|  17-2",
            "34|  18-1",
            "35|  18-2",
            "36|  19-1",
            "37|  19-2",
            "38|  20-1",
            "39|  20-2",
            "40|  21-1",
            "41|  21-2",
            "42|  22-1",
            "43|  22-2",
            "44|  23-1",
            "45|  23-2",
            "46|  24-1",
            "47|  24-2",
            "48|  25-1",
            "49|  25-2",
            "50|  26-1",
            "51|  26-2",
            "52|  27-1",
            "53|  27-2",
            "54|  28-1",
            "55|  28-2",
            "56|  29-1",
            "57|  29-2",
            "58|  30-1",
            "59|  30-2",
            "60|  31-1",
            "61|  31-2",
            "62|  32-1",
            "63|  32-2",
            "64|  33-1",
            "65|  33-2",
            "66|  34-1",
            "67|  34-2",
            "68|  35-1",
            "69|  35-2",
            "70|  0-0"
        };
        string[] hongkongCruiseRandomPick = new string[5] {
            "파홀|파짝|",
            "파언|파오|",
            "일홀|일짝|",
            "일언|일오|",
            "파홀|파짝|파언|파오|일홀|일짝|일언|일오|"
        };
        readonly int hongkongCruise_Max_Number = 69;

        private string hongkongCruiseAllRandomPick(int type)
        {
            string[] randomPickSplit = hongkongCruiseRandomPick[type].Split(new char[] { '|' });
            int randomNum = selectRandom.Next(0, randomPickSplit.Length - 1);
            return randomPickSplit[randomNum];
        }

        private void hongKongCruiseAllRandomBetComboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox1.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox1.Text = "통과";
                hongKongCruiseBetPickTextBox1.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox1.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox1.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton1_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox1_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton1_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox1.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox1_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton1_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox1_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox1.Text = SelectPick;
                    hongKongCruiseBetPickTextBox1.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox1.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox1.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox1.Text = "통과";
                    hongKongCruiseBetPickTextBox1.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox1.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox1.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseAllRandomBetComboBox2_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox2.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox2.Text = "통과";
                hongKongCruiseBetPickTextBox2.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox2.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox2.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton2_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox2_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton2_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox2.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox2_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton2_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox2_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox2.Text = SelectPick;
                    hongKongCruiseBetPickTextBox2.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox2.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox2.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox2.Text = "통과";
                    hongKongCruiseBetPickTextBox2.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox2.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox2.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseAllRandomBetComboBox3_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox3.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox3.Text = "통과";
                hongKongCruiseBetPickTextBox3.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox3.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox3.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton3_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox3_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton3_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox3.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox3_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton3_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox3_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox3.Text = SelectPick;
                    hongKongCruiseBetPickTextBox3.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox3.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox3.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox3.Text = "통과";
                    hongKongCruiseBetPickTextBox3.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox3.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox3.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseAllRandomBetComboBox4_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox4.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox4.Text = "통과";
                hongKongCruiseBetPickTextBox4.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox4.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox4.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton4_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox4_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton4_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox4.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox4_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton4_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox4_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox4.Text = SelectPick;
                    hongKongCruiseBetPickTextBox4.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox4.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox4.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox4.Text = "통과";
                    hongKongCruiseBetPickTextBox4.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox4.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox4.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseAllRandomBetComboBox5_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox5.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox5.Text = "통과";
                hongKongCruiseBetPickTextBox5.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox5.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox5.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton5_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox5_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton5_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox5.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox5_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton5_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox5_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox5.Text = SelectPick;
                    hongKongCruiseBetPickTextBox5.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox5.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox5.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox5.Text = "통과";
                    hongKongCruiseBetPickTextBox5.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox5.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox5.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseAllRandomBetComboBox6_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox6.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox6.Text = "통과";
                hongKongCruiseBetPickTextBox6.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox6.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox6.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton6_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox6_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton6_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox6.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox6_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton6_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox6_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox6.Text = SelectPick;
                    hongKongCruiseBetPickTextBox6.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox6.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox6.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox6.Text = "통과";
                    hongKongCruiseBetPickTextBox6.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox6.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox6.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseAllRandomBetComboBox7_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox7.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox7.Text = "통과";
                hongKongCruiseBetPickTextBox7.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox7.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox7.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton7_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox7_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton7_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox7.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox7_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton7_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox7_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox7.Text = SelectPick;
                    hongKongCruiseBetPickTextBox7.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox7.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox7.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox7.Text = "통과";
                    hongKongCruiseBetPickTextBox7.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox7.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox7.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseAllRandomBetComboBox8_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox8.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox8.Text = "통과";
                hongKongCruiseBetPickTextBox8.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox8.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox8.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton8_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox8_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton8_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox8.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox8_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton8_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox8_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox8.Text = SelectPick;
                    hongKongCruiseBetPickTextBox8.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox8.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox8.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox8.Text = "통과";
                    hongKongCruiseBetPickTextBox8.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox8.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox8.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseAllRandomBetComboBox9_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox9.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox9.Text = "통과";
                hongKongCruiseBetPickTextBox9.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox9.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox9.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton9_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox9_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton9_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox9.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox9_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton9_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox9_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox9.Text = SelectPick;
                    hongKongCruiseBetPickTextBox9.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox9.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox9.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox9.Text = "통과";
                    hongKongCruiseBetPickTextBox9.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox9.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox9.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseAllRandomBetComboBox10_SelectedIndexChanged(object sender, EventArgs e)
        {
            int.TryParse(hongKongCruiseAllRandomBetComboBox10.Text.Split(new char[] { '|' })[0], out int outValue);
            if (outValue > hongkongCruise_Max_Number)
            {
                hongKongCruiseBetPickTextBox10.Text = "통과";
                hongKongCruiseBetPickTextBox10.ForeColor = Color.DarkGray;
                hongKongCruiseBetPickTextBox10.BackColor = Color.WhiteSmoke;
                hongKongCruiseBetMoneyTextBox10.Text = "0";
            }
            else
            {
                string SelectPick = string.Empty;
                if (hongkongCruiseBetSelectPickTypeRadioButton10_1.Checked)
                {
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox10_1.Text;
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton10_2.Checked)
                {
                    int hongKongCruiseAllRandomBetComboBoxLevel = int.Parse(hongKongCruiseAllRandomBetComboBox10.Text.Split(new char[] { '-' })[1]);
                    SelectPick = hongkongCruiseBetSelectPickTypeComboBox10_2.Text.Split(new char[] { '|' })[hongKongCruiseAllRandomBetComboBoxLevel - 1];
                }
                else if (hongkongCruiseBetSelectPickTypeRadioButton10_3.Checked)
                {
                    string pickTypeString = hongkongCruiseBetSelectPickTypeComboBox10_3.Text;
                    if (pickTypeString.Contains("파홀"))
                    {
                        SelectPick = hongkongCruiseAllRandomPick(0);
                    }
                    else if (pickTypeString.Contains("파언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(1);
                    }
                    else if (pickTypeString.Contains("일홀"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(2);
                    }
                    else if (pickTypeString.Contains("일언"))
                    {

                        SelectPick = hongkongCruiseAllRandomPick(3);
                    }
                    else
                    {
                        SelectPick = hongkongCruiseAllRandomPick(4);
                    }
                }

                if (SelectPick.Contains("파") || SelectPick.Contains("일"))
                {
                    hongKongCruiseBetPickTextBox10.Text = SelectPick;
                    hongKongCruiseBetPickTextBox10.ForeColor = Color.White;
                    if (SelectPick.Contains("언") || SelectPick.Contains("홀"))
                    {
                        hongKongCruiseBetPickTextBox10.BackColor = Color.FromArgb(30, 136, 229);
                    }
                    else if (SelectPick.Contains("오") || SelectPick.Contains("짝"))
                    {
                        hongKongCruiseBetPickTextBox10.BackColor = Color.FromArgb(230, 74, 25);
                    }
                }
                else
                {
                    hongKongCruiseBetPickTextBox10.Text = "통과";
                    hongKongCruiseBetPickTextBox10.ForeColor = Color.DarkGray;
                    hongKongCruiseBetPickTextBox10.BackColor = Color.WhiteSmoke;
                }
                hongKongCruiseBetMoneyTextBox10.Text = UtilModel.StringFormatChanged(hongkongCruiseAllBetMoney[outValue]);
            }
        }

        private void hongKongCruiseBetUseCheckBox1_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox1.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        private void hongKongCruiseBetUseCheckBox2_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox2.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        private void hongKongCruiseBetUseCheckBox3_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox3.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        private void hongKongCruiseBetUseCheckBox4_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox4.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        private void hongKongCruiseBetUseCheckBox5_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox5.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        private void hongKongCruiseBetUseCheckBox6_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox6.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        private void hongKongCruiseBetUseCheckBox7_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox7.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        private void hongKongCruiseBetUseCheckBox8_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox8.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        private void hongKongCruiseBetUseCheckBox9_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox9.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        private void hongKongCruiseBetUseCheckBox10_CheckedChanged(object sender, EventArgs e)
        {
            hongKongCruiseAllRandomBetComboBox10.Text = hongkongCruiseComboBoxString[hongkongCruise_Max_Number + 1];
        }

        readonly string[] pattern_Bet_Pick_String = new string[] {
            "파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀|파홀",
            "파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝|파짝",
            "파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언|파언",
            "파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오|파오",
            "일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀|일홀",
            "일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝|일짝",
            "일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언|일언",
            "일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오|일오",
            "파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝",
            "파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀|파짝|파홀",
            "파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오",
            "파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언|파오|파언",
            "일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝",
            "일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀|일짝|일홀",
            "일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오",
            "일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언|일오|일언",
        };

        double[,] EosCruiseAllBetMoney = new double[100, 3];
        private void EosCruiseBetMoneySettingBtn_Click(object sender, EventArgs e)
        {
            EosCruiseBetListView.Items.Clear();
            ListViewItem EosCruiseBetListViewSubItem;
            double ValueSum = 0;
            // int.TryParse(Regex.Replace(hongkongCruiseBetStartBetMoneyTextBox.Text, @"\D", ""), out int outValue);
            string[] sarray = EosCruiseBetMoneySettingTextBox.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries);
            for (int numberI = 1; numberI <= EosCruiseBetMoneySettingTextBox.Lines.Length; numberI++)
            {
                if (ValueSum < 100000000)
                {
                    int.TryParse(Regex.Replace(sarray[numberI - 1], @"\D", ""), out int outValue);
                    outValue = (int)(outValue * int.Parse(Regex.Replace(EosCruiseBetMoneyPercentSettingComboBox.Text, @"\D", "")) * 0.01);
                    ValueSum += outValue;
                    EosCruiseBetListViewSubItem = new ListViewItem(numberI.ToString());
                    EosCruiseBetListViewSubItem.SubItems.Add(UtilModel.StringFormatChanged(outValue)); // 1차 배팅금
                    EosCruiseBetListViewSubItem.SubItems.Add(UtilModel.StringFormatChanged((int)(outValue * 1.95))); // 2차 배팅금
                    EosCruiseBetListViewSubItem.SubItems.Add(UtilModel.StringFormatChanged((int)(outValue * 1.95 * 1.95))); // 3차 배팅금
                    EosCruiseBetListViewSubItem.SubItems.Add(UtilModel.StringFormatChanged((int)ValueSum)); // 총 배팅금
                    EosCruiseBetListViewSubItem.SubItems.Add(UtilModel.StringFormatChanged((int)((outValue * 1.95 * 1.95 * 1.95) - ValueSum))); // 당첨 이익금
                    EosCruiseBetListView.Items.Add(EosCruiseBetListViewSubItem);

                    EosCruiseAllBetMoney[numberI, 0] = outValue;
                    EosCruiseAllBetMoney[numberI, 1] = outValue * 1.95;
                    EosCruiseAllBetMoney[numberI, 2] = outValue * 1.95 * 1.95;
                }
                else
                {
                    break;
                }
            }
        }

        private void EosCruisePowerBallOddEvenLevelChange_SelectedIndexChanged(object sender, EventArgs e)
        {
            EosCruisePowerBallOddEvenBetMoneyLevel1.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruisePowerBallOddEvenLevelChange.Text), 0]);
            EosCruisePowerBallOddEvenBetMoneyLevel2.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruisePowerBallOddEvenLevelChange.Text), 1]);
            EosCruisePowerBallOddEvenBetMoneyLevel3.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruisePowerBallOddEvenLevelChange.Text), 2]);
        }

        private void EosCruisePowerBallUnderOverLevelChange_SelectedIndexChanged(object sender, EventArgs e)
        {
            EosCruisePowerBallUnderOverBetMoneyLevel1.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruisePowerBallUnderOverLevelChange.Text), 0]);
            EosCruisePowerBallUnderOverBetMoneyLevel2.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruisePowerBallUnderOverLevelChange.Text), 1]);
            EosCruisePowerBallUnderOverBetMoneyLevel3.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruisePowerBallUnderOverLevelChange.Text), 2]);
        }

        private void EosCruiseNormalBallOddEvenLevelChange_SelectedIndexChanged(object sender, EventArgs e)
        {
            EosCruiseNormalBallOddEvenBetMoneyLevel1.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruiseNormalBallOddEvenLevelChange.Text), 0]);
            EosCruiseNormalBallOddEvenBetMoneyLevel2.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruiseNormalBallOddEvenLevelChange.Text), 1]);
            EosCruiseNormalBallOddEvenBetMoneyLevel3.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruiseNormalBallOddEvenLevelChange.Text), 2]);
        }

        private void EosCruiseNormalBallUnderOverLevelChange_SelectedIndexChanged(object sender, EventArgs e)
        {
            EosCruiseNormalBallUnderOverBetMoneyLevel1.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruiseNormalBallUnderOverLevelChange.Text), 0]);
            EosCruiseNormalBallUnderOverBetMoneyLevel2.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruiseNormalBallUnderOverLevelChange.Text), 1]);
            EosCruiseNormalBallUnderOverBetMoneyLevel3.Text = UtilModel.StringFormatChanged((int)EosCruiseAllBetMoney[int.Parse(EosCruiseNormalBallUnderOverLevelChange.Text), 2]);
        }

        private void EosPowerBallOddEvenUseCheck_CheckedChanged(object sender, EventArgs e)
        {
            if (EosPowerBallOddEvenUseCheck.Checked)
            {
                EosCruisePowerBallOddEvenLevelChange.Text = "1";
            } else
            {
                EosCruisePowerBallOddEvenLevelChange.Text = "0";
            }

            for (int i = 8; i >= 1; i--)
            {
                Button Result = (Controls.Find("PowerBallOddEvenResult" + i.ToString(), true)[0] as Button);
                Result.Text = "통";
            }
            CruiseBetPowerBallOddEvenSubLevel = 1;
            EosCruisePowerBallOddEvenBetPickLevel1.Text = "통과";
            EosCruisePowerBallOddEvenBetPickLevel2.Text = "통과";
            EosCruisePowerBallOddEvenBetPickLevel3.Text = "통과";
        }

        private void EosPowerBallUnderOverUseCheck_CheckedChanged(object sender, EventArgs e)
        {
            if (EosPowerBallUnderOverUseCheck.Checked)
            {
                EosCruisePowerBallUnderOverLevelChange.Text = "1";
            }
            else
            {
                EosCruisePowerBallUnderOverLevelChange.Text = "0";
            }
            for (int i = 8; i >= 1; i--)
            {
                Button Result = (Controls.Find("PowerBallUnderOverResult" + i.ToString(), true)[0] as Button);
                Result.Text = "통";
            }
            CruiseBetPowerBallUnderOverSubLevel = 1;
            EosCruisePowerBallUnderOverBetPickLevel1.Text = "통과";
            EosCruisePowerBallUnderOverBetPickLevel2.Text = "통과";
            EosCruisePowerBallUnderOverBetPickLevel3.Text = "통과";

        }

        private void EosNormalBallOddEvenUseCheck_CheckedChanged(object sender, EventArgs e)
        {
            if (EosNormalBallOddEvenUseCheck.Checked)
            {
                EosCruiseNormalBallOddEvenLevelChange.Text = "1";
            }
            else
            {
                EosCruiseNormalBallOddEvenLevelChange.Text = "0";
            }
            for (int i = 8; i >= 1; i--)
            {
                Button Result = (Controls.Find("NormalBallOddEvenResult" + i.ToString(), true)[0] as Button);
                Result.Text = "통";
            }
            CruiseBetNormalBallOddEvenSubLevel = 1;
            EosCruiseNormalBallOddEvenBetPickLevel1.Text = "통과";
            EosCruiseNormalBallOddEvenBetPickLevel2.Text = "통과";
            EosCruiseNormalBallOddEvenBetPickLevel3.Text = "통과";
        }

        private void EossNormalBallUnderOverUseCheck_CheckedChanged(object sender, EventArgs e)
        {
            if (EossNormalBallUnderOverUseCheck.Checked)
            {
                EosCruiseNormalBallUnderOverLevelChange.Text = "1";
            }
            else
            {
                EosCruiseNormalBallUnderOverLevelChange.Text = "0";
            }
            for (int i = 8; i >= 1; i--)
            {
                Button Result = (Controls.Find("NormalBallUnderOverResult" + i.ToString(), true)[0] as Button);
                Result.Text = "통";
            }
            CruiseBetNormalBallUnderOverSubLevel = 1;
            
            EosCruiseNormalBallUnderOverBetPickLevel1.Text = "통과";
            EosCruiseNormalBallUnderOverBetPickLevel2.Text = "통과";
            EosCruiseNormalBallUnderOverBetPickLevel3.Text = "통과";
        }

        private void checkEOSCruisePowerBallOddEvenCheck()
        {
            if (!EosPowerBallOddEvenUseCheck.Checked)
            {
                return;
            }
            ComboBox BetListLevel = Controls.Find("EosCruisePowerBallOddEvenBetListLevel" + CruiseBetPowerBallOddEvenSubLevel.ToString(), true)[0] as ComboBox;
            TextBox BetPickLevel = Controls.Find("EosCruisePowerBallOddEvenBetPickLevel" + CruiseBetPowerBallOddEvenSubLevel.ToString(), true)[0] as TextBox;
            string[] stringSplit = BetListLevel.Text.Split(new char[] { '|' });

            for (int i = 0; i < stringSplit.Length; i++)
            {
                string[] s = stringSplit[i].Split(new char[] { '-' });
                if (s[0].Length == 1)
                {
                    string s1 = PowerBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];

                    if (s[0].Equals(s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    } else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 2)
                {
                    string s1 = PowerBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 3)
                {
                    string s1 = PowerBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 4)
                {
                    string s1 = PowerBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 5)
                {
                    string s1 = PowerBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = PowerBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 6)
                {
                    string s1 = PowerBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = PowerBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = PowerBallOddEvenResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 7)
                {
                    string s1 = PowerBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = PowerBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = PowerBallOddEvenResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s7 = PowerBallOddEvenResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 8)
                {
                    string s1 = PowerBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = PowerBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = PowerBallOddEvenResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s7 = PowerBallOddEvenResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s8 = PowerBallOddEvenResult8.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
            }
        }
        private void checkEOSCruisePowerBallUnderOverCheck()
        {
            if (!EosPowerBallUnderOverUseCheck.Checked)
            {
                return;
            }
            ComboBox BetListLevel = Controls.Find("EosCruisePowerBallUnderOverBetListLevel" + CruiseBetPowerBallUnderOverSubLevel.ToString(), true)[0] as ComboBox;
            TextBox BetPickLevel = Controls.Find("EosCruisePowerBallUnderOverBetPickLevel" + CruiseBetPowerBallUnderOverSubLevel.ToString(), true)[0] as TextBox;
            string[] stringSplit = BetListLevel.Text.Split(new char[] { '|' });

            for (int i = 0; i < stringSplit.Length; i++)
            {
                string[] s = stringSplit[i].Split(new char[] { '-' });
                if (s[0].Length == 1)
                {
                    string s1 = PowerBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];

                    if (s[0].Equals(s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 2)
                {
                    string s1 = PowerBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 3)
                {
                    string s1 = PowerBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 4)
                {
                    string s1 = PowerBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 5)
                {
                    string s1 = PowerBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = PowerBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 6)
                {
                    string s1 = PowerBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = PowerBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = PowerBallUnderOverResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 7)
                {
                    string s1 = PowerBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = PowerBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = PowerBallUnderOverResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s7 = PowerBallUnderOverResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 8)
                {
                    string s1 = PowerBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = PowerBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = PowerBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = PowerBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = PowerBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = PowerBallUnderOverResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s7 = PowerBallUnderOverResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s8 = PowerBallUnderOverResult8.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
            }
        }


        private void checkEOSCruiseNormalBallOddEvenCheck()
        {
            if (!EosNormalBallOddEvenUseCheck.Checked)
            {
                return;
            }
            ComboBox BetListLevel = Controls.Find("EosCruiseNormalBallOddEvenBetListLevel" + CruiseBetNormalBallOddEvenSubLevel.ToString(), true)[0] as ComboBox;
            TextBox BetPickLevel = Controls.Find("EosCruiseNormalBallOddEvenBetPickLevel" + CruiseBetNormalBallOddEvenSubLevel.ToString(), true)[0] as TextBox;
            string[] stringSplit = BetListLevel.Text.Split(new char[] { '|' });

            for (int i = 0; i < stringSplit.Length; i++)
            {
                string[] s = stringSplit[i].Split(new char[] { '-' });
                if (s[0].Length == 1)
                {
                    string s1 = NormalBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];

                    if (s[0].Equals(s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 2)
                {
                    string s1 = NormalBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 3)
                {
                    string s1 = NormalBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 4)
                {
                    string s1 = NormalBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 5)
                {
                    string s1 = NormalBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = NormalBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 6)
                {
                    string s1 = NormalBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = NormalBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = NormalBallOddEvenResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 7)
                {
                    string s1 = NormalBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = NormalBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = NormalBallOddEvenResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s7 = NormalBallOddEvenResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 8)
                {
                    string s1 = NormalBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = NormalBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = NormalBallOddEvenResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s7 = NormalBallOddEvenResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s8 = NormalBallOddEvenResult8.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
            }
        }


        private void checkEOSCruiseNormalBallUnderOverCheck()
        {
            if (!EossNormalBallUnderOverUseCheck.Checked)
            {
                return;
            }
            ComboBox BetListLevel = Controls.Find("EosCruiseNormalBallUnderOverBetListLevel" + CruiseBetNormalBallUnderOverSubLevel.ToString(), true)[0] as ComboBox;
            TextBox BetPickLevel = Controls.Find("EosCruiseNormalBallUnderOverBetPickLevel" + CruiseBetNormalBallUnderOverSubLevel.ToString(), true)[0] as TextBox;
            string[] stringSplit = BetListLevel.Text.Split(new char[] { '|' });

            for (int i = 0; i < stringSplit.Length; i++)
            {
                string[] s = stringSplit[i].Split(new char[] { '-' });
                if (s[0].Length == 1)
                {
                    string s1 = NormalBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];

                    if (s[0].Equals(s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 2)
                {
                    string s1 = NormalBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];

                    if (s[0].Equals(s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 3)
                {
                    string s1 = NormalBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 4)
                {
                    string s1 = NormalBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 5)
                {
                    string s1 = NormalBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = NormalBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 6)
                {
                    string s1 = NormalBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = NormalBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = NormalBallUnderOverResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 7)
                {
                    string s1 = NormalBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = NormalBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = NormalBallUnderOverResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s7 = NormalBallUnderOverResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
                else if (s[0].Length == 8)
                {
                    string s1 = NormalBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s2 = NormalBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s3 = NormalBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s4 = NormalBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s5 = NormalBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s6 = NormalBallUnderOverResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s7 = NormalBallUnderOverResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    string s8 = NormalBallUnderOverResult8.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
                    if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        BetListLevel.BackColor = Color.Black;
                        BetListLevel.ForeColor = Color.White;

                        BetPickLevel.Text = s[1];
                        BetPickLevel.BackColor = Color.Black;
                        BetPickLevel.ForeColor = Color.White;
                        break;
                    }
                    else
                    {
                        BetListLevel.BackColor = Color.WhiteSmoke;
                        BetListLevel.ForeColor = Color.Black;

                        BetPickLevel.Text = "통";
                        BetPickLevel.BackColor = Color.WhiteSmoke;
                        BetPickLevel.ForeColor = Color.Black;
                    }
                }
            }
        }

        private void PowerBallCruiseBetResultButton_TextChanged(object sender, EventArgs e)
        {
            Button button = sender as Button;
            if (button.Text.Contains("홀") || button.Text.Contains("언"))
            {
                button.ForeColor = Color.DodgerBlue;
            } else if (button.Text.Contains("짝") || button.Text.Contains("오"))
            {
                button.ForeColor = Color.OrangeRed;
            } else
            {
                button.ForeColor = Color.Gray;
            }
        }


        private void MirrorBetPowerBallOddEvenCheck()
        {
            RichTextBox MirrorBetRest1 = Controls.Find("MirrorBetPowerOddEvenRest1", true)[0] as RichTextBox;
            RichTextBox MirrorBetRest2 = Controls.Find("MirrorBetPowerOddEvenRest2", true)[0] as RichTextBox;
            // MirrorBetPowerOddEvenPattern1
            RichTextBox MirrorBetPattern1 = Controls.Find("MirrorBetPowerOddEvenPattern1", true)[0] as RichTextBox;
            RichTextBox MirrorBetPattern2 = Controls.Find("MirrorBetPowerOddEvenPattern2", true)[0] as RichTextBox;
            // MirrorBetPowerOddEvenPick1
            Button MirrorBetPick1 = Controls.Find("MirrorBetPowerOddEvenPick1", true)[0] as Button;
            Button MirrorBetPick2 = Controls.Find("MirrorBetPowerOddEvenPick2", true)[0] as Button;

            string[] MirrorBetRest1Split = MirrorBetRest1.Text.Split(new char[] { '|' });
            string[] MirrorBetRest2Split = MirrorBetRest2.Text.Split(new char[] { '|' });

            string[] MirrorBetPattern1Split = MirrorBetPattern1.Text.Split(new char[] { '|' });
            string[] MirrorBetPattern2Split = MirrorBetPattern2.Text.Split(new char[] { '|' });

            string s1 = PowerBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s2 = PowerBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s3 = PowerBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s4 = PowerBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s5 = PowerBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s6 = PowerBallOddEvenResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s7 = PowerBallOddEvenResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s8 = PowerBallOddEvenResult8.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];

            for (int i = 0; i < MirrorBetRest1Split.Length; i++)
            {
                string s = MirrorBetRest1Split[i];
                if (s.Length == 1)
                {
                    if (s.Equals(s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    } else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 2)
                {
                    if (s.Equals(s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 3)
                {
                    if (s.Equals(s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetRest1.Text = ":::";
                    }
                }
                else if (s.Length == 4)
                {
                    if (s.Equals(s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 5)
                {
                    if (s.Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 6)
                {
                    if (s.Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 7)
                {
                    if (s.Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 8)
                {
                    if (s.Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else
                {
                    MirrorBetRest1.ForeColor = Color.Black;
                    MirrorBetRest1.BackColor = Color.WhiteSmoke;
                    MirrorBetPick1.Text = ":::";
                }
            }

            for (int i = 0; i < MirrorBetRest2Split.Length; i++)
            {
                string s = MirrorBetRest2Split[i];
                if (s.Length == 1)
                {
                    if (s.Equals(s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 2)
                {
                    if (s.Equals(s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 3)
                {
                    if (s.Equals(s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 4)
                {
                    if (s.Equals(s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 5)
                {
                    if (s.Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 6)
                {
                    if (s.Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 7)
                {
                    if (s.Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 8)
                {
                    if (s.Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                } else
                {
                    MirrorBetRest2.ForeColor = Color.Black;
                    MirrorBetRest2.BackColor = Color.WhiteSmoke;
                    MirrorBetPick2.Text = ":::";
                }
            }

            if (!MirrorBetPick1.Text.Equals("통"))
            {
                for (int i = 0; i < MirrorBetPattern1Split.Length; i++)
                {
                    string[] s = MirrorBetPattern1Split[i].Split(new char[] { '-' });
                    if (s[0].Length == 1)
                    {
                        if (s[0].Equals(s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;                            
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 2)
                    {
                        if (s[0].Equals(s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 3)
                    {
                        if (s[0].Equals(s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 4)
                    {
                        if (s[0].Equals(s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 5)
                    {
                        if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 6)
                    {
                        if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 7)
                    {
                        if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 8)
                    {
                        if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                }
            }

            if (!MirrorBetPick2.Text.Equals("통"))
            {
                for (int i = 0; i < MirrorBetPattern2Split.Length; i++)
                {
                    string[] s = MirrorBetPattern2Split[i].Split(new char[] { '-' });
                    if (s[0].Length == 1)
                    {
                        if (s[0].Equals(s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 2)
                    {
                        if (s[0].Equals(s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 3)
                    {
                        if (s[0].Equals(s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 4)
                    {
                        if (s[0].Equals(s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 5)
                    {
                        if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 6)
                    {
                        if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 7)
                    {
                        if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 8)
                    {
                        if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                }
            }
        }


        private void MirrorBetPowerBallUnderOverCheck()
        {
            RichTextBox MirrorBetRest1 = Controls.Find("MirrorBetPowerUnderOverRest1", true)[0] as RichTextBox;
            RichTextBox MirrorBetRest2 = Controls.Find("MirrorBetPowerUnderOverRest2", true)[0] as RichTextBox;
            // MirrorBetPowerUnderOverPattern1
            RichTextBox MirrorBetPattern1 = Controls.Find("MirrorBetPowerUnderOverPattern1", true)[0] as RichTextBox;
            RichTextBox MirrorBetPattern2 = Controls.Find("MirrorBetPowerUnderOverPattern2", true)[0] as RichTextBox;
            // MirrorBetPowerUnderOverPick1
            Button MirrorBetPick1 = Controls.Find("MirrorBetPowerUnderOverPick1", true)[0] as Button;
            Button MirrorBetPick2 = Controls.Find("MirrorBetPowerUnderOverPick2", true)[0] as Button;

            string[] MirrorBetRest1Split = MirrorBetRest1.Text.Split(new char[] { '|' });
            string[] MirrorBetRest2Split = MirrorBetRest2.Text.Split(new char[] { '|' });

            string[] MirrorBetPattern1Split = MirrorBetPattern1.Text.Split(new char[] { '|' });
            string[] MirrorBetPattern2Split = MirrorBetPattern2.Text.Split(new char[] { '|' });

            string s1 = PowerBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s2 = PowerBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s3 = PowerBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s4 = PowerBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s5 = PowerBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s6 = PowerBallUnderOverResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s7 = PowerBallUnderOverResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s8 = PowerBallUnderOverResult8.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];

            for (int i = 0; i < MirrorBetRest1Split.Length; i++)
            {
                string s = MirrorBetRest1Split[i];
                if (s.Length == 1)
                {
                    if (s.Equals(s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 2)
                {
                    if (s.Equals(s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 3)
                {
                    if (s.Equals(s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetRest1.Text = ":::";
                    }
                }
                else if (s.Length == 4)
                {
                    if (s.Equals(s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 5)
                {
                    if (s.Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 6)
                {
                    if (s.Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 7)
                {
                    if (s.Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 8)
                {
                    if (s.Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else
                {
                    MirrorBetRest1.ForeColor = Color.Black;
                    MirrorBetRest1.BackColor = Color.WhiteSmoke;
                    MirrorBetPick1.Text = ":::";
                }
            }

            for (int i = 0; i < MirrorBetRest2Split.Length; i++)
            {
                string s = MirrorBetRest2Split[i];
                if (s.Length == 1)
                {
                    if (s.Equals(s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 2)
                {
                    if (s.Equals(s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 3)
                {
                    if (s.Equals(s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 4)
                {
                    if (s.Equals(s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 5)
                {
                    if (s.Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 6)
                {
                    if (s.Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 7)
                {
                    if (s.Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 8)
                {
                    if (s.Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else
                {
                    MirrorBetRest2.ForeColor = Color.Black;
                    MirrorBetRest2.BackColor = Color.WhiteSmoke;
                    MirrorBetPick2.Text = ":::";
                }
            }

            if (!MirrorBetPick1.Text.Equals("통"))
            {
                for (int i = 0; i < MirrorBetPattern1Split.Length; i++)
                {
                    string[] s = MirrorBetPattern1Split[i].Split(new char[] { '-' });
                    if (s[0].Length == 1)
                    {
                        if (s[0].Equals(s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 2)
                    {
                        if (s[0].Equals(s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 3)
                    {
                        if (s[0].Equals(s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 4)
                    {
                        if (s[0].Equals(s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 5)
                    {
                        if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 6)
                    {
                        if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 7)
                    {
                        if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 8)
                    {
                        if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                }
            }

            if (!MirrorBetPick2.Text.Equals("통"))
            {
                for (int i = 0; i < MirrorBetPattern2Split.Length; i++)
                {
                    string[] s = MirrorBetPattern2Split[i].Split(new char[] { '-' });
                    if (s[0].Length == 1)
                    {
                        if (s[0].Equals(s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 2)
                    {
                        if (s[0].Equals(s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 3)
                    {
                        if (s[0].Equals(s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 4)
                    {
                        if (s[0].Equals(s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 5)
                    {
                        if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 6)
                    {
                        if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 7)
                    {
                        if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 8)
                    {
                        if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                }
            }
        }


        private void MirrorBetNormalBallOddEvenCheck()
        {
            RichTextBox MirrorBetRest1 = Controls.Find("MirrorBetNormalOddEvenRest1", true)[0] as RichTextBox;
            RichTextBox MirrorBetRest2 = Controls.Find("MirrorBetNormalOddEvenRest2", true)[0] as RichTextBox;
            // MirrorBetNormalOddEvenPattern1
            RichTextBox MirrorBetPattern1 = Controls.Find("MirrorBetNormalOddEvenPattern1", true)[0] as RichTextBox;
            RichTextBox MirrorBetPattern2 = Controls.Find("MirrorBetNormalOddEvenPattern2", true)[0] as RichTextBox;
            // MirrorBetNormalOddEvenPick1
            Button MirrorBetPick1 = Controls.Find("MirrorBetNormalOddEvenPick1", true)[0] as Button;
            Button MirrorBetPick2 = Controls.Find("MirrorBetNormalOddEvenPick2", true)[0] as Button;

            string[] MirrorBetRest1Split = MirrorBetRest1.Text.Split(new char[] { '|' });
            string[] MirrorBetRest2Split = MirrorBetRest2.Text.Split(new char[] { '|' });

            string[] MirrorBetPattern1Split = MirrorBetPattern1.Text.Split(new char[] { '|' });
            string[] MirrorBetPattern2Split = MirrorBetPattern2.Text.Split(new char[] { '|' });

            string s1 = NormalBallOddEvenResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s2 = NormalBallOddEvenResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s3 = NormalBallOddEvenResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s4 = NormalBallOddEvenResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s5 = NormalBallOddEvenResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s6 = NormalBallOddEvenResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s7 = NormalBallOddEvenResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s8 = NormalBallOddEvenResult8.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];

            for (int i = 0; i < MirrorBetRest1Split.Length; i++)
            {
                string s = MirrorBetRest1Split[i];
                if (s.Length == 1)
                {
                    if (s.Equals(s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 2)
                {
                    if (s.Equals(s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 3)
                {
                    if (s.Equals(s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetRest1.Text = ":::";
                    }
                }
                else if (s.Length == 4)
                {
                    if (s.Equals(s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 5)
                {
                    if (s.Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 6)
                {
                    if (s.Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 7)
                {
                    if (s.Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 8)
                {
                    if (s.Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else
                {
                    MirrorBetRest1.ForeColor = Color.Black;
                    MirrorBetRest1.BackColor = Color.WhiteSmoke;
                    MirrorBetPick1.Text = ":::";
                }
            }

            for (int i = 0; i < MirrorBetRest2Split.Length; i++)
            {
                string s = MirrorBetRest2Split[i];
                if (s.Length == 1)
                {
                    if (s.Equals(s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 2)
                {
                    if (s.Equals(s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 3)
                {
                    if (s.Equals(s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 4)
                {
                    if (s.Equals(s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 5)
                {
                    if (s.Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 6)
                {
                    if (s.Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 7)
                {
                    if (s.Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 8)
                {
                    if (s.Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else
                {
                    MirrorBetRest2.ForeColor = Color.Black;
                    MirrorBetRest2.BackColor = Color.WhiteSmoke;
                    MirrorBetPick2.Text = ":::";
                }
            }

            if (!MirrorBetPick1.Text.Equals("통"))
            {
                for (int i = 0; i < MirrorBetPattern1Split.Length; i++)
                {
                    string[] s = MirrorBetPattern1Split[i].Split(new char[] { '-' });
                    if (s[0].Length == 1)
                    {
                        if (s[0].Equals(s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 2)
                    {
                        if (s[0].Equals(s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 3)
                    {
                        if (s[0].Equals(s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 4)
                    {
                        if (s[0].Equals(s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 5)
                    {
                        if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 6)
                    {
                        if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 7)
                    {
                        if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 8)
                    {
                        if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                }
            }

            if (!MirrorBetPick2.Text.Equals("통"))
            {
                for (int i = 0; i < MirrorBetPattern2Split.Length; i++)
                {
                    string[] s = MirrorBetPattern2Split[i].Split(new char[] { '-' });
                    if (s[0].Length == 1)
                    {
                        if (s[0].Equals(s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 2)
                    {
                        if (s[0].Equals(s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 3)
                    {
                        if (s[0].Equals(s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 4)
                    {
                        if (s[0].Equals(s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 5)
                    {
                        if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 6)
                    {
                        if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 7)
                    {
                        if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 8)
                    {
                        if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                }
            }
        }


        private void MirrorBetNormalBallUnderOverCheck()
        {
            RichTextBox MirrorBetRest1 = Controls.Find("MirrorBetNormalUnderOverRest1", true)[0] as RichTextBox;
            RichTextBox MirrorBetRest2 = Controls.Find("MirrorBetNormalUnderOverRest2", true)[0] as RichTextBox;
            // MirrorBetNormalUnderOverPattern1
            RichTextBox MirrorBetPattern1 = Controls.Find("MirrorBetNormalUnderOverPattern1", true)[0] as RichTextBox;
            RichTextBox MirrorBetPattern2 = Controls.Find("MirrorBetNormalUnderOverPattern2", true)[0] as RichTextBox;
            // MirrorBetNormalUnderOverPick1
            Button MirrorBetPick1 = Controls.Find("MirrorBetNormalUnderOverPick1", true)[0] as Button;
            Button MirrorBetPick2 = Controls.Find("MirrorBetNormalUnderOverPick2", true)[0] as Button;

            string[] MirrorBetRest1Split = MirrorBetRest1.Text.Split(new char[] { '|' });
            string[] MirrorBetRest2Split = MirrorBetRest2.Text.Split(new char[] { '|' });

            string[] MirrorBetPattern1Split = MirrorBetPattern1.Text.Split(new char[] { '|' });
            string[] MirrorBetPattern2Split = MirrorBetPattern2.Text.Split(new char[] { '|' });

            string s1 = NormalBallUnderOverResult1.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s2 = NormalBallUnderOverResult2.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s3 = NormalBallUnderOverResult3.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s4 = NormalBallUnderOverResult4.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s5 = NormalBallUnderOverResult5.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s6 = NormalBallUnderOverResult6.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s7 = NormalBallUnderOverResult7.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];
            string s8 = NormalBallUnderOverResult8.Text.Split(new string[] { "\r\n" }, StringSplitOptions.RemoveEmptyEntries)[0];

            for (int i = 0; i < MirrorBetRest1Split.Length; i++)
            {
                string s = MirrorBetRest1Split[i];
                if (s.Length == 1)
                {
                    if (s.Equals(s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 2)
                {
                    if (s.Equals(s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 3)
                {
                    if (s.Equals(s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetRest1.Text = ":::";
                    }
                }
                else if (s.Length == 4)
                {
                    if (s.Equals(s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 5)
                {
                    if (s.Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 6)
                {
                    if (s.Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 7)
                {
                    if (s.Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else if (s.Length == 8)
                {
                    if (s.Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest1.ForeColor = Color.White;
                        MirrorBetRest1.BackColor = Color.Black;
                        MirrorBetPick1.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest1.ForeColor = Color.Black;
                        MirrorBetRest1.BackColor = Color.WhiteSmoke;
                        MirrorBetPick1.Text = ":::";
                    }
                }
                else
                {
                    MirrorBetRest1.ForeColor = Color.Black;
                    MirrorBetRest1.BackColor = Color.WhiteSmoke;
                    MirrorBetPick1.Text = ":::";
                }
            }

            for (int i = 0; i < MirrorBetRest2Split.Length; i++)
            {
                string s = MirrorBetRest2Split[i];
                if (s.Length == 1)
                {
                    if (s.Equals(s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 2)
                {
                    if (s.Equals(s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 3)
                {
                    if (s.Equals(s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 4)
                {
                    if (s.Equals(s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 5)
                {
                    if (s.Equals(s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 6)
                {
                    if (s.Equals(s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 7)
                {
                    if (s.Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else if (s.Length == 8)
                {
                    if (s.Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                    {
                        MirrorBetRest2.ForeColor = Color.White;
                        MirrorBetRest2.BackColor = Color.Black;
                        MirrorBetPick2.Text = "통";
                        break;
                    }
                    else
                    {
                        MirrorBetRest2.ForeColor = Color.Black;
                        MirrorBetRest2.BackColor = Color.WhiteSmoke;
                        MirrorBetPick2.Text = ":::";
                    }
                }
                else
                {
                    MirrorBetRest2.ForeColor = Color.Black;
                    MirrorBetRest2.BackColor = Color.WhiteSmoke;
                    MirrorBetPick2.Text = ":::";
                }
            }

            if (!MirrorBetPick1.Text.Equals("통"))
            {
                for (int i = 0; i < MirrorBetPattern1Split.Length; i++)
                {
                    string[] s = MirrorBetPattern1Split[i].Split(new char[] { '-' });
                    if (s[0].Length == 1)
                    {
                        if (s[0].Equals(s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 2)
                    {
                        if (s[0].Equals(s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 3)
                    {
                        if (s[0].Equals(s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 4)
                    {
                        if (s[0].Equals(s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 5)
                    {
                        if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 6)
                    {
                        if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 7)
                    {
                        if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                    else if (s[0].Length == 8)
                    {
                        if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern1.BackColor = Color.Black;
                            MirrorBetPattern1.ForeColor = Color.White;
                            MirrorBetPick1.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern1.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern1.ForeColor = Color.Black;
                            MirrorBetPick1.Text = "통";
                        }
                    }
                }
            }

            if (!MirrorBetPick2.Text.Equals("통"))
            {
                for (int i = 0; i < MirrorBetPattern2Split.Length; i++)
                {
                    string[] s = MirrorBetPattern2Split[i].Split(new char[] { '-' });
                    if (s[0].Length == 1)
                    {
                        if (s[0].Equals(s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 2)
                    {
                        if (s[0].Equals(s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 3)
                    {
                        if (s[0].Equals(s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 4)
                    {
                        if (s[0].Equals(s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 5)
                    {
                        if (s[0].Equals(s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 6)
                    {
                        if (s[0].Equals(s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 7)
                    {
                        if (s[0].Equals(s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                    else if (s[0].Length == 8)
                    {
                        if (s[0].Equals(s8 + s7 + s6 + s5 + s4 + s3 + s2 + s1))
                        {
                            MirrorBetPattern2.BackColor = Color.Black;
                            MirrorBetPattern2.ForeColor = Color.White;
                            MirrorBetPick2.Text = s[1];
                            break;
                        }
                        else
                        {
                            MirrorBetPattern2.BackColor = Color.WhiteSmoke;
                            MirrorBetPattern2.ForeColor = Color.Black;
                            MirrorBetPick2.Text = "통";
                        }
                    }
                }
            }
        }
        private void MirrorBetPowerOddEvenUseCheck_CheckedChanged(object sender, EventArgs e)
        {
            MirrorBetPowerOddEvenPick1.Text = ":::";
            MirrorBetPowerOddEvenPick2.Text = ":::";
        }

        private void MirrorBetPowerUnderOverUseCheck_CheckedChanged(object sender, EventArgs e)
        {
            MirrorBetPowerUnderOverPick1.Text = ":::";
            MirrorBetPowerUnderOverPick2.Text = ":::";
        }

        private void MirrorBetNormalOddEvenUseCheck_CheckedChanged(object sender, EventArgs e)
        {
            MirrorBetNormalOddEvenPick1.Text = ":::";
            MirrorBetNormalOddEvenPick2.Text = ":::";
        }

        private void MirrorBetNormalBallUnderOverUseCheck_CheckedChanged(object sender, EventArgs e)
        {
            MirrorBetNormalUnderOverPick1.Text = ":::";
            MirrorBetNormalUnderOverPick2.Text = ":::";
        }

        private void betStackInitToolStripMenuItem_Click(object sender, EventArgs e)
        {
            _startDateTime = DateTime.Now;
            All_Win_Bet_Money = 0;
            PowerBall_All_Bet_Money= 0;
            refreshGain();
        }

        private void CruiseBetTimeSettingComboBox_SelectedIndexChanged(object sender, EventArgs e)
        {
            int pcmbt = 0;
            int.TryParse(Regex.Replace(CruiseBetTimeSettingComboBox.Text, @"\D", ""), out pcmbt);
            PowerBall_Cruise_Mode_Betting_Time = pcmbt;
        }
    }

    public static class RandomExtensions
    {
        public static void Shuffle<T>(this Random rng, T[] array)
        {
            int n = array.Length;
            while (n > 1)
            {
                int k = rng.Next(n--);
                T temp = array[n];
                array[n] = array[k];
                array[k] = temp;
            }
        }
    }
    public static class Extensions
    {
        public static void DoubleBuffered(this Control control, bool enabled)

        {
            var prop = control.GetType().GetProperty("DoubleBuffered", BindingFlags.Instance | BindingFlags.NonPublic);
            prop.SetValue(control, enabled, null);
        }
    }

    public static class IListExtensions
    {
        /// <summary>
        /// Shuffles the element order of the specified list.
        /// </summary>
        public static void Shuffle<T>(this IList<T> list)
        {
            Random rng = new Random();
            int n = list.Count;
            while (n > 1)
            {
                n--;
                int k = rng.Next(n + 1);
                T value = list[k];
                list[k] = list[n];
                list[n] = value;
            }
        }
    }
}
